/* File:      flrundefhook.P
**
** Author(s): Guizhen Yang
**            Michael Kifer
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2013.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**      http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**
*/




:- compiler_options([xpp_on]).

#include "flora_terms.flh"


/****************************************************************************
  flora_undefined_predicate_hook/1
****************************************************************************/

%% Attempt to call a HiLog term as a predicate
flora_undefined_predicate_hook(WRAP_HILOG,Arity,_PrologModule) :-
	!,
	RealArity is Arity - 1,
	flora_error_line('attempt to call a HiLog term of arity ~w as a predicate', [RealArity]).

flora_undefined_predicate_hook(WRAP_TABLED_HILOG,Arity,_PrologModule) :-
	!,
	RealArity is Arity - 1,
	flora_error_line('attempt to call a HiLog term of arity ~w as a predicate', [RealArity]).

flora_undefined_predicate_hook(PRNEG(WRAP_TABLED_HILOG),Arity,_PrologModule) :-
	!,
	RealArity is Arity - 1,
	flora_error_line('attempt to call a negated HiLog term of arity ~w as a predicate', [RealArity]).

flora_undefined_predicate_hook(WRAP_NONTABLED_HILOG,Arity,_PrologModule) :-
	!,
	RealArity is Arity - 1,
	flora_error_line('attempt to call a HiLog term of arity ~w as a predicate', [RealArity]).

%% A call to a molecule
flora_undefined_predicate_hook(PredName,Arity,PrologModule) :-
	%% Decode the predicate symbol.
	functor(PCall,PredName,Arity),
	flora_decode_predicate(PCall,PredicateType,ModuleName,_Prefix,PredSymbol,_),
	( (PredicateType == flogic ; PredicateType == neg_flogic) ->
	    %% an F-logic predicate
	    flora_decode_goal_as_atom(PCall,PCallAtom),
	    ( '_isloaded'(ModuleName) ->
		%% This is very unlikely to happen unless something goes wrong.
		flora_error_line('attempt to call an undefined F-logic molecule of the form ~w in module `~w''',
			         [PCallAtom, ModuleName])
	    ; flora_imported_module_registry(Importer,ModuleName) ->
		flora_error_line('module  ~w is imported by module ~w but ~w is nonloaded',
				[ModuleName,Importer,ModuleName])
	    ;
	        flora_error_line('attempt to call an F-logic molecule of the form ~w in a nonloaded module `~w''',
                                 [PCallAtom, ModuleName])
	    )

	; (PredicateType == (hilog) ; PredicateType == neg_hilog) ->
	    %% a HiLog predicate
	    flora_decode_goal_as_atom(PCall,PCallAtom),
	    %% RealArity is Arity - 2, % extra one for the caller arg
	    ( '_isloaded'(ModuleName) ->
		flora_error_line('attempt to call an undefined HiLog predicate ~w',
				 [PCallAtom])
	    ; flora_imported_module_registry(Importer,ModuleName) ->
		flora_error_line('module  ~w is imported by module ~w but ~w is nonloaded',
				[ModuleName,Importer,ModuleName])
	    ;
		flora_error_line('a call to a HiLog predicate ~w in a nonloaded module `~w''',
				 [PCallAtom,ModuleName])
	    )
	; PredicateType == (prolog) ->
	    flora_error_line('attempt to call an undefined Prolog predicate ~w/~w in module `~w''',
			    [PredName,Arity,PrologModule])

	; PredicateType == (flora) ->
	    Arity1 is Arity-1,
	    ('_isloaded'(ModuleName) ->
		flora_error_line('attempt to call an undefined predicate ~w/~w, which is declared as :- prolog in module `~w''~n\t(internal name: ~w/~w)',
				[PredSymbol,Arity1,ModuleName,PredName,Arity])
	    ;  PredSymbol == FL_UNDEFEATED ->
		flora_error_line('module `~w'' was designated to hold an argumentation theory (via the use_argumentation_theory directive), but no argumentation theory was ever loaded into `~w''',
				 [ModuleName,ModuleName])
	    ;  PredSymbol == FL_RULE_ENABLER ->
		flora_error_line('module ~w is nonloaded',[ModuleName])
	    ; flora_imported_module_registry(Importer,ModuleName) ->
		flora_error_line('module  ~w is imported by module ~w but ~w is nonloaded',
				[ModuleName,Importer,ModuleName])
	    ; flora_error_line('attempt to call predicate ~w/~w in a nonloaded module ~w',
			       [PredSymbol,Arity,ModuleName])
	    )

	; PredicateType == neg_flora ->
	    Arity1 is Arity-1,
	    ('_isloaded'(ModuleName) ->
		flora_error_line('attempt to call an undefined predicate neg w/~w, which is declared as :- prolog in module `~w''~n\t(internal name: ~w/~w)',
				[PredSymbol,Arity1,ModuleName,PredName,Arity])
	    ; flora_imported_module_registry(Importer,ModuleName) ->
		flora_error_line('module  ~w is imported by module ~w but ~w is nonloaded',
				[ModuleName,Importer,ModuleName])
	    ; flora_error_line('attempt to call predicate neg ~w/~w in a nonloaded module ~w',
				[PredSymbol,Arity,ModuleName])
	    )

	).
