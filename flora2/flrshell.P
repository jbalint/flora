/* File:      flrshell.P  -- The Flora interactive shell
**
** Author(s): Guizhen Yang
**            Michael Kifer
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2013.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**      http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**
*/



:- compiler_options([xpp_on]).

#include "extensions_xsb.h"

#include "flora_exceptions.flh"
#include "flora_terms.flh"
#include "flora_porting.flh"
#include "flora_extensions.flh"

/*********************************************************************/
flora_shell_loop :-
	flora_init_shell,
	repeat,
	catch(flora_shell_loop_body,
	      Exception,
	      flora_shell_loop_handler(Exception)).

flora_shell_loop_body :-
	(flora_banner_control(noprompt) ; flora_shell_prompt),
	flora_process_shell_command(Status),
	flora_loop_guard(Status).

flora_embedded_shell_loop :-
	flora_init_embedded_shell,
	repeat,
	catch(flora_embedded_shell_loop_body,
	      Exception,
	      flora_shell_loop_handler(Exception)).

flora_embedded_shell_loop_body :-
	flora_process_shell_command(Status),
	flora_embedded_loop_guard(Status).

flora_process_shell_command(Status) :-
	flora_shell_command_line(Code,Options,Status),
	( flora_good_command(Status) ->
	    findall(SysLibOp,member(FLSYSLIB(SysLibOp),Options),SysLibList),
	    flora_load_library(SysLibList),
	    findall(SysModOp,member(FLSYSMOD(SysModOp),Options),SysModList),
	    flora_load_system_module(SysModList),
	    (call(Code)
	    %% need to do this in case the call fails. Otherwise, it sometimes
	    %% goes back to flora_shell_command_line
	    ; true
	    )
	;
	  true
        ).


flora_shell_loop_handler(Error) :-
	var(Error),
	!,
	flora_stderr_nl,
	flora_error_line('unbound variable thrown as an exception - caught'), 
	flora_stderr_nl,
	fail.
%% If end_of_flora_shell was thrown then true (exit)
%% Othewrwise - fail (continue the loop)
flora_shell_loop_handler(END_OF_FLORA_SHELL) :-
	!.
flora_shell_loop_handler(FLORA_CMD_LINE_ARGUMENT_DONE) :-
	!,
	fail.
flora_shell_loop_handler(FLORA_TOP_LEVEL) :-
	!,
	fail.

flora_shell_loop_handler(error(undefined_predicate(PredName,Arity,Module),_Msg,_Trace)) :-
	flora_stderr_nl,
	%% throw/1 now closes open tables, so do NOT do it here
	%%close_open_tables(cleanup),
	%%my_print_backtrace(Trace),
	flora_undefined_predicate_hook(PredName,Arity,Module),
	flora_stderr_nl,
	!,
	fail.
flora_shell_loop_handler(error(existence_error(module,Module),_Msg,_Trace)) :-
	flora_stderr_nl,
	%% throw/1 now closes open tables, so do NOT do it here
	%%close_open_tables(cleanup),
	%%my_print_backtrace(Trace),
	flora_error_line('attempt to call a Prolog predicate in a nonloaded module `~w''', [Module]),
	flora_stderr_nl,
	!,
	fail.
flora_shell_loop_handler(error(existence_error(procedure,Module:PredName/Arity),_Msg,_Trace)) :-
	flora_stderr_nl,
	%% throw/1 now closes open tables, so do NOT do it here
	%%close_open_tables(cleanup),
	%%my_print_backtrace(Trace),
	flora_undefined_predicate_hook(PredName,Arity,Module),
	flora_stderr_nl,
	!,
	fail.

flora_shell_loop_handler(FLORA_ABORT(Trace)) :-
	!,
	flora_stderr_nl,
	flora_stderr_string('++Abort[FLORA]'),
	flora_stderr_nl,
	my_print_backtrace(Trace),
	fail.

%% When user abort - don't print the trace
flora_shell_loop_handler(FLORA_USER_ABORT(Msg,_Trace)) :-
	!,
	flora_stderr_nl,
	(Msg == ''
	-> flora_stderr_string('++Abort[USER]')
	;  flora_stderr_string('++Abort[USER]> ~w', [Msg])
	),
	flora_stderr_nl,
	flora_stderr_nl,
	fail.

%% Not used any more
%% Silent abort: print nothing
flora_shell_loop_handler(FLORA_SILENT_ABORT(_Msg,_Trace)) :-
	!,
	fail.

%% don't print the backtrace
flora_shell_loop_handler(FLORA_ABORT_NOTRACE(Msg,_Trace)) :-
	!,
	(Msg = FLORA_NOT_EXPORTED_EXCEPTION(_,ErrorMsg), !
	; Msg = FLORA_UNDEFINED_EXCEPTION(_,ErrorMsg), !
	; Msg = FLORA_DB_EXCEPTION(ErrorMsg), !
	; Msg = ErrorMsg
	),
	flora_stderr_nl,
	flora_stderr_string('++Abort[FLORA]> ~w', [ErrorMsg]),
	flora_stderr_nl,
	flora_stderr_nl,
	fail.

flora_shell_loop_handler(FLORA_ABORT(Msg,Trace)) :-
	!,
	(Msg = FLORA_NOT_EXPORTED_EXCEPTION(_,ErrorMsg), !
	; Msg = FLORA_UNDEFINED_EXCEPTION(_,ErrorMsg), !
	; Msg = FLORA_DB_EXCEPTION(ErrorMsg), !
	; Msg = ErrorMsg
	),
	flora_stderr_nl,
	flora_stderr_string('++Abort[FLORA]> ~w', [ErrorMsg]),
	flora_stderr_nl,
	my_print_backtrace(Trace),
	fail.
flora_shell_loop_handler(Exception) :-
	default_sys_error_handler(Exception),
	!,
	fail.

%% This is a workaround the XSB bug where print_backtrace/1 fails with the
%% argument []. Expects [[]], but catch/3 sometimes generates Trace=[].
my_print_backtrace(Trace) :-
	(print_backtrace(Trace) -> true
	; true
	).


/*********************************************************************/
flora_init_shell :-
	consult(flrundefhook),
	consult(flrutils),
	flora_load_library(FLLIBSHELLANS),
	flora_load_library(FLLIBLOAD),
	flora_load_library(FLLIBDISPLAY),
	flora_load_library(FLLIBIMPORTEDCALLS),
	flora_load_library(FLLIBUNIFYHANDLERS),
	(flora_get_counter(flora_rc_file_loaded,1) -> true
	; flloadtrailer([FL_EQUALITY(NONE)],FLORA_DEFAULT_WORKSPACE)
	),
	(flora_banner_control(nobanner) ; flora_welcome_msg),
	'\\all',
	'\\chatter',
	flora_set_counter(flora_shell_loaded,1),
	flora_set_counter(flora_shell_first_loop,1),
	flora_clear_runtime_uriprefixes,  %% just a precaution
	!.

flora_init_embedded_shell :-
	flloadtrailer([FL_EQUALITY(NONE)],FLORA_DEFAULT_WORKSPACE),
	'\\all',
	'\\nochatter'.

/*********************************************************************/
#if exists("hooks/flrwelcome.P")
#include "hooks/flrwelcome.P"
#endif
flora_welcome_msg :-
	flora_configuration(version,V),
	flora_configuration(build,B),
	flora_configuration(releasedate,D),
	flora_configuration(name,N),
	flora_stdmsg_string('~nFLORA-2 Version ~w (~w) of ~w (rev: ~w)~n',[V,N,D,B]),
	xsb_configuration(version,XSBversion),
	xsb_configuration(codename,XSBname),
	xsb_configuration(release_date,date(Yr,Mo,Day)),
	xsb_configuration(host_os,OS),
	xsb_configuration(word_size,OSbits),
	flora_stdmsg_string('XSB Version ~w (~w) of ~w-~w-~w (~w, ~w bits)~n',[XSBversion,XSBname,Yr,Mo,Day,OS,OSbits]),
	flora_stdmsg_nl,
	flora_stdmsg_line('Welcome! Type \\help. to display the help message.'),
	%%flora_stdmsg_line('Type `demo{demoName}.'' to run a demo.'),
	flora_stdmsg_nl,
	!.

/*********************************************************************/
%% On the first loop Flora gets []-list of tokens and returns no code
%% with the noop status. This causes an extra prompt to be output.
%% The flora_shell_first_loop trick eliminates this extra prompt.
flora_shell_prompt :-
	flora_get_counter(flora_shell_first_loop,1),
	!,
	flora_stdfdbk_string('~n'),
	flora_set_counter(flora_shell_first_loop,0).
flora_shell_prompt :- flora_stdfdbk_string(FLRPROMPT).


/*********************************************************************/
%% Check for end of input
flora_loop_guard(Status) :-
	( flora_end_of_input(Status) ->
	    ( pop_stdin(cmd_line_argument) ->
		%% end of input from -e option string to XSB
		flora_stdfdbk_string('~n'),
		throw(FLORA_CMD_LINE_ARGUMENT_DONE)
	    ;
	      '\\end'
	    )
	;
	    %% We have to throw -- can't fail -- because we don't want
	    %% backtracking over the executed goals. Instead, we want
	    %% to return to FLORA's top level
	    throw(FLORA_TOP_LEVEL)
	).

flora_embedded_loop_guard(Status) :-
	( flora_end_of_input(Status) ->
	    throw(END_OF_FLORA_SHELL)
	;
	    throw(FLORA_TOP_LEVEL)
	).

/*********************************************************************/
#mode save
#mode nostring "\!#'"
'\\help' :-
        flora_stdmsg_line('~n'),
	flora_stdmsg_line('FLSYSTEM_UNQ shell commands:~n'),
	flora_stdmsg_line('o \\help'),
	flora_stdmsg_line('    show this info'),
	flora_stdmsg_line('o compile{FILE}'),
	flora_stdmsg_line('    compile FILE.FLORA_FILE_PREFERRED_EXT for module `main'''),
	flora_stdmsg_line('o compile{FILE>>Module}'),
	flora_stdmsg_line('    compile FILE.FLORA_FILE_PREFERRED_EXT for Module'),
	flora_stdmsg_line('o compileadd{FILE}'),
	flora_stdmsg_line('    compile FILE.FLORA_FILE_PREFERRED_EXT for adding to module `main'''),
	flora_stdmsg_line('o compileadd{FILE>>Module}'),
	flora_stdmsg_line('    compile FILE.FLORA_FILE_PREFERRED_EXT for adding to Module'),
	flora_stdmsg_line('o load{FILE>>Module}  OR  [FILE >> Module,...]'),
	flora_stdmsg_line('    load FILE.FLORA_FILE_PREFERRED_EXT into Module'),
	flora_stdmsg_string('    specifying FILE.~w or FILE.~w loads these files;',
			    [PROLOG_PFILE_EXT,PROLOG_OBJFILE_EXT]),
	flora_stdmsg_nl,
	flora_stdmsg_line('    the [...] version can load a list of files'),
	flora_stdmsg_line('o load{FILE}  OR  [FILE,...]'),
	flora_stdmsg_line('    load FILE.FLORA_FILE_PREFERRED_EXT into module `main'''),	
	flora_stdmsg_line('o save{Module>>FILE}'),
	flora_stdmsg_line('    save Module into FILE.FLORA_FILE_PREFERRED_EXT'),
	flora_stdmsg_line('    if FILE exsits it will be replaced otherwise new FILE will be created;'),
	flora_stdmsg_line('o save{FILE}'),
	flora_stdmsg_line('    save `main'' into FILE.FLORA_FILE_PREFERRED_EXT'),	
	flora_stdmsg_line('o add{FILE>>Module}  OR  [+FILE >> Module,...]'),
	flora_stdmsg_line('    add FILE.FLORA_FILE_PREFERRED_EXT to Module'),
	flora_stdmsg_line('    the [...] version can add a list of files'),
	flora_stdmsg_line('o add{FILE}  OR  [+FILE,...]'),
	flora_stdmsg_line('    add FILE.FLORA_FILE_PREFERRED_EXT to module `main'''),
	flora_stdmsg_line('    one can mix adding and loading: [+FILE1>>Module1, FILE2]'),
	flora_stdmsg_line('o demo{FILE}'),
	flora_stdmsg_line('    run a demo from FLSYSTEM_UNQ demos directory'),
	flora_stdmsg_line('o \\all'),
	flora_stdmsg_line('    show all solutions (default)'),
	flora_stdmsg_line('o \\one'),
	flora_stdmsg_line('    show solutions one by one'),
	flora_stdmsg_line('o \\trace/\\notrace'),
	flora_stdmsg_line('    turn on/off FLSYSTEM_UNQ trace'),
	flora_stdmsg_line('o \\chatter/\\nochatter'),
	flora_stdmsg_line('    Turn on/off the display of the number of solutions at the end of query evaluation'),
	flora_stdmsg_line('o \\warnings(TYPE)'),
	flora_stdmsg_line('    control warnings: all - all warnings, off - no warnings'),
	flora_stdmsg_line('                      compiler: compiler warnings only'),
	flora_stdmsg_line('                      dependency: dependency warnings only'),
	flora_stdmsg_line('o \\end'),
	flora_stdmsg_line('    say Ciao to FLSYSTEM_UNQ, stay in Prolog'),
	flora_stdmsg_line('o \\halt'),
	flora_stdmsg_line('    quit both FLSYSTEM_UNQ and Prolog').
#mode restore


/*********************************************************************/
flora_reset(X) :-
	var(X),
	!,
	flora_error_line('invalid argument to flora_reset'),
	fail.

flora_reset(FL_OP) :- !, flora_shreset_operator.

flora_reset(_) :-
	flora_error_line('invalid argument to flora_reset'),
	!,
	fail.


/*********************************************************************/
'\\all' :- flora_set_switch(all).

'\\one' :- flora_clear_switch(all).


/*********************************************************************/
'\\end' :-
	unstrap_flora,
	flora_call_hooks(_Module,EXITFLORA,_Param,before,_AroundHookLink),
	flora_stdmsg_line('~n~nCiao!'),
	throw(END_OF_FLORA_SHELL).

'\\halt' :- halt.


/*********************************************************************/
%% Enable Flora high-level debugging
'\\trace' :- flora_trace.
'\\notrace' :- flora_notrace.

%% Dumps profile into File
'\\trace'(File)     :- flora_trace(File).
%% Dumps trace in Flora queriable form
'\\trace'(File,log) :- flora_trace(File,log).

%% Enable ctrace for tabled predicates
%% Dumps ctrace into output stream or File 
'\\logforestlow' :- flora_logforestlow_start.
'\\logforestlow'(FileOrList) :- flora_logforestlow_start(FileOrList).
'\\logforestlow'(File,List) :- flora_logforestlow_start(File,List).
%% Dumps ctrace into ouput stream or File in Flora queriable form
'\\logforest' :- flora_logforest_start.
'\\logforest'(FileOrList) :- flora_logforest_start(FileOrList).
'\\logforest'(File,List) :- flora_logforest_start(File,List).
'\\nologforest' :- flora_logforest_end.

%% Enables low-level Prolog debugging
'\\tracelow' :- flora_tracelow.
'\\tracelow'(File) :- flora_tracelow(File).
%% Dumps trace in Prolog queriable form
'\\tracelow'(File,log) :- flora_tracelow(File,log).
'\\traceverylow' :- flora_traceverylow.
'\\traceverylow'(File) :- flora_traceverylow(File).
%% Dumps trace in Prolog queriable form
'\\traceverylow'(File,log) :- flora_traceverylow(File,log).


/*********************************************************************/
'\\chatter' :- flora_set_switch(chatter).
'\\nochatter' :- flora_clear_switch(chatter).

/*********************************************************************/
'\\demo'(OrigFile) :-
	flora_check_filename(OrigFile,File),
	flora_configuration(installdir,FloraDir),
	flora_slash(Slash),
	%% Add the demo directory to the module search path
	flora_concat_atoms([FloraDir,Slash,'demos'],DemoDir),
	flora_concat_atoms([DemoDir,Slash,FLORA_HIDDEN_DIR],DemoDirLib),
	( flora_module_path_get(DemoDirLib) ->
	    true
	; flora_module_path_add(DemoDirLib)
	),
	cwd(CurrWorkingDir),
	cd(DemoDir),
	flora_load_module_util(File,FL_SHELL_FICTITIOUS_FILENAME),
	cd(CurrWorkingDir),
	flora_module_path_remove(DemoDir).
/*********************************************************************/

%% Control warnings level

'\\warnings'(X) :- 
        var(X),
	!,
	flora_warnings_level(X).
'\\warnings'(off) :- 
	retractall(flora_warnings(_)),
	assert(flora_warnings_level(nocompiler)),
	assert(flora_warnings_level(nodependency)).
'\\warnings'(all) :-
	retractall(flora_warnings_level(_)).
'\\warnings'(compiler) :-
	'\\warnings'(off),
        retract(flora_warnings_level(nocompiler)).
'\\warnings'(dependency) :-
	'\\warnings'(off),
        retract(flora_warnings_level(nodependency)).
'\\warnings'(X) :- 
	flora_error_line('invalid warnings control option: ~w', [X]),
	throw(FLORA_TOP_LEVEL).


%% For debugging: check the real tabling regime in each module
'\\tabling' :-
	flora_stdmsg_line('Tabling regimes in various loaded modules:'),
	(flrregistry:flora_trailer_registry(Mod,FL_TABLING(Meth)),
	    flrregistry:flora_user_module_registry(Mod),
	    flora_stdmsg_line('    Module ~w: ~w',[Mod,Meth]),
	    flrwrapper:flora_module_predicate(WRAP_SUB,[_,_,_],Mod,SubPred),
	    flrwrapper:flora_module_predicate(WRAP_IMVD,[_,_,_,_],Mod,MvdPred),
	    flrwrapper:flora_module_predicate(WRAP_TABLED_HILOG,[_,_],Mod,Hilog2Pred),
	    flrwrapper:flora_module_predicate(WRAP_TABLED_HILOG,[_,_,_],Mod,Hilog3Pred),
	    flrwrapper:flora_module_predicate(WRAP_DIFFOBJEQL,[_,_,_],Mod,ObjeqlPred),
	    (SubPred -> true ; true),
	    tables:get_calls(SubPred,SubHandle,_),
	    tables:table_state(SubHandle,TablingSub,_,_),
	    flora_stdmsg_line('    ~w: ~w',[SubPred,TablingSub]),

	    (MvdPred -> true ; true),
	    tables:get_calls(MvdPred,MvdHandle,_),
	    tables:table_state(MvdHandle,TablingMvd,_,_),
	    flora_stdmsg_line('    ~w: ~w',[MvdPred,TablingMvd]),

	    (Hilog2Pred -> true ; true),
	    tables:get_calls(Hilog2Pred,Handle2,_),
	    tables:table_state(Handle2,Tabling2,_,_),
	    flora_stdmsg_line('    ~w: ~w',[Hilog2Pred,Tabling2]),

	    (Hilog3Pred -> true ; true),
	    tables:get_calls(Hilog3Pred,Handle3,_),
	    tables:table_state(Handle3,Tabling3,_,_),
	    flora_stdmsg_line('    ~w: ~w',[Hilog3Pred,Tabling3]),

	    (ObjeqlPred -> true ; true),
	    tables:get_calls(ObjeqlPred,HandleEql,_),
	    tables:table_state(HandleEql,TablingEql,_,_),
	    flora_stdmsg_line('    ~w: ~w',[ObjeqlPred,TablingEql]),

	    fail
	;
	    abolish_all_tables
	).

%% Set FL_PERMAOPTION
'\\production'(Switch) :- 
        Switch \= on,
        Switch \= off,
	!,
	flora_stderr_nl,
	flora_error_line('invalid production mode: valid options are on/off'), 
	flora_stderr_nl,
	fail.
'\\production'(Switch) :- flrcompiler:set_production_mode(Switch).

