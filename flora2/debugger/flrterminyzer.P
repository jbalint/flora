/* File:		flrterminyzer.P
** 
** Author(s): Senlin Liang
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 2012-2013;
**      and Vulcan, Inc., 2012-2013.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**      http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**
*/

:- compiler_options([xpp_on]).

:- import append/3, 
	length/2, 
	member/2, 
	reverse/2, 
	ith/3
   from basics.
:- import last/2 from lists.
:- import variant/2 from subsumes.
:- import 
	path_sysop/2,
	path_sysop/3 
   from file_io.
:- import 
	%%flora_display_mode/1,
	flora_decode_oid_as_atom/2 
   from flrdecode. 

%% graph predicates
:- dynamic
	unfinished_node/2,			%% (Counter,Call)
	unfinished_edge/4,			%% (Counter,CallId,ParentId,RuleId)
	answerflow_node/1,			%% (UnfinishedCallId)
	answerflow_edge/1,			%% (UnfinishedEdgeId)
	node_num/2,					%% (Type,NodeNum); Type: unfinished or answerflow
	edge_num/2,					%% (Type,EdgeNum)
	answerflow_loop/1.

%% indexing graphs
:- index(unfinished_edge/4,[2+3,2+3+4]).

%% import log entries from usermod, where load_dyn loads facts 
:- import tc/3, na/3, ar/3, cmp/2 from usermod.

%% indexing logs 
:-  dynamic tc/3, na/3, ar/3, cmp/2.
:-  index(ar/3,[3]).

%% certain unwanted logs are skipped during preprocessing
:- dynamic hide_this_ctrace_pred/1.
:-  assert(hide_this_ctrace_pred(dtype_sub)),
	assert(hide_this_ctrace_pred(fllibmodobj_internal)),
	assert(hide_this_ctrace_pred(flora_canonic_wrapper_symbol)),
	assert(hide_this_ctrace_pred(flora_check_dynmod_type_consistency)),
	assert(hide_this_ctrace_pred(flora_fdb_storage_name)),
	assert(hide_this_ctrace_pred(flora_is_fdb_storage)),
	assert(hide_this_ctrace_pred(flora_storage_module)),
	assert(hide_this_ctrace_pred(floundered)),
	assert(hide_this_ctrace_pred(floundered_undefined)),
	assert(hide_this_ctrace_pred(module_name_syntax_internal)),
	assert(hide_this_ctrace_pred(negate_wrapper)),
	assert(hide_this_ctrace_pred(op_synonym)).

%% Flora terminator_sym is '.'.
%% Earlier we had SILK terminator_sym(';')
:- dynamic terminator_sym/1. 

%% preprocessed file names in the form of (Type,Filename)
:- dynamic processed_logfiles/2.

:- export terminyzer/2.

%% check whether a trace should be hidden
hide_this_ctrace([]).
hide_this_ctrace([H|T]) :-
	functor(H,Pred,_),
	(hide_this_pred(Pred) -> fail
	; 
		hide_this_ctrace(T)
	).

hide_this_pred(P) :- hide_this_ctrace_pred(P), !.
hide_this_pred(P) :-
	str_length(P,PLen),
	(	%% _$_$_flora'mod'Module'candidate and _$_$_flora'mod'Module'strict_candidate	
		CandidateStart is PLen-9,
		substring(P,CandidateStart,PLen,Candidate),
		Candidate == 'candidate'
	;
		%% _$_$_flora'mod'Module'tabled_unnumber_call
		Tabled_unnumber_callStart is PLen-20,
		substring(P,Tabled_unnumber_callStart,PLen,Tabled_unnumber_call),
		Tabled_unnumber_call == 'tabled_unnumber_call'
	).

preprocess(LogFile) :-
	path_sysop(basename,LogFile,BaseFile),
	atom_concat(BaseFile,'_callcmp.P',CallCmpFile),
	atom_concat(BaseFile,'_ar.P',ARFile),
	atom_concat(BaseFile,'_na.P',NAFile),
	assert(processed_logfiles(callcmp,CallCmpFile)),
	assert(processed_logfiles(ar,ARFile)),
	assert(processed_logfiles(na,NAFile)),
	open(CallCmpFile,write,CCS),
	open(ARFile,write,ARS),
	open(NAFile,write,NAS),
	see(LogFile),
	preprocess(CCS,ARS,NAS),
	seen,
	close(CCS),
	close(ARS),
	close(NAS),
	writeln_list(['Preprocessing logforest file: ',LogFile]),
	writeln_list(['  Call-completion logs are written to file: ',CallCmpFile]),
	writeln_list(['  Answer-return-to-consumer logs are written to file: ',ARFile]),
	writeln_list(['  New-answer logs are written to file: ',NAFile]).

%% preprocess the log file
preprocess(CCS,ARS,NAS) :-
	repeat,
	read(Term),
	%% stop processing when see a _halt or error or throw or end_of_file
	((Term == end_of_file ; 
		Term = throw(_Error,_S,_Counter) ;
		Term = err(_S,_Counter)), !
	;
		((Term = tc(S1,S2,Stage,Counter); Term = nc(S1,S2,Stage,Counter)) -> 
			member(Stage,[new,incmp]),
			hide_this_ctrace([S1,S2]),
			write_canonical(CCS,tc(S1,S2,Counter)), writeln(CCS,'.')
		; (Term = na(A,S,Counter); Term = nda(A,S,_D,Counter)) -> 
			hide_this_ctrace([A,S]),
			write_canonical(NAS,na(A,S,Counter)), writeln(NAS,'.')
		; (Term = ar(A,S,ST,Counter); Term = dar(A,S,ST,Counter)) ->
			hide_this_ctrace([A,S,ST]),
			write_canonical(ARS,ar(S,ST,Counter)), writeln(ARS,'.')
		; Term = cmp(S,_SCCNum,Counter) -> 
			hide_this_ctrace([S]),
			write_canonical(CCS,cmp(S,Counter)), writeln(CCS,'.')
		; true
		),
	    fail
	),
	!.
preprocess(_,_,_).

%% auxiliary predicates
xsb_abort(L) :- writeln_list(L), halt.

writeln_list(L) :- current_output(S), writeln_list(L,S). 
writeln_list([],S) :- nl(S).
writeln_list([H|T],S) :- write(S,H), writeln_list(T,S).

%% graph construction
build_graph(_Type,[]).
%% unfinished call graph
build_graph(unfinished,[(_Id,Goal,_Parent)|T]) :- 
	%% when variant tabling is used, it is not correct to use unification
	%% For instance, the following sequence of logs
	%% tc(a(X)), where a(X) will not terminate
	%% tc(a(f(1))), which terminates
	%% cmp(a(f(1))), which will complete both a(X) and a(f(1))
	%% cmp(Goal,_,_),
	%% The following is a correct implementation, but is 10 times slower!
	cmp(GoalVariant,_),
	variant(Goal,GoalVariant),
	!,
	build_graph(unfinished,T).
build_graph(unfinished,[(_Id,Goal,Parent)|T]) :-
	%% check whether they are decodable
	decode_call(Parent,_,_,_), 
	decode_call(Goal,_,_,_),
	!,
	%% Parent has to be added before Goal
	add_node(Parent,ParentId),
	add_node(Goal,GoalId),
	decode_call(GoalId,_,_,Rule),
	add_edge(GoalId,ParentId,Rule),
	build_graph(unfinished,T).
build_graph(unfinished,[_H|T]) :- build_graph(unfinished,T).

%% answer flow graph
build_graph(answerflow,[(Goal-Parent)|T]) :-
	%% get the node ids in unfinished call graph
	unfinished_node(GoalId,GoalVariant),
	variant(Goal,GoalVariant),
	unfinished_node(ParentId,ParentVariant),
	variant(Parent,ParentVariant),
	!,
	%% add nodes
	(answerflow_node(GoalId) -> true ; assert(answerflow_node(GoalId))),
	(answerflow_node(ParentId) -> true ; assert(answerflow_node(ParentId))),
	%% get the edge id in the unfinished call graph
	unfinished_edge(EdgeId,GoalId,ParentId,_Rule),
	(answerflow_edge(EdgeId) -> true ; assert(answerflow_edge(EdgeId))),
	build_graph(answerflow,T).
build_graph(answerflow,[(Goal-Parent)|_]) :-
	flora_decode_oid_as_atom(Goal,GoalFlora),
	flora_decode_oid_as_atom(Parent,ParentFlora),
	xsb_abort(['Error in building answer flow graph: unrecognized goal-parent detected\n',
		       'Goal: ',GoalFlora, '\nParent: ', ParentFlora]).

add_node(Node,NodeId) :- 
	unfinished_node(NodeId,NodeVariant),
	variant(Node,NodeVariant),
	!.
add_node(Node,NodeId) :-
	node_num(unfinished,NodeNum),
	NodeId is NodeNum+1,
	retract(node_num(unfinished,_)),
	assert(node_num(unfinished,NodeId)),
	assert(unfinished_node(NodeId,Node)).

add_edge(ProducerId,ConsumerId,Rule) :-
	unfinished_edge(_EdgeId,ProducerId,ConsumerId,Rule),
	!.
add_edge(ProducerId,ConsumerId,Rule) :-
	edge_num(unfinished,EdgeNum),
	EdgeId is EdgeNum+1,
	retract(edge_num(unfinished,_)),
	assert(edge_num(unfinished,EdgeId)),
	assert(unfinished_edge(EdgeId,ProducerId,ConsumerId,Rule)).

build_loop([],[]).
build_loop([(_Producer-Consumer)|T],[ConsumerId|LoopNodes]) :-
	build_loop(T,LoopNodes),
	unfinished_node(ConsumerId,ConsumerVariant),
	variant(Consumer,ConsumerVariant).

%% Type: unfinished or answerflow
%% Format: text or flora
print_graph(Type,Format) :- current_output(S), print_graph(Type,Format,S).
print_graph(unfinished,Format,S) :-
	terminator_sym(TerminatorSym),
	(Format == text ->
		writeln(S,'----Unfinished-call analysis summary----'),
		processed_logfiles(callcmp,CallCmpFile),
		writeln_list(['Unfinished-call analysis logfile: ',CallCmpFile,'\n']), 
		writeln(S,'Unfinished subgoals have the format unfinished_subgoal(SubgoalId)[subgoal->Subgoal,ruleid->RuleId]')
	; Format == flora ->
		writeln(S,'// ----Unfinished-call analysis summary----'),
		writeln(S,'// Unfinished subgoals have the format unfinished_subgoal(SubgoalId)[subgoal->Subgoal,ruleid->RuleId]')
	),
	findall(Id,unfinished_node(Id,_Call),Ids0),
	sort(Ids0,Ids),
	print_nodes(unfinished,Ids,Format,S,TerminatorSym),
	node_num(unfinished,NodesNum),
	(Format == text -> 
	    writeln_list(['The number of unfinished subgoals: ',NodesNum,'\n'],S),
	    writeln(S,'Unfinished subgoal relationships have the format unfinished_call(CallId)[parent->ParentSubgoalId, child->ChildSubgoalId, ruleid->RuleId]')
	; Format == flora -> 
	    writeln(S,'// The number of unfinished subgoals'),
	    writeln_list([number_of_subgoals(unfinished,NodesNum),TerminatorSym,'\n'],S),
	    writeln(S,'// Unfinished subgoal relationships have the format unfinished_call(CallId)[parent->ParentSubgoalId, child->ChildSubgoalId, ruleid->RuleId]')
	),
	findall((Id,ProducerId,ConsumerId,RuleId),
		unfinished_edge(Id,ProducerId,ConsumerId,RuleId),
		Edges0),
	sort(Edges0,Edges),
	print_edges(unfinished,Edges,Format,S,TerminatorSym),
	edge_num(unfinished,EdgesNum),
	(Format == text -> 
	    writeln_list(['The number of unfinished calls: ',EdgesNum],S)
	; Format == flora ->
	    writeln(S,'// The number of unfinished calls'),
	    writeln_list([number_of_calls(unfinished,EdgesNum),TerminatorSym],S)
	).
print_graph(answerflow,Format,S) :-
	terminator_sym(TerminatorSym),
	findall(Id,answerflow_node(Id),NodeIds0),
	sort(NodeIds0,NodeIds),
	node_num(answerflow,NodesNum),
	findall(Id,answerflow_edge(Id),EdgeIds0),
	sort(EdgeIds0,EdgeIds),
	edge_num(answerflow,EdgesNum),
	answerflow_loop(LoopNodes),
	length(LoopNodes,LoopSize),
	(Format == text ->
	    writeln(S,'----Answer-flow analysis summary----'),
		processed_logfiles(ar,ARFile),
		writeln_list(['Answer-flow analysis logfile: ',ARFile,'\n']), 
	    writeln(S,'Answer-flow subgoals and their relationships have the format answerflow[subgoals->SubgoalIds, calls->CallIds, loop->LoopIds]'),
		writeln(S,'Subgoal and call ids used here are the involved unfinished subgoal and call ids'),
		writeln_list(['  answerflow[subgoals->',NodeIds,', calls->',EdgeIds, ', loop->',LoopNodes,']'],S),
		writeln_list(['The number of answerflow subgoals: ',NodesNum],S),
		writeln_list(['The number of answerflow calls: ',EdgesNum],S),
		writeln_list(['The size of answerflow loop: ',LoopSize],S)
	; Format == flora ->
	    writeln(S,'// ----Answer-flow analysis summary----'),
	    writeln(S,'// Answer-flow subgoals and their relationships have the format answerflow[subgoals->SubgoalIds, calls->CallIds, loop->LoopIds]'),
		writeln(S,'// Subgoal and call ids used here are the involved unfinished subgoal and call ids'),
		writeln_list(['answerflow[subgoals->',NodeIds,', calls->',EdgeIds, ', (loop)->',LoopNodes,']',TerminatorSym],S),
		writeln(S,'// The number of answerflow subgoals'),
	    writeln_list([number_of_subgoals(answerflow,NodesNum),TerminatorSym],S),
		writeln(S,'// The number of answerflow calls'),
	    writeln_list([number_of_calls(answerflow,EdgesNum),TerminatorSym],S),
		writeln(S,'// The size of answerflow loop'),
	    writeln_list([number_of_subgoals(answerflowloop,LoopSize),TerminatorSym],S)
	).

%% Decode XSB-call into Flora format and get pred and ruleid 
decode_call(Id,CallFlora,PredFlora,RuleFlora) :-
	integer(Id),
	!,
	unfinished_node(Id,Call),
	decode_call(Call,CallFlora,PredFlora,RuleFlora).
decode_call(Call,CallFlora,PredFlora,RuleFlora) :-
	(Call =.. [_Wrapper,Pred|CallFlatten], !; Pred = Call),
	last(CallFlatten,[_,tracing(_,Rule)]),
	flora_decode_oid_as_atom(Call,CallFlora),
	flora_decode_oid_as_atom(Pred,PredFlora),
	flora_decode_oid_as_atom(Rule,RuleFlora).

print_nodes(_Type,[],_Format,_S,_TerminatorSym). 
print_nodes(unfinished,[Id|T],Format,S,TerminatorSym) :-
	decode_call(Id,CallFlora,_Pred,Rule),
	(Format == text -> 
	    writeln_list(['  unfinished_subgoal(',Id,')[subgoal->',CallFlora,', ruleid->',Rule,']'],S)
	; Format == flora ->
	    writeln_list(['unfinished_subgoal(',Id,')[subgoal->',CallFlora,', ruleid->',Rule,']',TerminatorSym],S)
	),
	print_nodes(unfinished,T,Format,S,TerminatorSym).

print_edges(_Type,[],_Format,_S,_TerminatorSym).
print_edges(unfinished,[(Id,Producer,Consumer,RuleId)|T],Format,S,TerminatorSym) :-
	(Format == text ->
	    writeln_list(['  unfinished_call(',Id,')[parent->',Consumer,', child->',Producer,', ruleid->',RuleId,']'],S)
	; Format == flora ->
	    writeln_list(['unfinished_call(',Id,')[parent->',Consumer,', child->',Producer,', ruleid->',RuleId,']',TerminatorSym],S)
	),
	print_edges(unfinished,T,Format,S,TerminatorSym).

print_loop_call(PatternLen,LastNonLoopId,Format) :-
	current_output(S),
	print_loop_call(PatternLen,LastNonLoopId,Format,S).
print_loop_call(0,_LastNonLoopId,Format,S) :- 
	(Format == text ->
	    writeln(S,'----Loop-call analysis summary: no infinite call loop detected----')
	; Format == flora ->
	    writeln(S,'// Loop-call analysis summary: no infinite call loop detected')
	),
	!.
print_loop_call(PatternLen,LastNonLoopId,Format,S) :-
	terminator_sym(TerminatorSym),
	LoopStartNodeId is LastNonLoopId+1,
	LoopEndNodeId is LastNonLoopId+PatternLen,
	numlist(LoopStartNodeId,LoopEndNodeId,IdListLoop),
	(Format == text ->
		writeln(S,'----Loop-call analysis summary: infinite call loop detected----'),
		writeln(S,'Loop subgoals have the format of call_loop[subgoals->UnfinishedSubgoalIds]'),
		writeln_list(['  call_loop[subgoals->',IdListLoop,']'],S),
		writeln_list(['The size of call_loop: ',PatternLen],S)
	; Format == flora ->
		writeln(S,'// Loop-call analysis summary: infinite call loop detected----'),
		writeln(S,'// Loop subgoals have the format of call_loop[subgoals->UnfinishedSubgoalIds]'),
		writeln_list(['call_loop[subgoals->',IdListLoop,']',TerminatorSym],S),
		writeln(S,'// The size of call loop'),
	    writeln_list([number_of_subgoals(callloop,PatternLen),TerminatorSym],S)
	).

numlist(Low,High,[]) :- Low > High, !.
numlist(Low,High,[Low|List]) :- Low1 is Low+1, numlist(Low1,High,List).

collect_call_ruleid(Id,MaxId,[]) :- Id > MaxId, !.
collect_call_ruleid(Id,MaxId,[Pred-Rule|CallRuleT]) :- 
	Id1 is Id+1,
	collect_call_ruleid(Id1,MaxId,CallRuleT),
	decode_call(Id,_CallFlora,Pred,Rule).

loop_call(OptimalLength,FloraFile) :-
	node_num(unfinished,IdLen),
	collect_call_ruleid(1,IdLen,CallRules),
	MaxPatternLen is IdLen/2,
	numlist(1,IdLen,Ids),
	(patterns(CallRules,Ids,1,MaxPatternLen,Patterns,Lengths,Times,Borders),
	    optimal_pattern(Lengths,Times,OptimalLength,_OptimalTime),	
	    ith(OptimalIdx,Lengths,OptimalLength),
	    ith(OptimalIdx,Patterns,OptimalPattern),
	    ith(OptimalIdx,Borders,OptimalBorders),
	    OptimalBorders = [B0|_],
	    roll_back(OptimalPattern,B0,LastNonLoopNodeId),
	    !
	;
		OptimalLength is 0,
	    LastNonLoopNodeId is 0
	),
	print_loop_call(OptimalLength,LastNonLoopNodeId,text), nl,
	open(file(FloraFile),append,OutputFlora),
	print_loop_call(OptimalLength,LastNonLoopNodeId,flora,OutputFlora), nl(OutputFlora),
	close(OutputFlora).

roll_back(_FinalPattern,LastId,LastId) :- !.
roll_back(OptimalPattern,B0,LastId) :-
	decode_call(B0,_CallFlora,Pred,Rule),
	last(OptimalPattern,PredVariant-RuleVariant),
	variant(Pred,PredVariant),
	variant(Rule,RuleVariant),
	!,
	append(PatternPrefix,[_],OptimalPattern),
	B1 is B0 - 1,
	roll_back([Pred-Rule|PatternPrefix],B1,LastId).

unfinished_call(LogFile,FloraFile) :-
	ensure_loaded(LogFile,dynca),
	%% initialize unfinished call graph
	assert(unfinished_node(1,null)),
	assert(node_num(unfinished,1)),
	assert(edge_num(unfinished,0)),
	%% build unfinished call graph
	findall((Id,Goal,Parent),tc(Goal,Parent,Id),Triples),
	sort(Triples,TriplesSorted),
	build_graph(unfinished,TriplesSorted),
	%% terminated evaluation
	node_num(unfinished,NodeNum),
	NodeNum > 1,
	%% print out analysis summary
	print_graph(unfinished,text), nl,
	%% write summary to file
	%% write to Flora loadable format
	open(file(FloraFile),append,OutputFlora),
	print_graph(unfinished,flora,OutputFlora), nl(OutputFlora),
	flush_output(OutputFlora), 
	close(OutputFlora), 
	!.
unfinished_call(LogFile,FloraFile) :-
	writeln_list(['Unfinished-call analysis logfile: ',LogFile]), nl,
	writeln('No unfinished-call detected. Evaluation terminated'), nl,
	open(file(FloraFile),append,OutputFlora),
	writeln(OutputFlora,'// No unfinished-call detected. Evaluation terminated'), nl(OutputFlora),
	close(OutputFlora).
	
answer_flow(LogFile,FloraFile) :-
	ensure_loaded(LogFile,dynca),
	findall(Id,ar(_Goal,_Parent,Id),Ids0),
	(Ids0 = [] -> fail ; true),
	sort(Ids0,Ids),
	producer_consumer_seq(Ids,PCSeq,PCSeqIds),
	(PCSeq = [_H] ->
	    OptimalPattern = PCSeq,
	    OptimalLength is 1,
	    length(Ids,OptimalTime),
	    OptimalBorders = Ids
	;
	    length(PCSeq,PCSeqLen),
	    MaxPatternLen is PCSeqLen/2,
	    patterns(PCSeq,PCSeqIds,1,MaxPatternLen,Patterns,Lengths,Times,Borders),
	    optimal_pattern(Lengths,Times,OptimalLength,OptimalTime),
	    ith(OptimalIdx,Lengths,OptimalLength),
	    ith(OptimalIdx,Patterns,OptimalPattern),
	    ith(OptimalIdx,Borders,OptimalBorders)
	),
	%% build answerflow graph
	build_graph(answerflow,OptimalPattern),
	findall(NodeId,answerflow_node(NodeId),NodeIds),
	length(NodeIds,NumOfNodes),
	assert(node_num(answerflow,NumOfNodes)),
	findall(EdgeId,answerflow_edge(EdgeId),EdgeIds),
	length(EdgeIds,NumOfEdges),
	assert(edge_num(answerflow,NumOfEdges)),
	%% find troubling loops
	build_loop(OptimalPattern,LoopNodesT),
	OptimalPattern = [(Producer-_)|_],
	unfinished_node(ProducerId,ProducerVariant),
	variant(Producer,ProducerVariant),
	LoopNodes = [ProducerId|LoopNodesT],
	assert(answerflow_loop(LoopNodes)),
	%% print out answer flow summary
	print_graph(answerflow,text), nl,
	%% print out answer flow summary to file
	open(file(FloraFile),append,OutputFlora),
	print_graph(answerflow,flora,OutputFlora), nl(OutputFlora),
	flush_output(OutputFlora),
	close(OutputFlora), 
	!.
answer_flow(LogFile,FloraFile) :-
	writeln_list(['Answer-flow analysis logfile: ',LogFile]), nl,
	writeln('No infinitely many answers generation pattern detected'), nl,
	open(file(FloraFile),append,OutputFlora),
	writeln(OutputFlora,'// No infinitely many answers generation pattern detected'), nl(OutputFlora),
	close(OutputFlora).

producer_consumer_seq([],[],[]).
producer_consumer_seq([H|T],PCSeq,PCSeqIds) :-
	producer_consumer_seq(T,PCSeqT,PCSeqIdsT),
	ar(Goal,Parent,H),
	((PCSeqT = [GoalV-ParentV|_], variant(Goal,GoalV), variant(Parent,ParentV)) ->
	    PCSeq = PCSeqT,
	    PCSeqIds = PCSeqIdsT
	;
	    PCSeq = [Goal-Parent|PCSeqT],
	    PCSeqIds = [H|PCSeqIdsT]
	).

%% find the patterns and their repeated times
%% borders the list of id's of its last element
patterns(_PCSeq,_Ids,Len,MaxLen,[],[],[],[]) :- Len > MaxLen, !.
patterns(PCSeq,Ids,Len,MaxLen,Patterns,Lengths,Times,Borders) :- 
	LenN is Len+1,
	patterns(PCSeq,Ids,LenN,MaxLen,PatternsN,LengthsN,TimesN,BordersN),
	length(Pattern,Len),
	append(PCSeqPrefix,Pattern,PCSeq),
	one_pattern(PCSeqPrefix,Pattern,Ids,Len,Time,BorderR),
	reverse(BorderR,Border),
	(Time > 1 ->
	    Patterns = [Pattern|PatternsN],
	    Lengths = [Len|LengthsN],
	    Times = [Time|TimesN],
	    Borders = [Border|BordersN]
	;
	    Patterns = PatternsN,
	    Lengths = LengthsN,
	    Times = TimesN,
	    Borders = BordersN
	).

one_pattern(PCSeq,Pattern,Ids,Len,Time,Border) :-
	(append(PCSeqPrefix,Pattern,PCSeq) ->
	    length(TmpB,Len),
	    append(IdsPrefix,TmpB,Ids),
	    one_pattern(PCSeqPrefix,Pattern,IdsPrefix,Len,TimePrefix,BorderPrefix),
	    Time is TimePrefix+1,
	    last(Ids,LastId),
	    Border = [LastId|BorderPrefix]
	;
	    Time is 1,
	    %% in case all are repeated, so the starting point is 0
	    (last(Ids,LastId) -> true ; LastId is 0),
	    Border = [LastId]
	).

%% length*times should be maximized
%% if two patterns have same length*times, choose the one with smaller length
optimal_pattern([Length],[Time],Length,Time). 
optimal_pattern([LengthsH|LengthsT],[TimesH|TimesT],OptimalLength,OptimalTime) :-
	optimal_pattern(LengthsT,TimesT,OptimalLengthT,OptimalTimeT),
	((LengthsH * TimesH < OptimalLengthT * OptimalTimeT ;
	  (LengthsH * TimesH =:= OptimalLengthT * OptimalTimeT, 
	      LengthsH > OptimalLengthT)
	 ) -> 
	    OptimalLength is OptimalLengthT,
	    OptimalTime is OptimalTimeT
	;
	    OptimalLength is LengthsH,
	    OptimalTime is TimesH
	).

terminyzer(LogFile,FloraFile) :-
	clear_graph_data,
	%% preprocess logfile 
	preprocess(LogFile),
	path_sysop(basename,LogFile,BaseFile),
	atom_concat(BaseFile,'_callcmp.P',CallCmpFile),
	atom_concat(BaseFile,'_ar.P',ARFile),
	/*
	%% check whether in silk syntax
	(flora_display_mode(silk) -> 
		assert(terminator_sym(';')),
		TerminatorSym = ';'
	; 
		assert(terminator_sym('.')),
		TerminatorSym = '.'
	),
	*/
	assert(terminator_sym('.')),
	TerminatorSym = '.',
	%% print out LogFile name
	open(file(FloraFile),write,OutputFlora),
	writeln(OutputFlora,'// logforest trace filename'),
	writeln_list(['logfile(''',LogFile,''')',TerminatorSym],OutputFlora), nl(OutputFlora),
	close(OutputFlora),
	%% unfinished-call analysis
	unfinished_call(CallCmpFile,FloraFile),
	%% checking whether a terminating evaluation
	node_num(unfinished,NodeNum),
	%% perform infinitely nested call analysis
	(NodeNum == 1 -> true
	; 
		%% loop-call analysis to find increasingly deeper subgoals
	    loop_call(PatternLen,FloraFile),
	    %% answer-flow analysis
	    (PatternLen > 0 -> true; answer_flow(ARFile,FloraFile))
	),
	%% printout summary files
	writeln_list(['Terminyzer analysis summary is written to Flora-2 file: ',FloraFile]), nl,
	%% delete temp logfiles
	writeln_list(['Deleting temporary logfiles:']),
	path_sysop(rm,CallCmpFile),
	writeln_list(['  ',CallCmpFile,' deleted']),
	path_sysop(rm,ARFile),
	writeln_list(['  ',ARFile,' deleted']),
	processed_logfiles(na,NAFile),
	path_sysop(rm,NAFile),
	writeln_list(['  ',NAFile,' deleted\n']).

clear_graph_data :-
	retractall(unfinished_node(_,_)),
	retractall(unfinished_edge(_,_,_,_)),
	retractall(answerflow_node(_)),	
	retractall(answerflow_edge(_)),	
	retractall(node_num(_,_)),
	retractall(edge_num(_,_)),
	retractall(answerflow_loop(_)).
