/* File:      flrbasetype.flr
**
** Author(s): Michael Kifer
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2013.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**      http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**
*/

:- nontabled_module.

:- prolog{class_type_error/2}.

#include "flora_terms.flh"

:- suppress_rule_signatures.
:- export{
        ?[toSymbol->?],
        ?[rawValue->?],
        ?[typeName->?],
        ?[equals(?)],
        ?[isTypeOf(?)],
        ?[lessThan(?)],
        ?[add(?) -> ?],
	// non-strict convert to type: fail for args of wrong types
        ?[toType(?)->?],                   // all types
        ?[toType(?,?,?,?,?,?)->?],         // \time/6 
        ?[toType(?,?,?,?,?,?,?)->?],       // \date/7, \uri/7, \duration/7
        ?[toType(?,?,?,?,?,?,?,?,?,?)->?], // \dateTime/10

	?[hour->?],
	?[minute->?],
	?[second->?],
	?[dateSign->?],
	?[year->?],
	?[month->?],
	?[day->?],
	?[zoneSign->?],
	?[zoneHour->?],
	?[zoneMinute->?]}.

:- ignore_depchk{abort(?)@\system}.
:- ignore_depchk{?[mustDefine(?)]@\sys, ?[mustDefine(?,?)]@\sys}.


?D[?M->?] :-
	\isvar(?M),
	!,
	abort(['Attempt to apply an unbound method ', ?M,
	       ' to a basic data type object ', ?D])@\sys.
?D[?_M->?] :-
	\isvar(?D),
	!,
	\false.
	//abort(['Attempt to apply method ', ?M,
	//       ' to an unbound basic data type object ', ?D])@\sys.

// time
?D^^\time[hour->?V] :- hour(?D,?V)@\prolog(flrdatatype), !.
?D^^\time[minute->?V] :- minute(?D,?V)@\prolog(flrdatatype), !.
?D^^\time[second->?V] :- second(?D,?V)@\prolog(flrdatatype), !.
?D^^\time[zoneSign->?V] :- zoneSign(?D,?V)@\prolog(flrdatatype), !.
?D^^\time[zoneHour->?V] :- zoneHour(?D,?V)@\prolog(flrdatatype), !.
?D^^\time[zoneMinute->?V] :- zoneMinute(?D,?V)@\prolog(flrdatatype), !.
?D^^\time[lessThan(?D2^^\time)] :-
	flora_type_numeric_value(?D,?V)@\prolog(flrdatatype),
	flora_type_numeric_value(?D2,?V2)@\prolog(flrdatatype),
	?V @< ?V2.

// date
?D^^\date[dateSign->?V] :- datesign(?D,?V)@\prolog(flrdatatype), !.
?D^^\date[year->?V] :- year(?D,?V)@\prolog(flrdatatype), !.
?D^^\date[month->?V] :- month(?D,?V)@\prolog(flrdatatype), !.
?D^^\date[day->?V] :- day(?D,?V)@\prolog(flrdatatype), !.
?D^^\date[zoneSign->?V] :- zoneSign(?D,?V)@\prolog(flrdatatype), !.
?D^^\date[zoneHour->?V] :- zoneHour(?D,?V)@\prolog(flrdatatype), !.
?D^^\date[zoneMinute->?V] :- zoneMinute(?D,?V)@\prolog(flrdatatype), !.
?D^^\date[lessThan(?D2^^\date)] :-
	flora_type_numeric_value(?D,?V)@\prolog(flrdatatype),
	flora_type_numeric_value(?D2,?V2)@\prolog(flrdatatype),
	?V @< ?V2.

// dateTime
?D^^\dateTime[hour->?V] :- hour(?D,?V)@\prolog(flrdatatype), !.
?D^^\dateTime[minute->?V] :- minute(?D,?V)@\prolog(flrdatatype), !.
?D^^\dateTime[second->?V] :- second(?D,?V)@\prolog(flrdatatype), !.
?D^^\dateTime[dateSign->?V] :- datesign(?D,?V)@\prolog(flrdatatype), !.
?D^^\dateTime[year->?V] :- year(?D,?V)@\prolog(flrdatatype), !.
?D^^\dateTime[month->?V] :- month(?D,?V)@\prolog(flrdatatype), !.
?D^^\dateTime[day->?V] :- day(?D,?V)@\prolog(flrdatatype), !.
?D^^\dateTime[zoneSign->?V] :- zoneSign(?D,?V)@\prolog(flrdatatype), !.
?D^^\dateTime[zoneHour->?V] :- zoneHour(?D,?V)@\prolog(flrdatatype), !.
?D^^\dateTime[zoneMinute->?V] :- zoneMinute(?D,?V)@\prolog(flrdatatype), !.
?D^^\dateTime[lessThan(?D2^^\dateTime)] :-
	flora_type_numeric_value(?D,?V)@\prolog(flrdatatype),
	flora_type_numeric_value(?D2,?V2)@\prolog(flrdatatype),
	?V @< ?V2.


// \duration
?D^^\duration[hour->?V] :- hour(?D,?V)@\prolog(flrdatatype), !.
?D^^\duration[minute->?V] :- minute(?D,?V)@\prolog(flrdatatype), !.
?D^^\duration[second->?V] :- second(?D,?V)@\prolog(flrdatatype), !.
?D^^\duration[dateSign->?V] :- datesign(?D,?V)@\prolog(flrdatatype), !.
?D^^\duration[year->?V] :- year(?D,?V)@\prolog(flrdatatype), !.
?D^^\duration[month->?V] :- month(?D,?V)@\prolog(flrdatatype), !.
?D^^\duration[day->?V] :- day(?D,?V)@\prolog(flrdatatype), !.
?D^^\duration[lessThan(?D2^^\duration)] :-
	flora_type_numeric_value(?D,?V)@\prolog(flrdatatype),
	flora_type_numeric_value(?D2,?V2)@\prolog(flrdatatype),
	?V @< ?V2.

// numbers
?N[lessThan(?N2)] :- number(?N)@\prolog, number(?N2)@\prolog, ?N < ?N2.
?N[lessThan(?N2)] :-
	?N[rawValue->?V],
	?N2[rawValue->?V2],
	number(?V)@\prolog, number(?V2)@\prolog, ?V < ?V2.

// strings
?N[lessThan(?N2)] :- ?N:\string, ?N2:\string, ?N.rawValue @< ?N2.rawValue.

// symbols
?N[lessThan(?N2)] :- ?N : FL_SYMBOL, ?N2 : FL_SYMBOL, ?N.rawValue @< ?N2.rawValue.
// IRIs
?N[lessThan(?N2)] :- ?N : FL_IRI, ?N2 : FL_IRI, ?N.rawValue @< ?N2.rawValue.

?D[rawValue->?V] :- flora_datatype_raw_value(?D,?V)@\prolog(flrdatatype), !.
?D[typeName->?V] :- flora_datatype_name(?D,?V)@\prolog(flrdatatype), !.

?_D[equals(?_D)] :- !.

?T[isTypeOf(?V)] :- flora_datatype_name(?V,?T)@\prolog(flrdatatype), !.
// catch cases when class methods are applied to instances by mistake
?T[isTypeOf(?)] :- class_type_error(?T,'\\isTypeOf(?) -> ?').

// these are supposed to fail, if no error
?T[toType(?)->?] :- class_type_error(?T,'toType(?) -> ?').
?T[toType(?,?,?,?,?,?)->?] :-                                        // 6 args
	class_type_error(?T,'toType(?) -> ?').
?T[toType(?,?,?,?,?,?,?)->?] :-                                      // 7 args
	class_type_error(?T,'toType(?) -> ?').
?T[toType(?,?,?,?,?,?,?,?,?,?)->?] :-                                // 10 args
	class_type_error(?T,'toType(?) -> ?').


/*
?T[toType(?V)->?] :- 
	?V[typeName->?TN],
	?TN \== ?T,
	flora_decode_oid_as_atom(?T,?PrintableT)@\prolog(flrdecode),
	flora_decode_oid_as_atom(?V,?PrintableV)@\prolog(flrdecode),
	abort([?PrintableT,'[toType(',?PrintableV,')->?]: argument ',
	        ?PrintableV,' must be a literal of type ',?PrintableT])@\system.
*/


// The 1-argument version is for:
//      FL_LONG, FL_DOUBLE, FL_STRING, FL_CHARLIST, FL_BOOL
// Also for FL_DATE, FL_TIME, FL_URI, and FL_DATETIME, but we need to implement
// this in flrdatatype_parse.P
// These use the no-check versions of flora_make_datatype/3, which
// fail if argument is not convertible to the target data type
FL_SYMBOL[toType(?A)->?Obj] :- !, ?A[toSymbol->?Obj].
?T[toType(?A)->?Obj] :-
	?ParsedRepr =.. [?T,?A],
	// FL_STRING, FL_IRI
	flora_special_datatype_internal_representation(?ParsedRepr,?Obj)@\prolog(flrdatatype),
	!.
?T[toType(?A)->?Obj] :-
	?A[rawValue->?RA],
	flora_make_datatype(?T,(?RA),?Obj1)@\prolog(flrdatatype_parse),
	// special treatment for IRIs - hide their data type
	\if ?T == \iri \then ?Obj1[toSymbol->?Obj]
        \else ?Obj = ?Obj1.

// the 6-arg is for FL_TIME
?T[toType(?A1,?A2,?A3,?A4,?A5,?A6)->?Obj] :-
	flora_make_datatype(?T,(?A1,?A2,?A3,?A4,?A5,?A6),?Obj)@\prolog(flrdatatype_parse).
// the 7-arg is for FL_DATE, FL_TIME, FL_URI, FL_DURATION
?T[toType(?A1,?A2,?A3,?A4,?A5,?A6,?A7)->?Obj] :-
	flora_make_datatype(?T,(?A1,?A2,?A3,?A4,?A5,?A6,?A7),?Obj1)@\prolog(flrdatatype_parse),
	// special treatment for IRIs - hide their data type
	\if ?T == \iri \then ?Obj1[toSymbol->?Obj]
        \else ?Obj = ?Obj1.
// this 10-argument version is for FL_DATETIME
?T[toType(?A1,?A2,?A3,?A4,?A5,?A6,?A7,?A8,?A9,?A10)->?Obj] :-
	flora_make_datatype(?T,(?A1,?A2,?A3,?A4,?A5,?A6,?A7,?A8,?A9,?A10),?Obj)@\prolog(flrdatatype_parse).

// this is supposed to fail, if everything is right
// ?Typ must be a string data type or an atom?
class_type_error(?Typ,?Meth) :-
	flora_builtin_datatype(?BI)@\prolog(flrdatatype),
	\if (Method[mustDefine(?Mode)]@\sys, ?Mode==on)
	\then Method[mustDefine(off)]@\sys,
	\if (?Typ : ?BI, ?BI !== \string)
        \then Method[mustDefine(?Mode)]@\sys
        \else (Method[mustDefine(?Mode)]@\sys, \false),
	flora_decode_oid_as_atom(?Typ,?PrintableT)@\prolog(flrdecode),
	abort([?PrintableT, '[', ?Meth, ']: ',
	        ?PrintableT, ' must be a data type'])@\system.

// addition of types
?T[add(?T1) -> ?T2] :-
	(\isground(?T), \isground(?T1)
        -->> flora_dt_add(?T,?T1,?T2)@\prolog(flrdatatype)
        ; flora_decode_goal_as_atom_substitute_vars(${?T[add(?T1) -> ?T2]},?Code)@\plg(flrdecode),
	  flora_decode_goal_as_atom_substitute_vars(?T,?TCode)@\plg(flrdecode),
	  flora_decode_goal_as_atom_substitute_vars(?T1,?T1Code)@\plg(flrdecode),
	  abort(['In ', ?Code, ': ',
		  ?TCode, ' and ', ?T1Code, ' must be ground data types'])@\system
	).



// Included stuff
#include "flrbasetype_iri.flh"

#include "flrbasetype_signatures.flh"
#include "flrbasetype_double.flh"
#include "flrbasetype_string.flh"
#include "flrbasetype_symbol.flh"
#include "flrbasetype_list.flh"

