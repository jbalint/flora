/* File:      flrio.flr
**
** Author(s): Michael Kifer
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2013.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**      http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**
*/

:- nontabled_module.


#include "flora_terms.flh"

// The purpose of this library is to provide optimal conversion from
// HiLog to Prolog and back before passing the arguments to the I/O predicates.
// In addition, it passes the result through flora_write_oid/1 in order 
// to ensure that all the FLORA module info and encoding is stripped.
//
// This all is used for user-level output. For file I/O one should use
// @\prolog instead of @\io, i.e., use Prolog I/O primitives directly.

:- suppress_rule_signatures.
:- symbol_context{
        fmt_write(?,?),
	fmt_read(?,?,?),
        write_canonical(?)@?,
        read_canonical(?),
        readline(?,?)@?,
        writeln(?),
        write(?),
        read(?),
        readable(?),
        read(?)@?,
	nl(?)@?}.

/**************************
**   I/O port based ops
**************************/

:- export{
         ?_[open(?_,?_)],
	 ?_[close],
	 ?_[read(?_)],
	 ?_[write(?_)],
	 //stdread(?_),
	 //stdwrite(?_),
	 fmt_write(?_,?_),
	 ?_[fmt_write(?_,?_)],
	 fmt_write_string(?_,?_,?_),
	 fmt_read(?_,?_,?_),
	 ?_[fmt_read(?_,?_,?_)],
	 ?_[write_canonical(?_)],
	 write_canonical(?_),
	 read_canonical(?_),
	 ?_[read_canonical(?_)],
	 ?_[readline(?_,?_)],
	 readline(?_,?_),
	 read(?),
	 ?_[writeln(?_)],
	 write(?_),
	 writeln(?_),
	 nl,
	 nl(?_),
	 ?_[see],
	 see(?_),
	 seen,
	 ?_[seeing],
	 seeing(?_),
	 ?_[tell],
	 tell(?_),
	 told,
	 ?_[telling],
	 telling(?_),
	 // file ops
	 ?[exists(?)],
	 ?[readable(?)],
	 ?[writable(?)],
	 ?[executable(?)],
	 ?[modtime(?,?)],
	 ?[mkdir(?)],
	 ?[rmdir(?)],
	 ?[chdir(?)],
	 ?[cwd(?)],
	 ?[link(?,?)],
	 ?[unlink(?)],
	 ?[remove(?)],
	 ?[tmpfilename(?)],
	 ?[isabsolute(?)],
	 ?[rename(?,?)],
	 ?[basename(?,?)],
	 ?[extension(?,?)],
	 ?[expand(?,?)],
	 ?[newerthan(?,?)],
	 ?[dirname(?,?)],
	 ?[copy(?,?)]}.


?Filename[open(?Mode,?Port)] :-
	// ?Filename can be atom(...). Needs to be prologized
	p2h{?FilenameP,?Filename},
	isground{?FilenameP},
	open(?FilenameP,?Mode,?Port)@\plg.
?Port[close] :-
	isinteger{?Port},
	close(?Port)@\plg.

/*
stdread(?HResult) :-
	read(STDIN, ?PResult)@\plg, p2h{?PResult,?HResult}.
stdwrite(?Term) :-
	flora_write_oid(STDOUT,?Term)@\plg(flrdecode).
*/


// Use arg(obj, obj, obj) to supply multiple arguments
fmt_write(?Format,?O) :-
	!,
	florify_arguments(?O,?FO),
	fmt_write(?Format,?FO)@\plg.
?FileHandle[fmt_write(?Format,?O)] :-
	isinteger{?FileHandle},
	florify_arguments(?O,?FO),
	fmt_write(?FileHandle,?Format,?FO)@\plg().
fmt_write_string(?String,?Format,?O) :-
	!,
	florify_arguments(?O,?FO),
	fmt_write_string(?String,?Format,?FO)@\plg.
fmt_read(?Format,?Result,?Status) :-
	!,
	fmt_read(?Format,?PResult,?Status)@\plg(),
	p2h{?PResult,?Result}.
?FileHandle[fmt_read(?Format,?Result,?Status)] :-
	isinteger{?FileHandle},
	fmt_read(?FileHandle,?Format,?PResult,?Status)@\plg,
	p2h{?PResult,?Result}.

?FileHandle[write_canonical(?HTerm)] :-
	isinteger{?FileHandle},
	p2h{?PTerm,?HTerm},
	file_write_canonical(?FileHandle,?PTerm)@\plg(xsb_writ).
write_canonical(?HTerm) :-
	p2h{?PTerm,?HTerm}, write_canonical(?PTerm)@\plg().

read_canonical(?HTerm) :-
	read_canonical(?PTerm)@\plg, p2h{?PTerm,?HTerm}. 
?FileHandle[read_canonical(?HTerm)] :-
	isinteger{?FileHandle},
	file_read_canonical(?FileHandle,?PTerm,?_)@\plg(machine),
	p2h{?PTerm,?HTerm}. 
?FileHandle[readline(atom,?String)] :-
	isinteger{?FileHandle},
	!,
	file_read_line_atom(?FileHandle,?String)@\plg(file_io).
?FileHandle[readline(charlist,?String)] :-
	isinteger{?FileHandle},
	!,
	file_read_line_list(?FileHandle,?String)@\prolog(file_io).
?FileHandle[readline(?Request,?_)] :- 
	isinteger{?FileHandle},
	abort(['Invalid readline format, ', ?Request])@\sys.
readline(atom,?String) :-
	!, file_read_line_atom(?String)@\prolog(file_io).
readline(charlist,?String) :-
	!, file_read_line_list(?String)@\prolog(file_io).
readline(?Request,?_) :- 
	abort(['Invalid readline format, ', ?Request])@\sys.


/***********************
**  Stream-based I/O
***********************/

// we don't want these to quote atoms
write(?O) :-
	atomic(?O)@\prolog,
	\+ isiri{?O},
	\+ isstring{?O},
	\+ isskolem{?O},
	!,
	write(?O)@\prolog.
write(?O) :-
	!,
	change_module_if_needed(?O,?OM,\?C),
	flora_write_oid(?OM)@\plg(flrdecode).
writeln(?O) :-
	atomic(?O)@\prolog,
	\+ isiri{?O},
	\+ isstring{?O},
	\+ isskolem{?O},
	!,
	writeln(?O)@\prolog.
writeln(?O) :-
	!,
	change_module_if_needed(?O,?OM,\?C),
	flora_write_oid(?OM)@\plg(flrdecode),
	nl@\plg.

nl :- nl@\plg.
nl(?IOstream) :- nl(?IOstream)@\plg.

// these will quote atoms
?IOstream[write(?O)] :-
	isinteger{?IOstream},
	change_module_if_needed(?O,?OM,\?C),
	flora_write_oid(?IOstream,?OM)@\prolog(flrdecode).
?IOstream[writeln(?O)] :-
	isinteger{?IOstream},
	change_module_if_needed(?O,?OM,\?C),
	flora_write_oid(?IOstream,?OM)@\prolog(flrdecode),
	nl(?IOstream)@\prolog.

read(?Result) :- !, read(?PResult)@\prolog, p2h{?PResult,?Result}.
?IOstream[read(?Result)] :-
	isinteger{?IOstream},
	read(?IOstream,?PResult)@\prolog, p2h{?PResult,?Result}.

?Filename[see] :-
	isground{?Filename},
 	see(?Filename)@\plg.
see(?Filename) :-
	isground{?Filename},
  	see(?Filename)@\plg.
seen :- seen@\plg.
seeing(?Stream) :-
	(isinteger{?Stream} ; isvar{?Stream}),
	!,
	seeing(?Stream)@\plg().
?Stream[seeing] :-
	(isinteger{?Stream} ; isvar{?Stream}),
	!,
	seeing(?Stream)@\plg().

?Filename[tell] :-
	isground{?Filename},
	tell(?Filename)@\prolog.
tell(?Filename) :-
	isground{?Filename},
	tell(?Filename)@\prolog.
told :- told@\plg.
telling(?Stream) :-
	(isinteger{?Stream} ; isvar{?Stream}),
	!,
	telling(?Stream)@\plg().
?Stream[telling] :-
	(isinteger{?Stream} ; isvar{?Stream}),
	!,
	telling(?Stream)@\plg().



// UTILITIES

// This is used for fmt_write_* predicates. Takes a *prolog* term argument 
// of the form 
// arg(arg1,...,argn) and returns arg(arg1',..., argn'), where arg_i=arg_i'
// if arg_i is not compound. Otherwise we apply flora_write_oid/1
// This is needed in order make sure that arguments like f(a) are printed 
// as f(a) and not WRAP_HILOG(f,a) or something like that.
florify_arguments(?WrappedArgs,?OutTerm) :-
	?WrappedArgs =.. [hilog(?Fun) | ?Args],
	!,
	florify_arglist(?Args,?OutList),
	?OutTerm =.. [?Fun|?OutList].
// single argument to fmt_write without the arg(...) envelope
florify_arguments(?Arg,?OutTerm) :-
	(isiri{?Arg} ; isstring{?Arg} ; isskolem{?Arg}),
	!,
	flora_decode_oid_as_atom(?Arg,?OutTerm)@\prolog(flrdecode).
florify_arguments(?_Arg,?_Arg) :- \true.

florify_arglist([],[]) :- !.
florify_arglist([?Arg|?Args], [?OutArg| ?OutArgs]) :-
	(iscompound{?Arg} ; isiri{?Arg} ; isstring{?Arg} ; isskolem{?Arg}),
	!,
	flora_decode_oid_as_atom(?Arg,?OutArg)@\plg(flrdecode),
	florify_arglist(?Args,?OutArgs).
florify_arglist([?_Arg|?Args], [?_Arg| ?OutArgs]) :-
	florify_arglist(?Args,?OutArgs).


File[exists(?F)] :- flora_file_op(exists,?F)@\prolog(flrporting).
File[readable(?F)] :- flora_file_op(readable,?F)@\prolog(flrporting).
File[writable(?F)] :- flora_file_op(writable,?F)@\prolog(flrporting).
File[executable(?F)] :- flora_file_op(executable,?F)@\prolog(flrporting).
File[modtime(?F,?T)] :- flora_file_op(modtime,?F,?T)@\prolog(flrporting).
File[mkdir(?F)] :- flora_file_op(mkdir,?F)@\prolog(flrporting).
File[rmdir(?F)] :- flora_file_op(rmdir,?F)@\prolog(flrporting).
File[chdir(?F)] :- flora_file_op(chdir,?F)@\prolog(flrporting).
File[cwd(?F)] :- flora_file_op(cwd,?F)@\prolog(flrporting).
File[link(?F,?D)] :- flora_file_op(link,?F,?D)@\prolog(flrporting).
File[unlink(?F)] :- flora_file_op(unlink,?F)@\prolog(flrporting).
File[remove(?F)] :- flora_file_op(rm,?F)@\prolog(flrporting).
File[tmpfilename(?F)] :- flora_file_op(tmpfilename,?F)@\prolog(flrporting).
File[isabsolute(?F)] :- flora_file_op(isabsolute,?F)@\prolog(flrporting).
File[rename(?F,?To)] :- flora_file_op(rename,?F,?To)@\prolog(flrporting).
File[basename(?F,?Base)] :- flora_file_op(basename,?F,?Base)@\prolog(flrporting).
File[extension(?F,?Ext)] :- flora_file_op(extension,?F,?Ext)@\prolog(flrporting).
File[expand(?F,?Expanded)] :- flora_file_op(expand,?F,?Expanded)@\prolog(flrporting).
File[newerthan(?F,?F2)] :- flora_file_op(newerthan,?F,?F2)@\prolog(flrporting).
File[dirname(?F,?Dir)] :- flora_file_op(dirname,?F,?Dir)@\prolog(flrporting).
File[copy(?F,?To)] :- flora_file_op(copy,?F,?To)@\prolog(flrporting).


#include "include/change_module.flr"
