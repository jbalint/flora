/* File:      flrsynonym.P  -- Synonyms for some FLORA-2 operators and builtins
**
** Author(s): Michael Kifer
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2013.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**      http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**
*/



:- compiler_options([xpp_on]).
#include "flora_terms.flh"
#include "flora_tabling_methods.flh"

:- export flora_op_synonym/2,
	flora_builtin_synonym/2,
	flora_special_builtin_synonym/2.

base_op(FL_AND_CONNECTIVE). %% ,
base_op(FL_OR_CONNECTIVE).  %% ;
base_op(FL_MVDARROW).      %% ->
base_op(FL_INMVDARROW).    %% *->
base_op(FL_MVDSIGARROW).   %% =>
base_op(FL_INMVDSIGARR).   %% *=>
base_op(FL_ISA).           %% :
base_op(FL_SUB).           %% ::

base_op(FL_UNIVNOTEQ).     %% \=
base_op(FL_NOTEQ).         %% \==
base_op(FL_NOTUNIVEQFORM). %% \~
base_op(FL_PREFIXDEF).     %% iriprefix
base_op(FL_SILKNAF).       %% iriprefix
base_op(FL_NEG).           %% iriprefix

base_op(FL_IS_INTERNAL).   %% FLORA_PREFIX(arith_eval)
base_op(FL_MOD_INTERNAL).  %% FLORA_PREFIX(mod_operator)

base_op(FL_IF_INTERNAL).    %% FLORA_PREFIX(if_operator)
base_op(FL_THEN_INTERNAL).  %% FLORA_PREFIX(then_operator)
base_op(FL_ELSE_INTERNAL).  %% FLORA_PREFIX(else_operator)

base_op(FL_WHILE_INTERNAL).
base_op(FL_DO_INTERNAL).
base_op(FL_LOOP_INTERNAL).
base_op(FL_UNTIL_INTERNAL).
base_op(FL_UNLESS_INTERNAL).

base_op(FL_EXPORT_INTERNAL).
base_op(FL_PROLOG_INTERNAL).
base_op(FL_TABLE_INTERNAL).
base_op(FL_INDEX_INTERNAL).

base_op(FL_UDFIF_INTERNAL). %% if in UDFs
base_op(FL_UDFF_INTERNAL).  %% gunction in UDF


%% Operator synonyms - handled by the composer
%% DON'T synonymize quoted atoms: quoting synonyms is our escape mechanism!
:- table op_synonym/2 as AUXILIARY_TABLING_TYPE.
op_synonym(FL_AND,FL_AND_CONNECTIVE).
op_synonym(FL_OR,FL_OR_CONNECTIVE).
op_synonym(FL_HASVALUE,FL_MVDARROW).
op_synonym(FL_HASDEFAULTVALUE,FL_INMVDARROW).
op_synonym(FL_HASTYPE,FL_INMVDSIGARR).
op_synonym(FL_ISAWORD,FL_ISA).
op_synonym(FL_MEMBEROF,FL_ISA).
op_synonym(FL_SUBCLASSOF,FL_SUB).


%% This is now handled by Flora with delay
%%op_synonym(FL_C_UNEQUAL,FL_UNIVNOTEQ).

op_synonym(FL_C_NOTUNIVEQFORM,FL_NOTUNIVEQFORM).
op_synonym(FL_PREFIXDEF_SYNONYM,FL_PREFIXDEF).

%% this allows us to unreserve is/2 and mod/2
op_synonym(FL_IS,FL_IS_INTERNAL).
op_synonym(FL_MOD,FL_MOD_INTERNAL).

%% this unreserves control keywords such as IF, THEN, etc.
op_synonym(FL_IF,FL_IF_INTERNAL).
op_synonym(FL_THEN,FL_THEN_INTERNAL).
op_synonym(FL_ELSE,FL_ELSE_INTERNAL).

op_synonym(FL_WHILE,FL_WHILE_INTERNAL).
op_synonym(FL_DO,FL_DO_INTERNAL).
op_synonym(FL_LOOP,FL_LOOP_INTERNAL).
op_synonym(FL_UNTIL,FL_UNTIL_INTERNAL).
op_synonym(FL_UNLESS,FL_UNLESS_INTERNAL).

%% this unreserves keywords used in UDFs: function, if
op_synonym(FL_UDFIF,FL_UDFIF_INTERNAL).  %% UDF if
op_synonym(FL_UDFF,FL_UDFF_INTERNAL).    %% UDF function

op_synonym(FL_EXPORT,FL_EXPORT_INTERNAL).
op_synonym(FL_PROLOG,FL_PROLOG_INTERNAL).
op_synonym(FL_TABLE,FL_TABLE_INTERNAL).
op_synonym(FL_INDEX,FL_INDEX_INTERNAL).

op_synonym(X,Y) :- op_synonym(Y,X).
op_synonym(X,Y) :- op_synonym(X,Z), op_synonym(Z,Y).

flora_op_synonym(NewOP,OP) :-
	op_synonym(NewOP,OP), \+ base_op(NewOP), base_op(OP).


%% Builtin synonyms - handled by the lexer
builtin_synonym('_plg', FL_PLIB) :- !.
builtin_synonym('_prlg', FL_PLIB) :- !.
builtin_synonym('_plgall', FL_PLIBALL) :- !.
builtin_synonym('_prlgall', FL_PLIBALL) :- !.
builtin_synonym('_sys', FLSYSMODSYSTEM) :- !.
builtin_synonym('_db', FLSYSMODDATABASE) :- !.
builtin_synonym('_typeCheck', FLSYSMODTYPECHECK) :- !.
builtin_synonym('_eval', FLSYSMODEVAL) :- !.
builtin_synonym('_baseType', FLSYSMODBASETYPE) :- !.

builtin_synonym('_real', FL_DOUBLE) :- !.
builtin_synonym('_short', FL_LONG) :- !.

/*
builtin_synonym('_dt', FL_DATETIME) :- !.
builtin_synonym('_t',  FL_TIME) :- !.
builtin_synonym('_d',  FL_DATE) :- !.
builtin_synonym('_du',  FL_DURATION) :- !.
builtin_synonym('_int',  FL_LONG) :- !.
*/

flora_builtin_synonym(M,Canonic) :-
	%% atom
	builtin_synonym(M,Canonic),
	!.
flora_builtin_synonym(M,Canonic) :-
	%% char list
	is_charlist(M), % important: otherwise _prolog etc. will bomb on atom_codes
	atom_codes(Matm,M),
	builtin_synonym(Matm,CanonicAtm),
	atom_codes(CanonicAtm,Canonic),
	!.
flora_builtin_synonym(M,M).


%% Builtins of the form builtin{...}
special_builtin_synonym(btinsert, FL_BTINSERT) :- !.
special_builtin_synonym(btinsertall, FL_BTINSERTALL) :- !.
special_builtin_synonym(btdelete, FL_BTDELETE) :- !.
special_builtin_synonym(btdeleteall, FL_BTDELETEALL) :- !.
special_builtin_synonym(bterase, FL_BTERASE) :- !.
special_builtin_synonym(bteraseall, FL_BTERASEALL) :- !.
special_builtin_synonym(tinsert, FL_BTINSERT) :- !.
special_builtin_synonym(tinsertall, FL_BTINSERTALL) :- !.
special_builtin_synonym(tdelete, FL_BTDELETE) :- !.
special_builtin_synonym(tdeleteall, FL_BTDELETEALL) :- !.
special_builtin_synonym(terase, FL_BTERASE) :- !.
special_builtin_synonym(teraseall, FL_BTERASEALL) :- !.
special_builtin_synonym(undefined, unknown) :- !.

special_builtin_synonym(minimum, FL_MIN) :- !.
special_builtin_synonym(maximum, FL_MAX) :- !.
special_builtin_synonym(average, FL_AVG) :- !.
special_builtin_synonym(prolog2hilog, FL_P2H) :- !.

flora_special_builtin_synonym(M,Canonic) :-
	%% atom
	special_builtin_synonym(M,Canonic),
	!.
flora_special_builtin_synonym(M,M).

