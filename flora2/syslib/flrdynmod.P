/* File:      flrdynmod.P
**
** Author(s): Guizhen Yang 
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2013;
**      and Vulcan, Inc., 2008-2013.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**      http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"
#include "flora_porting.flh"
#include "flora_exceptions.flh"


:- import append/3 from basics.

:- import
	flora_check_module_name/1,
	flora_module_predicate/4,
	flora_decode_predicate/7,
	is_flora_callable_literal/1,
	negate_predicate/2
   from flrwrapper.

:- import
	flora_abort/1,
	flora_increment_counter/4
   from flrporting.

:- import 
        convert_to_body_literal/2,
        flora_check_dynmod_type_consistency/1,
        is_ws_distributive/3,
        is_caller_distributive/3,
        is_caller_distributive/4
    from flrcanon.

:- import FLLIBUNIVEQFORM/2 from usermod.

:- import
	flora_temp_protect_call/2,
	flora_temp_unprotect_call/1
    from flrundefined.

:- import
	flora_in_debug_mode/1,
	flora_debug_module_registry/1
   from flrregistry.

:- import
	flora_add_last/3,
	flora_replace_last/3,
	flora_bind_last/2
   from flrtrim.

:- import flora_add_undef_export_call/2,
	  flora_remove_undef_export_call/1
   from flrexport.

%% Tabling this INCREASES time, if FLLIBMODLIT/4 is also tabled
%%:- table get_libmod_callable/5.
%% Tabling this only increases time
%%:- table FLLIBMODLIT/4.
%% This table can save significant time when the number of metaops is large.
:- table fllibmodobj_internal/5 as opaque.

/*********************************************************************
  This file is for the following dynamic module references:
  FLLIBMODLIT and FLLIBMODOBJ.

  FLLIBMODLIT is used when the compiler encounters literal@Variable
  where literal is F-logic or HiLog
  FLLIBMODOBJ is used when compiler finds term@Variable inside a predicate,
  e.g., f(g@V)
*********************************************************************/


/*********************************************************************
  FLLIBMODLIT(+Functor,+Args,+ModuleName,+CallerInfo)
  Functor is either an F-logic/HiLog wrapper or FL_LIBMOD or FL_NEGLIBMOD
*********************************************************************/
FLLIBMODLIT(F,Arg,ModuleName,CallerInfo) :-
	%% If module is a variable, we must protect the call
	%% from undefinedness checks
	(var(ModuleName) -> ProtectCall = true ; true),
	(
          var(Arg) ->
            (ModuleName==FL_INVALIDMODULE ->
	        flora_abort([Arg,': Attempt to call uninstantiated literal'])
            ;
	        flora_abort([Arg,'@',ModuleName,': Attempt to call uninstantiated literal'])
            )

        ; Arg=FL_TRANSACTIONAL(NA), var(NA) ->
            (ModuleName==FL_INVALIDMODULE ->
	        flora_abort([CH_PERCENT,NA,': Attempt to call uninstantiated literal'])
            ;
	        flora_abort([CH_PERCENT,NA,'@',ModuleName,': Attempt to call uninstantiated literal'])
            )

	;
	  flora_check_module_name(ModuleName),
	  flora_check_dynmod_type_consistency(FLLIBMODLIT(F,Arg,ModuleName,CallerInfo)),
	  get_libmod_callable(F,Arg,ModuleName,CallerInfo,P),
	  %% Assign an Id for use by both the export & the undefinedness check.
	  (nonvar(ProtectCall) ->
	      %% New Id for protecting calls. Unique Id is used because
	      %% several calls to the same method/predicate may be in
	      %% progress at the same time, so we don't want to inadvertantly
	      %% unprotect a call that might still need to be protected
	      %% the same Id is also used for the export call.
	      flora_increment_counter(FLORA_SYMBOL('protect_undef_call'),1,_,IdExport),
	      flora_add_undef_export_call(P,IdExport),
	      %% Protect call P from undefinedness check
	      (  flora_in_debug_mode(_),
		  flora_debug_module_registry(ModuleName)
	      ->  IdUndef = IdExport,
		  flora_temp_protect_call(P,IdUndef)
	      ;   
		  IdUndef = 0
	      )
	  ;
	      IdExport = 0,
	      IdUndef = 0
	  ),
	  %% Whether P succeeds or fails we must remove the temporary
	  %% skeleton from the set of facts protected from undefinedness
	  %% checking in flrundefined.P so that undefinedness could be
	  %% checked again for P.
	  %% Likewise remove the predicate from the export undef registry.
	  %% It can happen that Id is not equal to 0 but IdUndef is.
	  (
	    call(P),
	    (IdExport > 0 ->  flora_remove_undef_export_call(IdExport)
	    ;   true
	    ),
	    (IdUndef > 0 ->  flora_temp_unprotect_call(IdUndef)
	    ;   true
	    )
	  ; 
	    %% do not put a cut in front of fail: it is wrong
	    IdExport > 0, flora_remove_undef_export_call(IdExport), fail
	  ; 
	    %% do not put a cut in front of fail: it is wrong
	    IdUndef > 0, flora_temp_unprotect_call(IdUndef), fail
	  )
	).


/*********************************************************************
  FLLIBMODOBJ(+HeadBodyContext,+Functor,+Args,+ModuleName,+CallerInfo,-Predicate)

  HeadBodyContext = FL_HEAD/FL_BODY
  This is used as follows: if we have a nested reification of a module'd
  literal, and either the module or the predicate/molecule part is a variable
  then FLLIBMODOBJ constructs the actual literal at run time.
  For instance, ?- p(?P@foo) is translated into
  ?- libmodobj(?P,foo,?Result), p(?Result).
*********************************************************************/
:- import FLLIBDELAYEDLITERAL/4 from usermod.
FLLIBMODOBJ(FL_HEAD,F,Arg,ModuleName,CallerInfo,Pout) :-
	var(ModuleName),
	!,
	FLLIBUNIVEQFORM(Pout,FLLIBMODLIT(F,Arg,ModuleName,CallerInfo)).
FLLIBMODOBJ(_,F,Arg,ModuleName,CallerInfo,Pout) :-
	var(Arg),
	!,
	FLLIBUNIVEQFORM(Pout,FLLIBMODLIT(F,Arg,ModuleName,CallerInfo)).
FLLIBMODOBJ(FL_BODY,F,Arg,ModuleName,CallerInfo,Pout) :-
	var(ModuleName),
	!,
	FLLIBDELAYEDLITERAL(FL_DELAYQUANT,NULL,NULL,
			    [wish,(nonvar(ModuleName); nonvar(Pout)),
			     (FLLIBUNIVEQFORM(Pout,FLLIBMODLIT(F,Arg,ModuleName,CallerInfo)),machine:del_attr(ModuleName,flrwhen))]).
FLLIBMODOBJ(_Ctxt,F,Arg,ModuleName,CallerInfo,Pout) :-
	fllibmodobj_internal(F,Arg,ModuleName,CallerInfo,Pout).

%% This one is used to compute a BODY LIBMODOBJ from a LIBMODLIT
FLLIBMODOBJ(FLLIBMODLIT(F,Arg,ModuleName,CallerInfo),Pout) :-
	!,
	FLLIBMODOBJ(FL_BODY,F,Arg,ModuleName,CallerInfo,Pout).
%% If not a FLLIBMODLIT - do nothing
FLLIBMODOBJ(Goal,Goal).

fllibmodobj_internal(F,Arg,ModuleName,CallerInfo,Pout) :-
        flora_check_module_name(ModuleName),
	flora_check_dynmod_type_consistency(FLLIBMODLIT(F,Arg,ModuleName,CallerInfo)),
	%% Use a different var, NewCallerInfo, here. Not CallerInfo.
	%% We don't want to bind caller info in a reified term.
	get_libmod_callable(F,Arg,ModuleName,NewCallerInfo,P),
	(P =FLLIBMODLIT(F,_NArg,ModuleName,NewCallerInfo) ->
	    Pout = FLLIBMODLIT(F,Arg,ModuleName,NewCallerInfo)
	;
	    convert_to_body_literal(P,Pout1),
	    FLLIBUNIVEQFORM(Pout,Pout1)
        ).


/*********************************************************************
  get_libmod_callable(+Functor,+Args,+ModuleName,+CallerInfo,-Callable)

  This is common part of FLLIBMODLIT and FLLIBMODOBJ. Takes a term and
  a module and returns a callable structure (molecule or a predicate).
  The input can also be already callable. In this case just return in.
*********************************************************************/
get_libmod_callable(FL_LIBMOD,(FL_NEG_Atm(Arg)),ModuleName,CallerInfo,P) :-
	adjust_caller_info(CallerInfo,RealCallerInfo),
	get_libmod_callable(FL_NEGLIBMOD,Arg,ModuleName,RealCallerInfo,P),
	!.
get_libmod_callable(FL_LIBMOD,WRAP_HILOG(FL_NEG_Atm,Arg),ModuleName,CallerInfo,P) :-
	adjust_caller_info(CallerInfo,RealCallerInfo),
	get_libmod_callable(FL_NEGLIBMOD,Arg,ModuleName,RealCallerInfo,P),
	!.
get_libmod_callable(FL_NEGLIBMOD,(FL_NEG_Atm(Arg)),ModuleName,CallerInfo,P) :-
	adjust_caller_info(CallerInfo,RealCallerInfo),
	get_libmod_callable(FL_LIBMOD,Arg,ModuleName,RealCallerInfo,P),
	!.
get_libmod_callable(F,Arg,ModuleName,CallerInfoIn,P) :-
	adjust_caller_info(CallerInfoIn,CallerInfo),
        (
	  is_list(Arg),
	  F == FL_LIBMOD,
	  ModuleName == FL_INVALIDMODULE,
	  !,
	  flora_abort([Arg,': Attempt to call a non-predicate'])
	; is_list(Arg), %% Term@?WS
	  !,
	  %% This case is compiled as FLLIBMODLIT(F,Args,WS,CallerInfo)
	  %% so the caller is already accounted for.
	  %% P is now made into a Flora wrapper
	  flora_module_predicate(F,Arg,ModuleName,P),
	  flora_bind_last(P, CallerInfo)
	; is_libmodlit_control(Arg, [_Wrap,_A,_PredModule,_C]), !,
	  flora_bind_last(Arg, CallerInfo),
	  P = Arg
	%% is_caller_distributive/3
        ; is_caller_distributive(Arg, _, _), !,
	  apply_caller_info(Arg,CallerInfo,P)
	%% is_caller_distributive/4
        ; is_caller_distributive(Arg, _, _, _), !,
	  apply_caller_info(Arg,CallerInfo,P)
	%% is_ws_distributive/3
        ; is_ws_distributive(Arg,Op,ArgList), !,
	  distribute_workspace(F,ArgList,ModuleName,CallerInfo,ArgListOut),
	  (F == FL_NEGLIBMOD -> dual_connective(Op,Op1)
	  ; Op1 = Op
	  ),
	  is_ws_distributive(P,Op1,ArgListOut)
	; %% ?Var, ?Var@?M, or %?Var@..., Var bound to compound
	  %% F is FL_LIBMOD, FL_NEGLIBMOD, or FL_TRANSLIBMOD
	  flora_decode_predicate(Arg,_,PredModName,Wrapper,_,_,Args), !,
	  ( %% if already a hilog or flogic predicate -- use it
	      nonvar(PredModName),
	      !,
	      %% Always replace the caller info so as to unbind the
	      %% tracing part of CallerInfo properly.
	      flora_replace_last(Arg,CallerInfo,P1),
	      (F == FL_NEGLIBMOD -> negate_predicate(P1,P)
	      ; P = P1
	      )
	  ; ModuleName==FL_INVALIDMODULE,
	      !,
	      (F == FL_NEGLIBMOD -> negate_predicate(Arg,P)
	      ; P = Arg
	      )
	  ; %% else, HiLog - construct it
	      (F == FL_LIBMOD -> WrapToUse = FLBodyPREFIX(WRAP_TABLED_HILOG)
	      ; F == FL_NEGLIBMOD -> WrapToUse = FLNEGBodyPREFIX(WRAP_TABLED_HILOG)
	      ; F == FL_TRANSLIBMOD -> WrapToUse = FLBodyPREFIX(WRAP_NONTABLED_HILOG)
	      ),
	      ( atom(Arg) ->
		  flora_add_last([Arg],AugmentedArgs,CallerInfo),
		  ( var(ModuleName) ->
		      P = FLLIBMODLIT(WrapToUse,AugmentedArgs,ModuleName,CallerInfo)
		  ;
		      flora_module_predicate(WrapToUse,AugmentedArgs,ModuleName,P)
		  )
	      ; Wrapper == WRAP_HILOG -> %% Note: should be WRAP_HILOG (as in HiLog term) here
		  flora_add_last(Args,AugmentedArgs,CallerInfo),
		  ( var(ModuleName) ->
		      P = FLLIBMODLIT(WrapToUse,AugmentedArgs,ModuleName,CallerInfo)
		  ;
		      flora_module_predicate(WrapToUse,AugmentedArgs,ModuleName,P)
		  )
	      ;
		  %% ?Var@..., neg ?Var@..., or %?Var@...
		  %% where Var bound to a prolog predicate
		  P = Arg
	      )
	  )
	),
	!.
	

%% Specifically for FLLIBMODLIT
is_libmodlit_control(FLLIBMODLIT(W,A,M,C), [W,A,M,C]).

distribute_workspace(_F,[],_Mod,_CallerInfo,[]) :- !.
distribute_workspace(F,[H|L],Mod,CallerInfo,[FLLIBMODLIT(F,H,Mod,CallerInfo)|NL]) :-
        distribute_workspace(F,L,Mod,CallerInfo,NL).

distribute_caller_info([],_CallerInfo,[]) :- !.
distribute_caller_info([H|OpArgList],CallerInfo,[Hout|OpArgListOut]) :-
	adjust_caller_info(CallerInfo,RealCallerInfo),
	apply_caller_info(H,RealCallerInfo,Hout),
	distribute_caller_info(OpArgList,CallerInfo,OpArgListOut).

apply_caller_info(Goal,CallerInfo,GoalOut) :-
	is_ws_distributive(Goal,Op,GoalArgs),
	!,
	distribute_caller_info(GoalArgs,CallerInfo,ArgsOut),
	is_ws_distributive(GoalOut,Op,ArgsOut).
apply_caller_info(Goal,CallerInfo,GoalOut) :-
	is_caller_distributive(Goal,Op,GoalArgs,OtherArgs),
	!,
	distribute_caller_info(GoalArgs,CallerInfo,ArgsOut),
	is_caller_distributive(GoalOut,Op,ArgsOut,OtherArgs).
apply_caller_info(Goal,CallerInfo,GoalOut) :-
	is_caller_distributive(Goal,Op,GoalArgs),
	!,
	distribute_caller_info(GoalArgs,CallerInfo,ArgsOut),
	is_caller_distributive(GoalOut,Op,ArgsOut).
apply_caller_info(Goal,CallerInfo,GoalOut) :-
	(flora_decode_predicate(Goal,_,Module,_,_,_,_), nonvar(Module)
	->
	    flora_bind_last(Goal,CallerInfo),
	    GoalOut = Goal
	; GoalOut = Goal
	).

%%% adjust_caller_info(+DefaultCallerInfo,-RealCallerInfo)
%%   In the tracing info,
%%   FL_TRACING(CalledRuleId,ThisRuleId), unbind CalledRuleId
:- import FL_TRACING/2 from usermod.
adjust_caller_info(CallerInfo,RealCallerInfo) :-
	CallerInfo = [Module,TracingInfo|Rest],
	RealCallerInfo = [Module,RealTracingInfo|Rest],
	(var(TracingInfo) -> RealTracingInfo = TracingInfo
	; TracingInfo = FL_TRACING(_,CallingRuleId)
	%% replace the Id of the rule being called,
	%% as they would be different for different literals
	%% The lack of this replacement was the source of a very subtle,
	%% hard-to-find bug
	-> RealTracingInfo = FL_TRACING(_,CallingRuleId)
	;  RealTracingInfo = TracingInfo
	).
/*
*/

%% replace the Id of the rule being called,
%% as they would be different for different literals
%% The lack of this replacement was the source of a very subtle,
%% hard-to-find bug
/*
:- import FL_TRACING/2 from usermod.
adjust_caller_info([Module,FL_TRACING(_,CallingRuleId)|Rest],
		   [Module,FL_TRACING(_,CallingRuleId)|Rest]).
*/

dual_connective(FL_AND_CONNECTIVE,FL_OR_CONNECTIVE).
dual_connective(FL_OR_CONNECTIVE,FL_AND_CONNECTIVE).
