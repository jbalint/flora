/* File:      flrudf.P
**
** Author(s): Michael Kifer
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 2013.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**      http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"
#include "flora_tabling_methods.flh"

/****************************************************************************
   rule for user defined functions 
****************************************************************************/
:- import call0/1 from machine.
UDFHILOGPREDICATENAME(_ReturnOrigPred,Predicate,Arity,Module,ReturnValue) :-
	get_base_pred(Predicate,Arity,BaseName,BasePredicate),
	flrregistry:flora_defined_udf_registry(Module,BaseName,Arity,BasePredicate,_,CallCode),
	arg(1,CallCode,ReturnValue),
	%% No cut: flora_op_synonym/2 can have many matches if Name is a var!
	%% !,
	call0(CallCode).

%% These should be in a library in syslib. No need to relativise them
%% to modules.
UDFHILOGPREDICATENAME(UDFHILOG_RETURN_ORIG_PRED,Predicate,_Arity,_Module,Predicate).

%% This caches conversion from Predicate to BasePredicate, which uses
%% flora_op_synonym inside.
:- dynamic flora_udf_base_pred_cache/4.
get_base_pred(Predicate,Arity,BaseName,BasePredicate) :-
	flora_udf_base_pred_cache(Predicate,Arity,BaseName,BasePredicate),
	!.
get_base_pred(Predicate,Arity,BaseName,BasePredicate) :-
	functor(Predicate,Functor,_),
	basics:length(Args,Arity),
	(Functor == WRAP_HILOG
	-> arg(1,Predicate,OpName), CachedPredicate =.. [WRAP_HILOG,OpName|Args]
	; OpName = Functor, CachedPredicate =.. [OpName|Args]
	),
	( flrsynonym:flora_op_synonym(OpName,BaseName)
	; BaseName = OpName
	),
	(Functor == WRAP_HILOG -> BasePredicate =.. [WRAP_HILOG,BaseName|Args]
	; BasePredicate =.. [BaseName|Args]
	),
	assert(flora_udf_base_pred_cache(CachedPredicate,Arity,BaseName,BasePredicate)),
	CachedPredicate = Predicate.
