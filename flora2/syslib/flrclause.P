/* File:      flrclause.P
**
** Author(s): Chang Zhao
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2013;
**      and Vulcan, Inc., 2008-2013.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**      http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"
#include "flora_exceptions.flh"


:- import
	reverse/2,
	append/3,
	copy_term/2
   from basics.

:- import
        matching_rule_signature/7,
	rule_signature_member/3,
        flora_build_pred_signature/2,
        flora_preprocess_headlist/2
   from flrcanon.
:- import
	flora_decode_predicate/6
   from flrwrapper.

:- import
	get_module_from_metafacts/2,
	get_file_from_metafacts/2
   from flrdescriptor_support.

:- import
        flora_warning_line/2
   from flrprint.

:- import flora_record_rule_signature/13 from flrcanon.


/**********************************************************************
 flora_clause_prefix(+Mode,-Prefix)
************************************************************************/ 
flora_clause_prefix(NULL,          _Prefix).
flora_clause_prefix(STATIC_CLAUSE, FL_HEADPREFIX).
flora_clause_prefix(STATIC_CLAUSE, FL_NEGHEADPREFIX).
flora_clause_prefix(DYNA_CLAUSE,   FL_DYNAPREFIX).
flora_clause_prefix(DYNA_CLAUSE,   FL_NEGDYNAPREFIX).
flora_clause_prefix(DYNZ_CLAUSE,   FL_DYNZPREFIX).
flora_clause_prefix(DYNZ_CLAUSE,   FL_NEGDYNZPREFIX).
flora_clause_prefix(DYNAMIC_CLAUSE,FL_DYNAPREFIX).
flora_clause_prefix(DYNAMIC_CLAUSE,FL_DYNZPREFIX).
flora_clause_prefix(DYNAMIC_CLAUSE,FL_NEGDYNAPREFIX).
flora_clause_prefix(DYNAMIC_CLAUSE,FL_NEGDYNZPREFIX).


/***********************************************************************
 FLLIBCLAUSE(+RuleId,+Mode,+HeadList,?RuleBody)
 Mode: STATIC_CLAUSE, DYNA_CLAUSE, DYNZ_CLAUSE, DYNAMIC_CLAUSE
************************************************************************/ 
FLLIBCLAUSE(RuleId,DescrVarTerm,MetaFacts,Mode,HeadList,Body) :-
        fllibclause_exec(RuleId,DescrVarTerm,MetaFacts,Mode,HeadList,Body).

fllibclause_exec(RuleId,DescrVarTerm,MetaFacts,Mode,[Head],Body) :-
        !,
        flora_clause_prefix(Mode,Prefix),
        matching_rule_signature(RuleId,FileName,DescrVarTerm,Prefix,Head,Body,RuleSig),
	%% Call metafacts later, since usually one gives the head or
	%% the body or the rule id
	call(MetaFacts),
	get_module_from_metafacts(MetaFacts,Module),
	get_file_from_metafacts(MetaFacts,FileName),
	rule_signature_member(file,RuleSig,FileName),
	rule_signature_member(module,RuleSig,Module).

fllibclause_exec(RuleId,DescrVarTerm,MetaFacts,Mode,[H|L],Body) :-
        flora_clause_prefix(Mode,Prefix),
        matching_rule_signature(RuleId,FileName,DescrVarTerm,Prefix,H,Body,RuleSig),
	call(MetaFacts),
	get_module_from_metafacts(MetaFacts,Module),
	get_file_from_metafacts(MetaFacts,FileName),
	rule_signature_member(module,RuleSig,Module),
	rule_signature_member(file,RuleSig,FileName),
        flora_clause_list(RuleId,DescrVarTerm,Prefix,Module,L,Body). 


flora_clause_list(_RuleId,_DescrVarTerm,_Prefix,_Mod,[],_Body) :- 
        !.
flora_clause_list(RuleId,DescrVarTerm,Prefix,Mod,[H|L],Body) :-
        matching_rule_signature(RuleId,_FileName,DescrVarTerm,Prefix,H,Body,RuleSig),
	rule_signature_member(module,RuleSig,Mod),
        flora_clause_list(RuleId,DescrVarTerm,Prefix,Mod,L,Body). 

        
/***********************************************************************
 FLLIBINSRULESIG(+RuleId,+FileName,+DescrVarsTerm,+WS,+RuleNum,+HeadList,+RuleBody,+PreBody,+PostBody,+DefeatCond,+NewPred)

   RuleNum is the rule number within the file. Generated by the tokenizer.
           Used (together with FileName) to relate textual information
	   of a rule by rule Id.
************************************************************************/ 
FLLIBINSRULESIG(RuleId,FileName,DescrVarsTerm,WS,RuleNum,HeadList,Body,PreBody,PostBody,DefeatCond,NewPred) :-
        %% multiple atoms appear in the rule head
        is_list(HeadList),
        !,
        BridgeRule =.. [FL_IMPLYOP,NewPred,Body],
	%% This copy-term speeds up unification with rule signatures for
	%% multi-headed rules. This is because the variables in Head/Body
	%% would be different from the variables in the head/bridge rules.
	copy_term(BridgeRule,BridgeRule1),
        flora_insrulesig_list(RuleId,FileName,DescrVarsTerm,WS,RuleNum,HeadList,Body,PreBody,PostBody,DefeatCond,NewPred,BridgeRule1).

FLLIBINSRULESIG(RuleId,FileName,DescrVarsTerm,WS,RuleNum,Head,Body,PreBody,PostBody,DefeatCond,_NewPred) :-
        %% only a single atom appears in the rule head
	flora_decode_predicate(Head,Type,_,_,_,_),
	((Type == (hilog) ; Type == (flogic)) -> HeadPrefix = FL_HEADPREFIX
	; Type == (flora) -> HeadPrefix = FL_EMPTYPREFIX
	; Type == neg_flora -> HeadPrefix = FL_NEGPREFIX
	; HeadPrefix = FL_NEGHEADPREFIX
	),
        flora_record_rule_signature(RuleId,FileName,DescrVarsTerm,HeadPrefix,WS,RuleNum,Head,Body,PreBody,PostBody,DefeatCond,[],[]).
        

/****************************************************************************
    BridgeRules:
      A multiheaded rule like  p,q :- r is represented as
	     p :- newpredicateXYZ.
	     q :- newpredicateXYZ.
	     newpredicateXYZ :- r.
      The last rule is called the bridge rule.
****************************************************************************/
flora_insrulesig_list(_RuleId,_FileName,_DescrVarsTerm,_WS,_RuleNum,[],_Body,_PreBody,_PostBody,_DefeatCond,_NewPred,_BridgeRule) :- !.
flora_insrulesig_list(RuleId,FileName,DescrVarsTerm,WS,RuleNum,[Head|RestH],Body,PreBody,PostBody,DefeatCond,NewPred,BridgeRule) :- 
	flora_decode_predicate(Head,Type,_,_,_,_),
	((Type == (hilog) ; Type == (flogic)) -> HeadPrefix = FL_HEADPREFIX
	; Type == (flora) -> HeadPrefix = FL_EMPTYPREFIX
	; Type == neg_flora -> HeadPrefix = FL_NEGPREFIX
	; HeadPrefix = FL_NEGHEADPREFIX
	),
	HeadRule =.. [FL_IMPLYOP,Head,NewPred],
	%% This copy-term speeds up unification with rule signatures for
	%% multi-headed rules. This is because the variables in Head/Body
	%% would be different from the variables in the head/bridge rules.
	copy_term(HeadRule,HeadRule1),
	copy_term(DefeatCond,DefeatCond1),
        flora_record_rule_signature(RuleId,FileName,DescrVarsTerm,HeadPrefix,WS,RuleNum,Head,Body,PreBody,PostBody,DefeatCond1,[HeadRule1],[BridgeRule]),
        flora_insrulesig_list(RuleId,FileName,DescrVarsTerm,WS,RuleNum,RestH,Body,PreBody,PostBody,DefeatCond,NewPred,BridgeRule).
