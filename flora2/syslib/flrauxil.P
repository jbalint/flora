/* File:      flrauxil.P - various auxiliary predicates, eg. for type checking
**
** Author(s): Michael Kifer
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 2014.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**      http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**
*/

/*
   sub_compound(?Term,?Term1,?Context,+IsaPred,+SubPred)

   This is called from closure/flrsigaxioms.fli

   If Term or Term1 are compound, check if ?Term and ?Term have the same
   method name and the arglist of ?Term is a subtype of the arglist of ?Term1

   IsaPred is WRAP_ISA(A,A1,FL_CONTEXT(Caller,_,_))
   SubPred is WRAP_SUB(A,A1,FL_CONTEXT(Caller,_,_)))
*/

:- export
	generalize_method/4,
	sub_compound/4.
:- import
	length/2
   from basics.

sub_compound(M,M1,IsaPred,SubPred) :-
    	(generalize_method(M,M1,Args,Args1) -> true
	; generalize_method(M1,M,Args1,Args)
	),
	list_sub(Args,Args1,IsaPred,SubPred).

list_sub([],[],_,_) :- !.
list_sub([A|Rest],[A1|Rest1],IsaPred,SubPred) :-
	copy_term(IsaPred,NewIsaPred),
	copy_term(SubPred,NewSubPred),
	arg(1,IsaPred,A), arg(2,IsaPred,A1), %% construct A:A1
	arg(1,SubPred,A), arg(2,SubPred,A1), %% construct A::A1
    	(A = A1 ; IsaPred ; SubPred),
	!,
	list_sub(Rest,Rest1,NewIsaPred,NewSubPred).

%% replace method args with variables
generalize_method(Method,Method,_,_) :-
	var(Method),
	!.

generalize_method(Method,GenMethod,Args,NewArgs) :-
	compound(Method),
	Method =.. [HiLogWrap,MethName|Args],
	functor(Method,_,N), NN is N-1,
	length(NewArgs,NN),
	GenMethod =.. [HiLogWrap,MethName|NewArgs].
