/* File:      flrstoragebase.P - access to base facts
**
** Author(s): Michael Kifer
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2013.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**      http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**
*/



%% This file exists in order to isolate Flora's access to base facts
%% and make it possible to easily switch the access methods

:- compiler_options([xpp_on]).

#include "flora_terms.flh"
#include "flora_porting.flh"
#include "trie_defs.h"

:- export
	flora_adaptive_assert/1,
	flora_adaptive_retract/1,
	flora_db_insert_base/2,
	flora_db_insert_base_fast/2, %% for loading of facts only
	flora_db_delete_base/2,
	flora_db_insert_base_bt/2,
	flora_db_delete_base_bt/2,
	flora_db_find_base/2,
	flora_db_delete_all/1,
	flora_new_db_storage/1,
	flora_db_commit/1,
	flora_db_reclaim_space/1,
	flora_storage_fast_insert_fact/3,
	flora_storage_find_fact/2.

:- import incr_assert/1, incr_assert/3, incr_retract/1 from increval.
:- import predicate_property/2 from curr_sym.
:- import assert/3 from assert.

:- import
	storage_insert_fact_bt/5,
	storage_insert_fact/3,
	storage_delete_fact_bt/5,
	storage_delete_fact/3,
	incr_storage_insert_fact_bt/3,
	incr_storage_insert_fact/3,
	incr_storage_delete_fact_bt/3,
	incr_storage_delete_fact/3
   from storage.
:- import
	storage_find_fact/2,
	storage_reclaim_space/1,
	storage_delete_all/1,
	storage_handle/4,
	storage_commit/1
   from storage.

:- import trie_intern_deterministic/4 from intern.

:- import
	%%flora_abolish_table_call/1,
	flora_refresh_tables/1
   from flrtables.

:- import flora_abort/1 from flrporting.

:- import flora_call_hooks/5 from flrhooks.

:- import flrtrim_last/2 from flora_ground.

:- import
	flora_storage_module/2,
	flora_is_fdb_storage/1
   from flrwrapper.

:- import flora_trailer_registry/2 from flrregistry.


%% Lop off the last argument before inserting/querying the database
%% exported
flora_db_insert_base(StorageName,Call) :-
	flrtrim_last(Call, CallSansContext),
	flora_storage_module(StorageName,Module),
	%% Hooks get CallSansContext as an argument.
	%% CallSansContext is used by around-hooks to pass info from
	%% before hooks to after hooks
	call_if_fdb_storage(StorageName,
			    flora_call_hooks(Module,INSERTFACT,CallSansContext,before,AroundHookLink)),
	flora_storage_insert_fact(StorageName,CallSansContext,Call,_ResultFlag),
	call_if_fdb_storage(StorageName,
			    flora_call_hooks(Module,INSERTFACT,CallSansContext,after,AroundHookLink)).

%% exported
/*
   Logic for interacting with DB interface:
      delete from database is in the after-hook
      If Call is in memory or in DB:
          Since we are calling flora_db_delete_base, we must have queried
	    Call before and the result was true. So, we first delete
	    from memory and then the afterhook deletes from DB, if any.
      If Call is not in memory or in DB, we don't even get here.
          This is because flora_db_delete_base is called only after
	  we queried that Call is true. (Such a query will also check the DB.)
*/
flora_db_delete_base(StorageName,Call) :-
	flrtrim_last(Call, CallSansContext),
	flora_storage_module(StorageName,Module),
	call_if_fdb_storage(StorageName,
			    flora_call_hooks(Module,DELETEFACT,CallSansContext,before,AroundHookLink)),
	%%may or may not be present in main memory.
	flora_storage_delete_fact(StorageName,CallSansContext,Call,_ResultFlag),
	call_if_fdb_storage(StorageName,
			    flora_call_hooks(Module,DELETEFACT,CallSansContext,after,AroundHookLink)).

%% exported
flora_db_insert_base_bt(StorageName,Call) :-
	flrtrim_last(Call, CallSansContext),
	flora_storage_module(StorageName,Module),
	call_if_fdb_storage(StorageName,
			    flora_call_hooks(Module,INSERTFACT,CallSansContext,before,AroundHookLink)),
	flora_storage_insert_fact_bt(StorageName,CallSansContext,Call,_ResultFlag),
	call_if_fdb_storage(StorageName,
			    flora_call_hooks(Module,INSERTFACT,CallSansContext,after,AroundHookLink)).

%% exported
flora_db_delete_base_bt(StorageName,Call) :-
	flrtrim_last(Call, CallSansContext),
	flora_storage_module(StorageName,Module),
	call_if_fdb_storage(StorageName,
			    flora_call_hooks(Module,DELETEFACT,CallSansContext,before,AroundHookLink)),
	flora_storage_delete_fact_bt(StorageName,CallSansContext,Call,_ResultFlag),
	call_if_fdb_storage(StorageName,
			    flora_call_hooks(Module,DELETEFACT,CallSansContext,after,AroundHookLink)).


%% Used to search database of facts
%% exported
flora_db_find_base(StorageName,Call) :-
	flrtrim_last(Call, CallSansContext),
	flora_storage_module(StorageName,Module),
	call_if_fdb_storage(StorageName,
			    flora_call_hooks(Module,FINDFACT,CallSansContext,before,AroundHookLink)),
	flora_storage_find_fact(StorageName,CallSansContext),
	call_if_fdb_storage(StorageName,
			    flora_call_hooks(Module,FINDFACT,CallSansContext,after,AroundHookLink)).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Here we need to implement backtrackable updates using assert and retract_nr


%% Inserts facts. On backtracking, the fact is deleted.
flora_storage_insert_fact_bt(StorageName,Fact,Call,Inserted) :-	
	flora_storage_module(StorageName,Module),
	(
	  flora_trailer_registry(Module,FL_TABLING(FL_INCREMENTAL)),
	  flora_is_fdb_storage(StorageName)
	-> incr_storage_insert_fact_bt(StorageName,Fact,Inserted)
	;
	  storage_insert_fact_bt(StorageName,Fact,Inserted,
				 true,
				 %% Refresh on backtracking. Forward refresh
				 %% is done after this statement.
				 flora_refresh_tables(Call)
				),
	  call_if_fdb_storage(StorageName,
			      flora_refresh_tables(Call)
			     )
	),
	call_if_fdb_storage(StorageName,
			    flrnegation:incr_flora_update_counter
			   ).


%% Nonbacktrackable insert
flora_storage_insert_fact(StorageName,Fact,Call,Inserted) :-	
	flora_storage_module(StorageName,Module),
	(
	  flora_trailer_registry(Module,FL_TABLING(FL_INCREMENTAL)),
	  flora_is_fdb_storage(StorageName)
	-> incr_storage_insert_fact(StorageName,Fact,Inserted)
	;
	  storage_insert_fact(StorageName,Fact,Inserted),
	  call_if_fdb_storage(StorageName,
			      flora_refresh_tables(Call)
			     )
	),
	call_if_fdb_storage(StorageName,
			    flrnegation:incr_flora_update_counter
			   ).


%% Backtrackable delete.
%% Doesn't remove anything, but instead "marks" for deletion.
%% On backtracking: unmarks facts that are marked for deletion
flora_storage_delete_fact_bt(StorageName,Fact,Call,Deleted) :-
	flora_storage_module(StorageName,Module),
	(
	  flora_trailer_registry(Module,FL_TABLING(FL_INCREMENTAL)),
	  flora_is_fdb_storage(StorageName)
	-> incr_storage_delete_fact_bt(StorageName,Fact,Deleted)
	;
	  storage_delete_fact_bt(StorageName,Fact,Deleted,
				 true,
				 %% Refresh on backtracking. Forward refresh is
				 %% done after this statement.
				 flora_refresh_tables(Call)
				),
	  call_if_fdb_storage(StorageName,
			      flora_refresh_tables(Call)
			     )
	),
	call_if_fdb_storage(StorageName,
			    flrnegation:incr_flora_update_counter
			   ).

%% Nonbacktrackable delete
flora_storage_delete_fact(StorageName,Fact,Call,Deleted) :-
	flora_storage_module(StorageName,Module),
	(
	  flora_trailer_registry(Module,FL_TABLING(FL_INCREMENTAL)),
	  flora_is_fdb_storage(StorageName)
	-> 
	  incr_storage_delete_fact(StorageName,Fact,Deleted)
	;
	  storage_delete_fact(StorageName,Fact,Deleted),
	  call_if_fdb_storage(StorageName,
			      flora_refresh_tables(Call)
			     )
	),
	call_if_fdb_storage(StorageName,
			    flrnegation:incr_flora_update_counter
			   ).

%% deletes the whole trie
%% exported
flora_db_delete_all(StorageName) :-
	storage_delete_all(StorageName).

%%flora_new_db_storage(StorageName) :-
%%        storage_handle(StorageName,NON_INCREMENTAL_TRIE,_,_).
flora_new_db_storage(StorageName) :-
	storage_handle(StorageName,INCREMENTAL_TRIE,_,_).


%% Find fact in storage
flora_storage_find_fact(StorageName,Fct) :- 
	storage_find_fact(StorageName,Fct).


%% Commit changes to the storage trie associated with StorageName
%% (only if storage has been changed)
%% exported
flora_db_commit(StorageName) :- storage_commit(StorageName).

%% Reclaims space by removing nodes from the backtrackable insert/keypair trie
%% which were marked for deletion. This should be done only at the top 
%% level of a query.
%% This is exported
flora_db_reclaim_space(StorageName) :- storage_reclaim_space(StorageName).


%% Call Goal, if StorageName is FDB storage (and not FLD storage)
call_if_fdb_storage(StorageName,Goal) :-
	flora_is_fdb_storage(StorageName),
	!,
	Goal.
call_if_fdb_storage(_StorageName,_Goal).


/******************************************************************************
    The following are used only for loading facts and for update
    management in flrnegation.P
******************************************************************************/
%% IncrFlag INCREMENTAL_TRIE/NON_INCREMENTAL_TRIE
flora_storage_fast_insert_fact(StorageName,IncrFlag,Fact) :-
	storage_handle(StorageName,IncrFlag,Handle,_),
	trie_intern_deterministic(Fact,Handle,_Leaf,_).

flora_db_insert_base_fast(StorageName,Call) :-
	flrtrim_last(Call,Fact),
	flora_storage_fast_insert_fact(StorageName,INCREMENTAL_TRIE,Fact).
	%%flora_abolish_table_call(Call).

%% In assert this means: use better register allocation. Assert last.
#define CONSERVE_REGISTERS  3
%% Tell assert on which argument to index. This actually has no effect,
%% as the ':- index' directive takes precedence
#define INDEXED_ARG         1

%% We need to make these adaptive ops depend on whether the rule is
%% in an incremental module or not
flora_adaptive_assert(Rule) :-
	Rule = (H:- _),
	!,
	(predicate_property(H,opaque)
	->
	    assert(Rule,CONSERVE_REGISTERS,INDEXED_ARG)
	; predicate_property(H,incremental)
	->
	    incr_assert(Rule,CONSERVE_REGISTERS,INDEXED_ARG)
	;
	    functor(H,F,A),
	    %% Inserting new predicate as opaque.
	    %% Incremental updates seem to go through opaque dynamic preds.
	    (dynamic F/A as opaque),
	    assert(Rule,CONSERVE_REGISTERS,INDEXED_ARG)
	).
flora_adaptive_assert(Fact) :-
	(predicate_property(Fact,opaque)
	->
	    assert(Fact)
	; predicate_property(Fact,incremental)
	->
	    incr_assert(Fact)
	;
	    functor(Fact,F,A),
	    %% Inserting new predicate as opaque.
	    %% Incremental updates seem to go through opaque dynamic preds.
	    (dynamic F/A as opaque),
	    assert(Fact)
	).

flora_adaptive_retract(Rule) :-
	Rule = (H:- _),
	!,
	(predicate_property(H,opaque) -> retract(Rule)
	; predicate_property(H,incremental) -> incr_retract(Rule)
	;
	    flora_abort(['internal error: deletion of a rule whose head is not opaque or dynamic: ', Rule])
	).

flora_adaptive_retract(Fact) :-
	(predicate_property(Fact,opaque) -> retract(Fact)
	; predicate_property(Fact,incremental) -> incr_retract(Fact)
	;
	    flora_abort(['internal error: deletion of a fact that is not opaque or dynamic: ', Fact])
	).

