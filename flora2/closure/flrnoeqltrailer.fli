/*******************************************************************************
  file: closure/flrnoeqltrailer.fli - A template file to generate trailers that
  				      have no equality maintenance and NO
				      behavioral inheritance.
  				      Inheritance of signatures is supported.
  Author(s): Guizhen Yang

  Contact:   flora-users@lists.sourceforge.net

  Copyright (C) by
       The Research Foundation of the State University of New York, 1999-2013.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

*******************************************************************************/


#include "flora_wspredicates.flh"
#include "flora_porting.flh"

:- import flora_warning_line/2 from flrprint.
:- import flora_funct_arity/2 from flrwrapper.

#include "flrnoeqltrailer_neg.inc"

/***************************************************************************
  Note that all programs rules are translated with with a 'derived_' prefix.
  These rules are bridged to the trailer using wrapper predicates with a
  'inferred_' (FLTRAILERPREFIX) prefix.
***************************************************************************/


/***************************************************************************
  closure rules for X::Y
***************************************************************************/
:- import xwam_state/2 from machine.
%% X::X true if nonstrict subclasses
WRAP_SUB(X,X,_FWContext) :-
        flora_optimizer_registry(FL_SUBCLASSING(NONSTRICT_SUB),'FLORA_THIS_MODULE_NAME').

WRAP_SUB(X,Y,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_SUB)(X,Y,FL_CONTEXT(Caller,_,_)),
	(X=Y,
	%% Issue a warning only if we are sure X::Y is true, not undefined
	xwam_state(2,XWamState), XWamState =:= 0,
 	\+flora_optimizer_registry(FL_SUBCLASSING(NONSTRICT_SUB),'FLORA_THIS_MODULE_NAME') ->
	    flora_warning_line('cycle in class hierarchy: ~w sub ~w', [X,Y])
	; true).

WRAP_SUB(X,Y,FL_CONTEXT(Caller,_,_)) :-
	silent_sub(X,Z,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_SUB)(Z,Y,FL_CONTEXT(Caller,_,_)),
	(X=Y,
	xwam_state(2,XWamState), XWamState =:= 0,
 	\+flora_optimizer_registry(FL_SUBCLASSING(NONSTRICT_SUB),'FLORA_THIS_MODULE_NAME') ->
	    flora_warning_line('cycle in class hierarchy: ~w sub ~w sub ~w',[X,Z,Y])
	; true).


/***************************************************************************
  closure rules for O:C
***************************************************************************/
%% WRAP_ISA/3
WRAP_ISA(O,C,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_ISA)(O,C,FL_CONTEXT(Caller,_,_)).

WRAP_ISA(O,C,FL_CONTEXT(Caller,_,_)) :-
        nonvar(C), var(O),
	!,
	silent_sub(S,C,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_ISA)(O,S,FL_CONTEXT(Caller,_,_)).

WRAP_ISA(O,C,FL_CONTEXT(Caller,_,_)) :-
	( flora_optimizer_registry(FLORA_CLASS_EXPRESSIONS,'FLORA_THIS_MODULE_NAME')
	-> 
	    silent_sub(S,C,FL_CONTEXT(Caller,_,_)),
	    FLTRAILERPREFIX(WRAP_ISA)(O,S,FL_CONTEXT(Caller,_,_))
	;
	   %% The order of FLTRAILERPREFIX(WRAP_ISA)/silent_sub is important.
	   %% Otherwise, it won't return correct answers in cases
	   %% like a:(b,c). ?- a:?X.
	    FLTRAILERPREFIX(WRAP_ISA)(O,S,FL_CONTEXT(Caller,_,_)),
	    silent_sub(S,C,FL_CONTEXT(Caller,_,_))
	).


/*****************************************************************************
  closure for X[Y->Z], X[Y*->Z], X[Y->{}]
*****************************************************************************/
WRAP_IMVD(C,M,V,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_IMVD)(C,M,V,FL_CONTEXT(Caller,_,_)).

WRAP_MVD(O,M,V,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_MVD)(O,M,V,FL_CONTEXT(Caller,_,_)).

WRAP_MVDDEF(O,M,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_MVDDEF)(O,M,FL_CONTEXT(Caller,_,_)).

WRAP_MVDDEF(O,M,FL_CONTEXT(Caller,_,_)) :-
	nonvar(M),
	WRAP_MVD(O,M,_V,FL_CONTEXT(Caller,_,_)).
	%% Should have a cut here when XSB will allow


/*****************************************************************************
  binary attributes (tabled methods)
*****************************************************************************/
WRAP_METH(O,M,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_METH)(O,M,FL_CONTEXT(Caller,_,_)).

WRAP_IMETH(C,M,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_IMETH)(C,M,FL_CONTEXT(Caller,_,_)).


/*****************************************************************************
  nontabled methods (transactions)
*****************************************************************************/
WRAP_TRAN(O,T,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_TRAN)(O,T,FL_CONTEXT(Caller,_,_)).


/*****************************************************************************
  monotonic inheritance of signatures
*****************************************************************************/
%% WRAP_MVDSIG/4
WRAP_MVDSIG(O,M,R,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_MVDSIG)(O,M,R,FL_CONTEXT(Caller,_,_)).

WRAP_MVDSIG(O,M,R,FL_CONTEXT(Caller,_,_)) :-
	WRAP_ISA(O,C,FL_CONTEXT(Caller,_,_)),
	WRAP_IMVDSIG(C,M,R,FL_CONTEXT(Caller,_,_)).


%% WRAP_MVDCONDEF/5 
WRAP_MVDCONDEF(C,M,L,H,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_MVDCONDEF)(C,M,L,H,FL_CONTEXT(Caller,_,_)).

WRAP_MVDCONDEF(O,M,L,H,FL_CONTEXT(Caller,_,_)) :-
	WRAP_ISA(O,C,FL_CONTEXT(Caller,_,_)),
	WRAP_IMVDCONDEF(C,M,L,H,FL_CONTEXT(Caller,_,_)).

%% WRAP_MVDSIGDEF/3
WRAP_MVDSIGDEF(O,M,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_MVDSIGDEF)(O,M,FL_CONTEXT(Caller,_,_)).

WRAP_MVDSIGDEF(O,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_ISA(O,C,FL_CONTEXT(Caller,_,_)),
	WRAP_IMVDSIGDEF(C,M,FL_CONTEXT(Caller,_,_)).

WRAP_MVDSIGDEF(O,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_MVDSIG(O,M,_V,FL_CONTEXT(Caller,_,_)).
	%% Should have a cut here when XSB will allow


%% WRAP_IMVDSIG/4
WRAP_IMVDSIG(C,M,R,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_IMVDSIG)(C,M,R,FL_CONTEXT(Caller,_,_)).

WRAP_IMVDSIG(C,M,R,FL_CONTEXT(Caller,_,_)) :-
	FLINHERITANCEPREFIX(WRAP_SUB)(C,S,FL_CONTEXT(Caller,_,_)),
	WRAP_IMVDSIG(S,M,R,FL_CONTEXT(Caller,_,_)).


%% WRAP_IMVDCONDEF/5 
WRAP_IMVDCONDEF(C,M,L,H,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_IMVDCONDEF)(C,M,L,H,FL_CONTEXT(Caller,_,_)).

WRAP_IMVDCONDEF(C,M,L,H,FL_CONTEXT(Caller,_,_)) :-
	FLINHERITANCEPREFIX(WRAP_SUB)(C,S,FL_CONTEXT(Caller,_,_)),
	WRAP_IMVDCONDEF(S,M,L,H,FL_CONTEXT(Caller,_,_)).

%% WRAP_IMVDSIGDEF/3
WRAP_IMVDSIGDEF(C,M,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_IMVDSIGDEF)(C,M,FL_CONTEXT(Caller,_,_)).

WRAP_IMVDSIGDEF(C,M,FL_CONTEXT(Caller,_,_)) :-
	FLINHERITANCEPREFIX(WRAP_SUB)(C,S,FL_CONTEXT(Caller,_,_)),
	WRAP_IMVDSIGDEF(S,M,FL_CONTEXT(Caller,_,_)).

WRAP_IMVDSIGDEF(C,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_IMVDSIG(C,M,_V,FL_CONTEXT(Caller,_,_)).
	%% Should have a cut here when XSB will allow


%% WRAP_BOOLSIG/3
WRAP_BOOLSIG(O,M,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_BOOLSIG)(O,M,FL_CONTEXT(Caller,_,_)).

WRAP_BOOLSIG(O,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_ISA(O,C,FL_CONTEXT(Caller,_,_)),
	WRAP_IBOOLSIG(C,M,FL_CONTEXT(Caller,_,_)).


%% WRAP_IBOOLSIG/3
WRAP_IBOOLSIG(C,M,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_IBOOLSIG)(C,M,FL_CONTEXT(Caller,_,_)).

WRAP_IBOOLSIG(C,M,FL_CONTEXT(Caller,_,_)) :-
	FLINHERITANCEPREFIX(WRAP_SUB)(C,S,FL_CONTEXT(Caller,_,_)),
	WRAP_IBOOLSIG(S,M,FL_CONTEXT(Caller,_,_)).


%% WRAP_TRANSIG/3
WRAP_TRANSIG(O,M,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_TRANSIG)(O,M,FL_CONTEXT(Caller,_,_)).

WRAP_TRANSIG(O,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_ISA(O,C,FL_CONTEXT(Caller,_,_)),
	WRAP_ITRANSIG(C,M,FL_CONTEXT(Caller,_,_)).


%% WRAP_ITRANSIG/3
WRAP_ITRANSIG(C,M,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_ITRANSIG)(C,M,FL_CONTEXT(Caller,_,_)).

WRAP_ITRANSIG(C,M,FL_CONTEXT(Caller,_,_)) :-
	FLINHERITANCEPREFIX(WRAP_SUB)(C,S,FL_CONTEXT(Caller,_,_)),
	WRAP_ITRANSIG(S,M,FL_CONTEXT(Caller,_,_)).


/*****************************************************************************
  object existence
*****************************************************************************/
WRAP_EXISTS(X,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_EXISTS)(X,FL_CONTEXT(Caller,_,_)).

