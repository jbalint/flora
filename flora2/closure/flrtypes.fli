/*******************************************************************************
  file: closure/flrtypes.fli - Axioms for primitive data types

  Author(s): Michael Kifer

  Contact:   flora-users@lists.sourceforge.net

  Copyright (C) by
       The Research Foundation of the State University of New York, 1999-2013.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

*******************************************************************************/

#define ground_and_acyclic(X)  (ground(X),is_acyclic(X))
%% #define ground_and_acyclic(X)  true

:- import flora_when/2 from flrwhen.

%% We don't want the silent ISA relationships to be shown by the debugger

FLTRAILERPREFIX(WRAP_SUB)(X,Y,_Caller) :- flrdtype_sub:dtype_sub(X,Y).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

FLTRAILERPREFIX(WRAP_ISA)(X,FL_TOPTYPE,_Caller).


:- WRAP_DUMP '#ifdef FLORA_SUBSUMPTIVE_TABLING'.
FLTRAILERPREFIX(WRAP_ISA)(X,FL_SKOLEM,_Caller) :-
	flora_when(nonvar(X),flrnewoid:FL_SKOLEM(X)).
FLTRAILERPREFIX(WRAP_ISA)(X,FL_LONG,_Caller)   :-
	flora_when(nonvar(X),integer(X)).
:- WRAP_DUMP '#else'.
FLTRAILERPREFIX(WRAP_ISA)(X,FL_SKOLEM,_Caller) :- flrnewoid:FL_SKOLEM(X).
FLTRAILERPREFIX(WRAP_ISA)(X,FL_LONG,_Caller)   :- integer(X).
:- WRAP_DUMP '#endif'.

FLTRAILERPREFIX(WRAP_ISA)(X,FL_LONG,_Caller)    :- flora_datatype_name(X,FL_LONG).
FLTRAILERPREFIX(WRAP_ISA)(X,FL_INTEGER,_Caller) :- flora_datatype_name(X,FL_INTEGER).

:- WRAP_DUMP '#ifdef FLORA_SUBSUMPTIVE_TABLING'.
FLTRAILERPREFIX(WRAP_ISA)(X,FL_FLOAT,_Caller) :-
    	flora_when(nonvar(X),float(X)).
:- WRAP_DUMP '#else'.
FLTRAILERPREFIX(WRAP_ISA)(X,FL_FLOAT,_Caller) :- float(X).
:- WRAP_DUMP '#endif'.

FLTRAILERPREFIX(WRAP_ISA)(X,FL_FLOAT,_Caller) :- flora_datatype_name(X,FL_FLOAT).
FLTRAILERPREFIX(WRAP_ISA)(X,FL_DOUBLE,_Caller) :- flora_datatype_name(X,FL_DOUBLE).
FLTRAILERPREFIX(WRAP_ISA)(X,FL_DECIMAL,_Caller) :- flora_datatype_name(X,FL_DECIMAL).
FLTRAILERPREFIX(WRAP_ISA)(X,FL_DECIMAL,_Caller) :- FLTRAILERPREFIX(WRAP_ISA)(X,FL_DOUBLE,_Caller).

%% '...' is not a string but a symbol
:- WRAP_DUMP '#ifdef FLORA_SUBSUMPTIVE_TABLING'.
FLTRAILERPREFIX(WRAP_ISA)(X,FL_SYMBOL,_Caller) :- flora_when(nonvar(X),atom(X)).
:- WRAP_DUMP '#else'.
FLTRAILERPREFIX(WRAP_ISA)(X,FL_SYMBOL,_Caller) :- atom(X).
:- WRAP_DUMP '#endif'.

FLTRAILERPREFIX(WRAP_ISA)(X,FL_SYMBOL,_Caller) :- flora_datatype_name(X,FL_SYMBOL).
FLTRAILERPREFIX(WRAP_ISA)(X,FL_STRING,_Caller) :- flora_datatype_name(X,FL_STRING).
FLTRAILERPREFIX(WRAP_ISA)(X,FL_BOOL,_Caller) :- flora_datatype_name(X,FL_BOOL).

:- WRAP_DUMP '#ifdef FLORA_SUBSUMPTIVE_TABLING'.
FLTRAILERPREFIX(WRAP_ISA)(X,FL_LISTTYPE,_Caller) :-
	flora_when(nonvar(X),is_list(X)).
:- WRAP_DUMP '#else'.
FLTRAILERPREFIX(WRAP_ISA)(X,FL_LISTTYPE,_Caller) :- is_list(X).
:- WRAP_DUMP '#endif'.

FLTRAILERPREFIX(WRAP_ISA)(X,FL_LISTTYPE,_Caller) :- flora_datatype_name(X,FL_LISTTYPE).
FLTRAILERPREFIX(WRAP_ISA)(X,FL_DATETIME,_Caller) :- flora_datatype_name(X,FL_DATETIME).
FLTRAILERPREFIX(WRAP_ISA)(X,FL_TIME,_Caller) :- flora_datatype_name(X,FL_TIME).
FLTRAILERPREFIX(WRAP_ISA)(X,FL_IRI,_Caller) :- flora_datatype_name(X,FL_IRI).
FLTRAILERPREFIX(WRAP_ISA)(X,FL_DATE,_Caller) :- flora_datatype_name(X,FL_DATE).
FLTRAILERPREFIX(WRAP_ISA)(X,FL_DURATION,_Caller) :- flora_datatype_name(X,FL_DURATION).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Type combinators
%% Restrictions on C1, C2 are precautions against infinite loops
%% due to things like (_string,(_string,(_string,...)...))
FLTRAILERPREFIX(WRAP_ISA)(X, (C1,C2),[Caller|_]) :-
	(flora_optimizer_registry(FLORA_CLASS_EXPRESSIONS,'FLORA_THIS_MODULE_NAME')->fail
	;
	    (C1 \= (_,_), C1 \= (_;_), C1 \= (_-_) -> true
	    ; ground_and_acyclic(C1)
	    ),
	    (C2 \= (_,_), C2 \= (_;_), C2 \= (_-_) -> true
	    ; ground_and_acyclic(C2)
	    ),
	    WRAP_ISA(X,C1,[Caller|_]),
	    WRAP_ISA(X,C2,[Caller|_])
	).

%% The glb rule
FLTRAILERPREFIX(WRAP_SUB)(X, (C1,C2),[Caller|_]) :-
	X \== FL_TOPTYPE,
	(flora_optimizer_registry(FLORA_CLASS_EXPRESSIONS,'FLORA_THIS_MODULE_NAME')->fail
	;
	    (C1 \= (_,_), C1 \= (_;_), C1 \= (_-_) -> true
	    ; ground_and_acyclic(C1)
	    ),
	    (C2 \= (_,_), C2 \= (_;_), C2 \= (_-_) -> true
	    ; ground_and_acyclic(C2)
	    ),
	    WRAP_SUB(X,C1,[Caller|_]),
	    WRAP_SUB(X,C2,[Caller|_]),
	    X \= (C1,C2), X \= (C2,C1)
	).

FLTRAILERPREFIX(WRAP_SUB)((C11,C2),C1,_Caller) :-
	C2 \== FL_TOPTYPE,
	(flora_optimizer_registry(FLORA_CLASS_EXPRESSIONS,'FLORA_THIS_MODULE_NAME')->fail
	;
	    (C1 \= (_,_), C1 \= (_;_), C1 \= (_-_)
	    -> true
	    ; ground_and_acyclic(C11)
	    ),
	    C1 = C11
	).

FLTRAILERPREFIX(WRAP_SUB)((C1,C22),C2,_Caller) :-
        C1 \== FL_TOPTYPE,
	(flora_optimizer_registry(FLORA_CLASS_EXPRESSIONS,'FLORA_THIS_MODULE_NAME')->fail
	;
	    (C2 \= (_,_), C2 \= (_;_), C2 \= (_-_)
	    -> true
	    ; ground_and_acyclic(C22)
	    ),
	    C2 = C22
	).

%% Restrictions on C1, C2 are precautions against infinite loops
%% due to things like (_string,(_string,(_string,...)...))
FLTRAILERPREFIX(WRAP_ISA)(X, (C1;C2),[Caller|_]) :-
	(flora_optimizer_registry(FLORA_CLASS_EXPRESSIONS,'FLORA_THIS_MODULE_NAME')->fail
	;
	    (
		(C1 \= (_,_), C1 \= (_;_), C1 \= (_-_) -> true
		; ground_and_acyclic(C1)
		),
	  	WRAP_ISA(X,C1,[Caller|_])
	    ;
		(C2 \= (_,_), C2 \= (_;_), C2 \= (_-_) -> true
		; ground_and_acyclic(C2)
		),
	  	WRAP_ISA(X,C2,[Caller|_])
	    )
	).

%% The lub rule
FLTRAILERPREFIX(WRAP_SUB)((C1;C2),X,[Caller|_]) :-
	(flora_optimizer_registry(FLORA_CLASS_EXPRESSIONS,'FLORA_THIS_MODULE_NAME')->fail
	;
	    (C1 \= (_;_), C1 \= (_,_), C1 \= (_-_) -> true
	    ; ground_and_acyclic(C1)
	    ),
	    (C2 \= (_;_), C2 \= (_,_), C2 \= (_-_) -> true
	    ; ground_and_acyclic(C2)
	    ),
	    WRAP_SUB(C1,X,[Caller|_]),
	    WRAP_SUB(C2,X,[Caller|_]),
	    X \= (C1;C2), X \= (C2;C1)
	).

FLTRAILERPREFIX(WRAP_SUB)(C1,(C11;C2),_Caller) :-
	C1 \== FL_TOPTYPE,
	(flora_optimizer_registry(FLORA_CLASS_EXPRESSIONS,'FLORA_THIS_MODULE_NAME')->fail
	;
	    (C1 \= (_;_), C1 \= (_,_), C1 \= (_-_)
	    -> true
	    ; ground_and_acyclic(C11)
	    ),
	    C1 = C11
	).

FLTRAILERPREFIX(WRAP_SUB)(C2,(C1;C22),_Caller) :-
	C2 \== FL_TOPTYPE,
	(flora_optimizer_registry(FLORA_CLASS_EXPRESSIONS,'FLORA_THIS_MODULE_NAME')->fail
	;
	    (C2 \= (_;_), C2 \= (_,_), C2 \= (_-_)
	    -> true
	    ; ground_and_acyclic(C22)
	    ),
	    C2 = C22
	).


%% C2 must be ground, since they are under NOT
%% (semantics for non-ground NOT is NOT EXISTS)
FLTRAILERPREFIX(WRAP_ISA)(X, (C1-C2),[Caller|_]) :-
	(flora_optimizer_registry(FLORA_CLASS_EXPRESSIONS,'FLORA_THIS_MODULE_NAME')->fail
	;
	    ground_and_acyclic(C2),
	    WRAP_ISA(X,C1,[Caller|_]),
	    FLORA_NAF_EXISTS(WRAP_ISA(X,C2,[Caller|_]))
	).

FLTRAILERPREFIX(WRAP_SUB)((C11-C2),C1,_Caller) :-
	(flora_optimizer_registry(FLORA_CLASS_EXPRESSIONS,'FLORA_THIS_MODULE_NAME')->fail
	;
	    (C1 \= (_-_), C1 \= (_;_), C1 \= (_,_)
	    -> true
	    ; ground_and_acyclic(C11)
	    ),
	    C1 = C11
	).


/********************* End of standard type definitions *******************/
#undef ground_and_acyclic
