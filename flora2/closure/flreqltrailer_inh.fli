/*******************************************************************************
  file: closure/flreqltrailer_inh.fli - A template for generating trailers with
  				      	equality maintenance AND inheritance

  Author(s): Guizhen Yang

  Contact:   flora-users@lists.sourceforge.net

  Copyright (C) by
       The Research Foundation of the State University of New York, 1999-2013.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

*******************************************************************************/


#include "flora_wspredicates.flh"
#include "flora_porting.flh"

:- import flora_warning_line/2 from flrprint.
:- import flora_funct_arity/2 from flrwrapper.
:- import flora_optimizer_registry/2 from flrregistry.

:- WRAP_COPY_UNQUOTED 'FLORA_THIS_MODULE_NAME'.

#define IF_LOCAL_OVERRIDE_OPTIMIZATION(Test)  \
   (flora_optimizer_registry(FLORA_LOCAL_OVERRIDE_OPTION,'FLORA_THIS_MODULE_NAME') \
   -> Test ; true)
#define IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(Test)  \
   (flora_optimizer_registry(FLORA_LOCAL_OVERRIDE_OPTION,'FLORA_THIS_MODULE_NAME') \
   -> true ; Test)


#include "flreqltrailer_neg.inc"
#include "flreqltrailer_neg_inh.inc"
	    

/***************************************************************************
  Note that all programs rules are translated with with a 'derived_' prefix.
  These rules are bridged to the trailer using wrapper predicates with a
  'inferred_' (FLTRAILERPREFIX) prefix.
***************************************************************************/


/***************************************************************************
  closure rules for X::Y
***************************************************************************/
%% FLTRAILERPREFIX(WRAP_SUB_EQL)/3

FLTRAILERPREFIX(WRAP_SUB_EQL)(X,Y,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(X,OX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(Y,OY,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_SUB)(OX,OY,FL_CONTEXT(Caller,_,_)).


%% X::X true if nonstrict subclasses
WRAP_SUB(X,X,FL_CONTEXT(Caller,_,_)) :-
     flora_optimizer_registry(FL_SUBCLASSING(NONSTRICT_SUB),'FLORA_THIS_MODULE_NAME').
WRAP_SUB(X,Y,FL_CONTEXT(Caller,_,_)) :-
     flora_optimizer_registry(FL_SUBCLASSING(NONSTRICT_SUB),'FLORA_THIS_MODULE_NAME'),
     WRAP_DIFFOBJEQL_AUX(X,Y,FL_CONTEXT(Caller,_,_)).

:- import xwam_state/2 from machine.
%% WRAP_SUB/3
WRAP_SUB(X,Y,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_SUB_EQL)(X,Y,FL_CONTEXT(Caller,_,_)),
	(X=Y,
	xwam_state(2,XWamState), XWamState =:= 0,
	\+flora_optimizer_registry(FL_SUBCLASSING(NONSTRICT_SUB),'FLORA_THIS_MODULE_NAME') ->
	    flora_warning_line('cycle in class hierarchy: ~w sub ~w', [X,Y])
	; true).

WRAP_SUB(X,Y,FL_CONTEXT(Caller,_,_)) :-
	silent_sub(X,Z,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_SUB_EQL)(Z,Y,FL_CONTEXT(Caller,_,_)),
	(X=Y,
	xwam_state(2,XWamState), XWamState =:= 0,
	\+flora_optimizer_registry(FL_SUBCLASSING(NONSTRICT_SUB),'FLORA_THIS_MODULE_NAME') ->
	    flora_warning_line('cycle in class hierarchy: ~w sub ~w sub ~w', [X,Z,Y])
	; true).


/***************************************************************************
  closure rules for O:C
***************************************************************************/
%% FLTRAILERPREFIX(WRAP_ISA_EQL)/3

FLTRAILERPREFIX(WRAP_ISA_EQL)(O,C,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(C,CX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_ISA)(OX,CX,FL_CONTEXT(Caller,_,_)).


%% isa/3
WRAP_ISA(O,C,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_ISA_EQL)(O,C,FL_CONTEXT(Caller,_,_)).

WRAP_ISA(O,C,FL_CONTEXT(Caller,_,_)) :-
        nonvar(C), var(O),
	!,
	silent_sub(S,C,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_ISA_EQL)(O,S,FL_CONTEXT(Caller,_,_)).

WRAP_ISA(O,C,FL_CONTEXT(Caller,_,_)) :-
	( flora_optimizer_registry(FLORA_CLASS_EXPRESSIONS,'FLORA_THIS_MODULE_NAME')
	-> 
	    silent_sub(S,C,FL_CONTEXT(Caller,_,_)),
	    FLTRAILERPREFIX(WRAP_ISA_EQL)(O,S,FL_CONTEXT(Caller,_,_))
	;
	   %% The order of FLTRAILERPREFIX(WRAP_ISA)/SILENT_sub is important. Otherwise, it
	   %% won't return correct answers in cases like a:(b,c). ?- a:?X.
	    FLTRAILERPREFIX(WRAP_ISA_EQL)(O,S,FL_CONTEXT(Caller,_,_)),
	    silent_sub(S,C,FL_CONTEXT(Caller,_,_))
	).


/*****************************************************************************
  The following rules propogate the effects of equality.
*****************************************************************************/
%% FLTRAILERPREFIX(WRAP_IMVD_EQL)/4

FLTRAILERPREFIX(WRAP_IMVD_EQL)(C,M,V,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(C,CX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(M,MX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(V,VX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_IMVD)(CX,MX,VX,FL_CONTEXT(Caller,_,_)).


%% FLTRAILERPREFIX(WRAP_IMVDDEF_EQL)/3
FLTRAILERPREFIX(WRAP_IMVDDEF_EQL)(C,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(C,CX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(M,MX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_IMVDDEF)(CX,MX,FL_CONTEXT(Caller,_,_)).


/***************************************************************************
  closure for X[Y->Z], X[Y*->Z], X[]
/***************************************************************************/
%% FLTRAILERPREFIX(WRAP_MVD_EQL)/4
FLTRAILERPREFIX(WRAP_MVD_EQL)(O,M,V,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(M,MX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(V,VX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_MVD)(OX,MX,VX,FL_CONTEXT(Caller,_,_)).


%% FLTRAILERPREFIX(WRAP_MVDDEF_EQL)/3
FLTRAILERPREFIX(WRAP_MVDDEF_EQL)(O,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL(M,MX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_MVDDEF)(OX,MX,FL_CONTEXT(Caller,_,_)).

%% FLTRAILERPREFIX(WRAP_IMETH_EQL)/3
FLTRAILERPREFIX(WRAP_IMETH_EQL)(C,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(C,CX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(M,MX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_IMETH)(CX,MX,FL_CONTEXT(Caller,_,_)).


%% FLTRAILERPREFIX(WRAP_METH_EQL)/3
FLTRAILERPREFIX(WRAP_METH_EQL)(O,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(M,MX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_METH)(OX,MX,FL_CONTEXT(Caller,_,_)).


/*****************************************************************************
  inheritable methods that are locally defined

  The argument "MethSign" has the form of Funct/Arity/Type.
*****************************************************************************/
%% FLLOCALPREFIX(WRAP_IMVD)/3
FLLOCALPREFIX(WRAP_IMVD)(S,MethSign,FL_CONTEXT(Caller,_,_)) :-
	var(MethSign),
	FLTRAILERPREFIX(WRAP_IMVD_EQL)(S,M,_V,FL_CONTEXT(Caller,_,_)),
	%% Should have a cut here when XSB will allow
	flora_funct_arity(M,MethSign).

FLLOCALPREFIX(WRAP_IMVD)(S,MethSign,FL_CONTEXT(Caller,_,_)) :-
	var(MethSign),
	!,
	FLTRAILERPREFIX(WRAP_IMVDDEF_EQL)(S,M,FL_CONTEXT(Caller,_,_)),
	flora_funct_arity(M,MethSign).

FLLOCALPREFIX(WRAP_IMVD)(S,MethSign,FL_CONTEXT(Caller,_,_)) :-
	nonvar(MethSign), % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	FLTRAILERPREFIX(WRAP_IMVD_EQL)(S,M,_V,FL_CONTEXT(Caller,_,_)).
	%% Should have a cut here when XSB will allow

FLLOCALPREFIX(WRAP_IMVD)(S,MethSign,FL_CONTEXT(Caller,_,_)) :-
	nonvar(MethSign), % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	FLTRAILERPREFIX(WRAP_IMVDDEF_EQL)(S,M,FL_CONTEXT(Caller,_,_)).


%% FLLOCALPREFIX(WRAP_MVD)/3
FLLOCALPREFIX(WRAP_MVD)(S,MethSign,FL_CONTEXT(Caller,_,_)) :-
	var(MethSign),
	FLTRAILERPREFIX(WRAP_MVD_EQL)(S,M,_V,FL_CONTEXT(Caller,_,_)),
	%% Should have a cut here when XSB will allow
	flora_funct_arity(M,MethSign).

FLLOCALPREFIX(WRAP_MVD)(S,MethSign,FL_CONTEXT(Caller,_,_)) :-
	var(MethSign),
	!,
	FLTRAILERPREFIX(WRAP_MVDDEF_EQL)(S,M,FL_CONTEXT(Caller,_,_)),
	flora_funct_arity(M,MethSign).

FLLOCALPREFIX(WRAP_MVD)(S,MethSign,FL_CONTEXT(Caller,_,_)) :-
	nonvar(MethSign), % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	FLTRAILERPREFIX(WRAP_MVD_EQL)(S,M,_V,FL_CONTEXT(Caller,_,_)).
	%% Should have a cut here when XSB will allow

FLLOCALPREFIX(WRAP_MVD)(S,MethSign,FL_CONTEXT(Caller,_,_)) :-
	nonvar(MethSign), % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	FLTRAILERPREFIX(WRAP_MVDDEF_EQL)(S,M,FL_CONTEXT(Caller,_,_)).


%% FLLOCALPREFIX(WRAP_IMETH)/3
FLLOCALPREFIX(WRAP_IMETH)(S,MethSign,FL_CONTEXT(Caller,_,_)) :-
	var(MethSign),
	!,
	FLTRAILERPREFIX(WRAP_IMETH_EQL)(S,M,FL_CONTEXT(Caller,_,_)),
	%% Should have a cut here when XSB will allow
	flora_funct_arity(M,MethSign).

FLLOCALPREFIX(WRAP_IMETH)(S,MethSign,FL_CONTEXT(Caller,_,_)) :-
	nonvar(MethSign), % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	FLTRAILERPREFIX(WRAP_IMETH_EQL)(S,M,FL_CONTEXT(Caller,_,_)).
	%% Should have a cut here when XSB will allow


%% FLLOCALPREFIX(WRAP_METH)/3
FLLOCALPREFIX(WRAP_METH)(S,MethSign,FL_CONTEXT(Caller,_,_)) :-
	var(MethSign),
	!,
	FLTRAILERPREFIX(WRAP_METH_EQL)(S,M,FL_CONTEXT(Caller,_,_)),
	%% Should have a cut here when XSB will allow
	flora_funct_arity(M,MethSign).

FLLOCALPREFIX(WRAP_METH)(S,MethSign,FL_CONTEXT(Caller,_,_)) :-
	nonvar(MethSign), % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	FLTRAILERPREFIX(WRAP_METH_EQL)(S,M,FL_CONTEXT(Caller,_,_)).
	%% Should have a cut here when XSB will allow


/*****************************************************************************
  nonmonotonic multiple inheritance of multivalued attributes
  from superclasses to subclasses
*****************************************************************************/
WRAP_IMVD(C,M,V,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_IMVD_EQL)(C,M,V,FL_CONTEXT(Caller,_,_)).

WRAP_IMVD(C,M,V,FL_CONTEXT(Caller,_,_)) :-
	var(M),
	!,
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_IMVD)(C,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLINHERITANCEPREFIX(WRAP_SUB)(C,Super,FL_CONTEXT(Caller,_,_)),
	FLINHERITANCEPREFIX(WRAP_IMVD_EQL)(Super,M,V,FL_CONTEXT(Caller,_,_)),
	flora_funct_arity(M,MethSign),
	candidate_class_imvd(Super,MethSign,C,FL_CONTEXT(Caller,_,_)),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_IMVD)(C,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLORA_NAF_EXISTS(multiple_class_imvd(Super,MethSign,C,FL_CONTEXT(Caller,_,_))).

WRAP_IMVD(C,M,V,FL_CONTEXT(Caller,_,_)) :-
	nonvar(M),  % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_IMVD)(C,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLINHERITANCEPREFIX(WRAP_SUB)(C,Super,FL_CONTEXT(Caller,_,_)), %% Optimization
	candidate_class_imvd(Super,MethSign,C,FL_CONTEXT(Caller,_,_)),
	FLINHERITANCEPREFIX(WRAP_IMVD_EQL)(Super,M,V,FL_CONTEXT(Caller,_,_)),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_IMVD)(C,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLORA_NAF_EXISTS(multiple_class_imvd(Super,MethSign,C,FL_CONTEXT(Caller,_,_))).


WRAP_IMVDDEF(C,M,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_IMVDDEF_EQL)(C,M,FL_CONTEXT(Caller,_,_)).

WRAP_IMVDDEF(C,M,FL_CONTEXT(Caller,_,_)) :-
	var(M),
	!,
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_IMVD)(C,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLINHERITANCEPREFIX(WRAP_SUB)(C,Super,FL_CONTEXT(Caller,_,_)),
	FLINHERITANCEPREFIX(WRAP_IMVDDEF_EQL)(Super,M,FL_CONTEXT(Caller,_,_)),
	flora_funct_arity(M,MethSign),
	candidate_class_imvd(Super,MethSign,C,FL_CONTEXT(Caller,_,_)),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_IMVD)(C,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLORA_NAF_EXISTS(multiple_class_imvd(Super,MethSign,C,FL_CONTEXT(Caller,_,_))).

WRAP_IMVDDEF(C,M,FL_CONTEXT(Caller,_,_)) :-
	nonvar(M),  % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_IMVD)(C,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLINHERITANCEPREFIX(WRAP_SUB)(C,Super,FL_CONTEXT(Caller,_,_)), %% Optimization
	candidate_class_imvd(Super,MethSign,C,FL_CONTEXT(Caller,_,_)),
	FLINHERITANCEPREFIX(WRAP_IMVDDEF_EQL)(Super,M,FL_CONTEXT(Caller,_,_)),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_IMVD)(C,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLORA_NAF_EXISTS(multiple_class_imvd(Super,MethSign,C,FL_CONTEXT(Caller,_,_))).

WRAP_IMVDDEF(C,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_IMVD(C,M,_V,FL_CONTEXT(Caller,_,_)).
	%% Should have a cut here when XSB will allow


/*****************************************************************************
  nonmonotonic multiple inheritance of multivalued attributes
  from superclasses to instances/members
*****************************************************************************/
WRAP_MVD(O,M,V,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_MVD_EQL)(O,M,V,FL_CONTEXT(Caller,_,_)).

WRAP_MVD(O,M,V,FL_CONTEXT(Caller,_,_)) :-
	var(M),
	!,
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_MVD)(O,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLINHERITANCEPREFIX(WRAP_ISA)(O,Super,FL_CONTEXT(Caller,_,_)),
	FLINHERITANCEPREFIX(WRAP_IMVD_EQL)(Super,M,V,FL_CONTEXT(Caller,_,_)),
	flora_funct_arity(M,MethSign),
	candidate_object_imvd(Super,MethSign,O,FL_CONTEXT(Caller,_,_)),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_MVD)(O,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLORA_NAF_EXISTS(multiple_object_imvd(Super,MethSign,O,FL_CONTEXT(Caller,_,_))).

WRAP_MVD(O,M,V,FL_CONTEXT(Caller,_,_)) :-
	nonvar(M),  % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_MVD)(O,MethSign,FL_CONTEXT(Caller,_,_)))),
	%% DON'T uncomment: causes infinite loop in pps.flr/dyn_pps.flr
	%%(nonvar(O) -> FLINHERITANCEPREFIX(WRAP_ISA)(O,Super,FL_CONTEXT(Caller,_,_)) ; true),
	candidate_object_imvd(Super,MethSign,O,FL_CONTEXT(Caller,_,_)),
	FLINHERITANCEPREFIX(WRAP_IMVD_EQL)(Super,M,V,FL_CONTEXT(Caller,_,_)),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_MVD)(O,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLORA_NAF_EXISTS(multiple_object_imvd(Super,MethSign,O,FL_CONTEXT(Caller,_,_))).


WRAP_MVDDEF(O,M,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_MVDDEF_EQL)(O,M,FL_CONTEXT(Caller,_,_)).

WRAP_MVDDEF(O,M,FL_CONTEXT(Caller,_,_)) :-
	var(M),
	!,
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_MVD)(O,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLINHERITANCEPREFIX(WRAP_ISA)(O,Super,FL_CONTEXT(Caller,_,_)),
	FLINHERITANCEPREFIX(WRAP_IMVDDEF_EQL)(Super,M,FL_CONTEXT(Caller,_,_)),
	flora_funct_arity(M,MethSign),
	candidate_object_imvd(Super,MethSign,O,FL_CONTEXT(Caller,_,_)),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_MVD)(O,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLORA_NAF_EXISTS(multiple_object_imvd(Super,MethSign,O,FL_CONTEXT(Caller,_,_))).

WRAP_MVDDEF(O,M,FL_CONTEXT(Caller,_,_)) :-
	nonvar(M),  % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_MVD)(O,MethSign,FL_CONTEXT(Caller,_,_)))),
	%% DON'T uncomment: causes infinite loop in pps.flr/dyn_pps.flr
	%%(nonvar(O) -> FLINHERITANCEPREFIX(WRAP_ISA)(O,Super,FL_CONTEXT(Caller,_,_)) ; true),
	candidate_object_imvd(Super,MethSign,O,FL_CONTEXT(Caller,_,_)),
	FLINHERITANCEPREFIX(WRAP_IMVDDEF_EQL)(Super,M,FL_CONTEXT(Caller,_,_)),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_MVD)(O,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLORA_NAF_EXISTS(multiple_object_imvd(Super,MethSign,O,FL_CONTEXT(Caller,_,_))).

WRAP_MVDDEF(O,M,FL_CONTEXT(Caller,_,_)) :-
	nonvar(M),  % the cut above might not work under local scheduling
	WRAP_MVD(O,M,_V,FL_CONTEXT(Caller,_,_)).
	%% Should have a cut here when XSB will allow


/*****************************************************************************
  monotonic inheritance of binary attributes (tabled methods)
*****************************************************************************/
WRAP_METH(O,M,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_METH_EQL)(O,M,FL_CONTEXT(Caller,_,_)).

/*
WRAP_METH(O,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_ISA(O,C,FL_CONTEXT(Caller,_,_)),
	WRAP_IMETH(C,M,FL_CONTEXT(Caller,_,_)).
*/

WRAP_METH(O,M,FL_CONTEXT(Caller,_,_)) :-
	var(M),
	!,
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_METH)(O,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLINHERITANCEPREFIX(WRAP_ISA)(O,Super,FL_CONTEXT(Caller,_,_)),
	FLINHERITANCEPREFIX(WRAP_IMETH_EQL)(Super,M,FL_CONTEXT(Caller,_,_)),
	flora_funct_arity(M,MethSign),
	candidate_object_imeth(Super,MethSign,O,FL_CONTEXT(Caller,_,_)),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_METH)(O,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLORA_NAF_EXISTS(multiple_object_imeth(Super,MethSign,O,FL_CONTEXT(Caller,_,_))).

WRAP_METH(O,M,FL_CONTEXT(Caller,_,_)) :-
	nonvar(M),  % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_METH)(O,MethSign,FL_CONTEXT(Caller,_,_)))),
	%% DON'T uncomment: causes infinite loop in pps.flr/dyn_pps.flr
	%%(nonvar(O) -> FLINHERITANCEPREFIX(WRAP_ISA)(O,Super,FL_CONTEXT(Caller,_,_)) ; true),
	candidate_object_imeth(Super,MethSign,O,FL_CONTEXT(Caller,_,_)),
	FLINHERITANCEPREFIX(WRAP_IMETH_EQL)(Super,M,FL_CONTEXT(Caller,_,_)),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_METH)(O,MethSign,FL_CONTEXT(Caller,_,_)))), /* was FLLOCALPREFIX(fd), typo?*/
	FLORA_NAF_EXISTS(multiple_object_imeth(Super,MethSign,O,FL_CONTEXT(Caller,_,_))).

%% WRAP_IMETH/3
WRAP_IMETH(C,M,FL_CONTEXT(Caller,_,_)) :-
	FLTRAILERPREFIX(WRAP_IMETH_EQL)(C,M,FL_CONTEXT(Caller,_,_)).

/*
WRAP_IMETH(C,M,FL_CONTEXT(Caller,_,_)) :-
	FLINHERITANCEPREFIX(WRAP_SUB)(C,S,FL_CONTEXT(Caller,_,_)),
	WRAP_IMETH(S,M,FL_CONTEXT(Caller,_,_)).
*/

WRAP_IMETH(C,M,FL_CONTEXT(Caller,_,_)) :-
	var(M),
	!,
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_IMETH)(C,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLINHERITANCEPREFIX(WRAP_SUB)(C,Super,FL_CONTEXT(Caller,_,_)),
	FLINHERITANCEPREFIX(WRAP_IMETH_EQL)(Super,M,FL_CONTEXT(Caller,_,_)),
	flora_funct_arity(M,MethSign),
	candidate_class_imeth(Super,MethSign,C,FL_CONTEXT(Caller,_,_)),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_IMETH)(C,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLORA_NAF_EXISTS(multiple_class_imeth(Super,MethSign,C,FL_CONTEXT(Caller,_,_))).

WRAP_IMETH(C,M,FL_CONTEXT(Caller,_,_)) :-
	nonvar(M),  % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_IMETH)(C,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLINHERITANCEPREFIX(WRAP_SUB)(C,Super,FL_CONTEXT(Caller,_,_)), %% Optimization
	candidate_class_imeth(Super,MethSign,C,FL_CONTEXT(Caller,_,_)),
	FLINHERITANCEPREFIX(WRAP_IMETH_EQL)(Super,M,FL_CONTEXT(Caller,_,_)),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_NAF_EXISTS(FLLOCALPREFIX(WRAP_IMETH)(C,MethSign,FL_CONTEXT(Caller,_,_)))),
	FLORA_NAF_EXISTS(multiple_class_imeth(Super,MethSign,C,FL_CONTEXT(Caller,_,_))).



/*****************************************************************************
  nontabled methods (transactions)
*****************************************************************************/
WRAP_TRAN(O,T,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(T,TX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_TRAN)(OX,TX,FL_CONTEXT(Caller,_,_)).

/*****************************************************************************
  monotonic inheritance of signatures
*****************************************************************************/
%% WRAP_MVDSIG/4
WRAP_MVDSIG(O,M,R,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(M,MX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(R,RX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_MVDSIG)(OX,MX,RX,FL_CONTEXT(Caller,_,_)).

WRAP_MVDSIG(O,M,R,FL_CONTEXT(Caller,_,_)) :-
	WRAP_ISA(O,C,FL_CONTEXT(Caller,_,_)),
	WRAP_IMVDSIG(C,M,R,FL_CONTEXT(Caller,_,_)).


%% WRAP_MVDCONDEF/5 
WRAP_MVDCONDEF(O,M,L,H,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(M,MX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(H,HX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(L,LX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_MVDCONDEF)(OX,MX,LX,HX,FL_CONTEXT(Caller,_,_)).

WRAP_MVDCONDEF(O,M,L,H,FL_CONTEXT(Caller,_,_)) :-
	WRAP_ISA(O,C,FL_CONTEXT(Caller,_,_)),
	WRAP_IMVDCONDEF(C,M,L,H,FL_CONTEXT(Caller,_,_)).


%% WRAP_MVDSIGDEF/3
WRAP_MVDSIGDEF(O,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(M,MX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_MVDSIGDEF)(OX,MX,FL_CONTEXT(Caller,_,_)).

WRAP_MVDSIGDEF(O,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_ISA(O,C,FL_CONTEXT(Caller,_,_)),
	WRAP_IMVDSIGDEF(C,M,FL_CONTEXT(Caller,_,_)).

WRAP_MVDSIGDEF(O,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_MVDSIG(O,M,_V,FL_CONTEXT(Caller,_,_)).
	%% Should have a cut here when XSB will allow


%% WRAP_IMVDSIG/4
WRAP_IMVDSIG(C,M,R,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(C,CX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(M,MX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(R,RX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_IMVDSIG)(CX,MX,RX,FL_CONTEXT(Caller,_,_)).

WRAP_IMVDSIG(C,M,R,FL_CONTEXT(Caller,_,_)) :-
	FLINHERITANCEPREFIX(WRAP_SUB)(C,S,FL_CONTEXT(Caller,_,_)),
	WRAP_IMVDSIG(S,M,R,FL_CONTEXT(Caller,_,_)).


%% WRAP_IMVDCONDEF/5 
WRAP_IMVDCONDEF(O,M,L,H,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(M,MX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(H,HX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(L,LX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_IMVDCONDEF)(OX,MX,LX,HX,FL_CONTEXT(Caller,_,_)).

WRAP_IMVDCONDEF(C1,M,L,H,FL_CONTEXT(Caller,_,_)) :-
	FLINHERITANCEPREFIX(WRAP_SUB)(C1,C2,FL_CONTEXT(Caller,_,_)),
	WRAP_IMVDCONDEF(C2,M,L,H,FL_CONTEXT(Caller,_,_)).


%% WRAP_IMVDSIGDEF/3
WRAP_IMVDSIGDEF(C,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(C,CX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(M,MX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_IMVDSIGDEF)(CX,MX,FL_CONTEXT(Caller,_,_)).

WRAP_IMVDSIGDEF(C,M,FL_CONTEXT(Caller,_,_)) :-
	FLINHERITANCEPREFIX(WRAP_SUB)(C,S,FL_CONTEXT(Caller,_,_)),
	WRAP_IMVDSIGDEF(S,M,FL_CONTEXT(Caller,_,_)).

WRAP_IMVDSIGDEF(C,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_IMVDSIG(C,M,_V,FL_CONTEXT(Caller,_,_)).
	%% Should have a cut here when XSB will allow


%% WRAP_BOOLSIG/3
WRAP_BOOLSIG(O,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(M,MX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_BOOLSIG)(OX,MX,FL_CONTEXT(Caller,_,_)).

WRAP_BOOLSIG(O,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_ISA(O,C,FL_CONTEXT(Caller,_,_)),
	WRAP_IBOOLSIG(C,M,FL_CONTEXT(Caller,_,_)).


%% WRAP_IBOOLSIG/3
WRAP_IBOOLSIG(C,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(C,CX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(M,MX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_IBOOLSIG)(CX,MX,FL_CONTEXT(Caller,_,_)).

WRAP_IBOOLSIG(C,M,FL_CONTEXT(Caller,_,_)) :-
	FLINHERITANCEPREFIX(WRAP_SUB)(C,S,FL_CONTEXT(Caller,_,_)),
	WRAP_IBOOLSIG(S,M,FL_CONTEXT(Caller,_,_)).


%% WRAP_TRANSIG/3
WRAP_TRANSIG(O,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(M,MX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_TRANSIG)(OX,MX,FL_CONTEXT(Caller,_,_)).

WRAP_TRANSIG(O,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_ISA(O,C,FL_CONTEXT(Caller,_,_)),
	WRAP_ITRANSIG(C,M,FL_CONTEXT(Caller,_,_)).


%% WRAP_ITRANSIG/3
WRAP_ITRANSIG(C,M,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(C,CX,FL_CONTEXT(Caller,_,_)),
	WRAP_DIFFOBJEQL_AUX(M,MX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_ITRANSIG)(CX,MX,FL_CONTEXT(Caller,_,_)).

WRAP_ITRANSIG(C,M,FL_CONTEXT(Caller,_,_)) :-
	FLINHERITANCEPREFIX(WRAP_SUB)(C,S,FL_CONTEXT(Caller,_,_)),
	WRAP_ITRANSIG(S,M,FL_CONTEXT(Caller,_,_)).


/*****************************************************************************
  object existence
*****************************************************************************/
WRAP_EXISTS(X,FL_CONTEXT(Caller,_,_)) :-
	WRAP_DIFFOBJEQL_AUX(X,OX,FL_CONTEXT(Caller,_,_)),
	FLTRAILERPREFIX(WRAP_EXISTS)(OX,FL_CONTEXT(Caller,_,_)).

