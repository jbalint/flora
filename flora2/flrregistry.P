/* File:      flrregistry.P
**
** Author(s): Michael Kifer
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2013.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**      http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**
*/


:- compiler_options([xpp_on]).


%% Tells which modules are loaded
:- dynamic flora_module_registry/1.
%% Tells which file is loaded in which module and how
%% flora_load_registry(?File,?Module,?load/add)
:- dynamic flora_load_registry/3.
:- index(flora_load_registry/3,[1,2]).
%% Tells which modules have trailers loaded in them (some may have no trailers)
:- dynamic flora_trailer_registry/2.
%% Tells which modules have debug option turned on
:- dynamic flora_debug_module_registry/1.
%% Keeps track of the storage trie names
:- dynamic flora_storage_registry/1,
	flora_fld_storage_registry/1.
%% Optimizer options
:- dynamic flora_optimizer_registry/2.
%% (ExportingModule, ModuleExportedTo, UpdatableTag, Exported_Term)
:- dynamic flora_export_registry(_,_,_,_).
:- index(flora_export_registry/4,[4,1]).

:- dynamic flora_in_debug_mode/1.
:- dynamic flora_configuration/2.

%% Pair of FloraModule,ModuleDescribingDefeasibleTheory
:- dynamic flora_defeasible_module_registry/2.
:- index(flora_defeasible_module_registry/2,[1,2]).

:- dynamic flora_disabled_undefinedness_check_registry/3.

:- dynamic flora_coder_prefixdef/2.

:- dynamic flora_shell_prefixdef/3.

:- dynamic flora_used_udf_registry/4.
:- index(flora_used_udf_registry/4,trie).
:- dynamic flora_defined_udf_registry/6.
:- index(flora_defined_udf_registry/6,trie).

:- dynamic flora_modular_prolog_registry/3.
:- index(flora_modular_prolog_registry/3,1+2).

%% This has the form: limitname, value, action
%% The action is the exception handler in case an exception is thrown due
%% to the violation of the limit.
%% Examples of the limits include:
%%    timeout, secs, flora_timeout_handler
%%    termdepth, int, flora_depth_limit_handler
%% Handler is a unary predicate. The argument is the goal that caused
%% the exception
:- dynamic flora_runtime_limits_registry/3.

:- import flora_system_module/1 from flrlibman.

:- export
	flora_module_registry/1,
	flora_user_module_registry/1,
	flora_nonuser_module_registry/1,
	flora_load_registry/3,
	flora_user_load_registry/3,
	flora_debug_module_registry/1,
	flora_in_debug_mode/1,
	flora_storage_registry/1,
	flora_fld_storage_registry/1,
	flora_trailer_registry/2,
	flora_optimizer_registry/2,
	flora_export_registry/4,
	flora_disabled_undefinedness_check_registry/3,
	flora_configuration/2,
	flora_defeasible_module_registry/2,
	flora_runtime_limits_registry/3,
	flora_used_udf_registry/4,
	flora_defined_udf_registry/6,
	flora_modular_prolog_registry/3,
	flora_coder_prefixdef/2,
	flora_shell_prefixdef/3.

%% Like flora_load_registry/3 but excludes non-user modules
flora_user_load_registry(FN,M,Flag) :-
	flora_load_registry(FN,M,Flag),
	\+ flora_defeasible_module_registry(_,M),
	\+ flora_system_module(M).

flora_user_module_registry(M) :-
	flora_module_registry(M),
	\+ flora_defeasible_module_registry(_,M),
	\+ flora_system_module(M).

flora_nonuser_module_registry(M) :- flora_defeasible_module_registry(_,M).
flora_nonuser_module_registry(M) :- flora_system_module(M).

