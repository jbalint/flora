/* File:      flora2.P
**
** Author(s): Michael Kifer
**            Guizhen Yang
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2013.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**      http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
** 
*/


:- compiler_options([xpp_on]).
#include "flag_defs_xsb.h"
#include "flrincludes/flora_terms.flh"
#include "flrincludes/flora_exceptions.flh"

#define FLORA_RC_FILE     'FLORA_RC_FILE'
#if exists("hooks/flrconsts.flh")
#include "hooks/flrconsts.flh"
#endif

:- import
	flora_import_predicate/4
   from flrimport.

:- import
        flora_save_module_util/2, flora_save_module_util/1,
	flora_compile_util/2, flora_compile_util/1,
	flora_compile_add/2, flora_compile_add/1
   from flrutils.

:- import
	flora_configuration/2,
	flora_user_module_registry/1
   from flrregistry.

:- import flora_call_string_command/5 from flrcallflora.

:- import
	flora_abort/2,
	flora_file_op/2,
	flora_concat_atoms/2,
	flora_set_counter/2,
	flora_get_counter/2,
	flora_set_banner_control/2,
	flora_slash/1
   from flrporting.

:- import
	FLLIBLOAD/4,
	FLLIBADD/4,
	flora_embedded_shell_loop/0,
	flora_shell_loop/0
   from usermod.

:- import hide_this_show/2 from usermod.

:- import xpp_include_dir/1 from parse.

:- import search_module/6 from consult.

:- import
	getenv/2,
	stat_set_flag/2,
	slash/1
   from machine.

:- import
	flora_dump_incomplete_tables/1,
	flora_dump_incomplete_tables/2,
	flora_dump_incomplete_tables_after_exception/1,
	flora_dump_incomplete_tables_after_exception/2,
	flora_dump_tables/2,
	flora_dump_tables/4
   from flrtabledump.

:- dynamic hide_this_show(_,_).
%%:- index(hide_this_show/2,trie). % this triggers an error-check in a newer XSB

:- export
	FLBOOTSTRAP/0,
	'_#flmakesetup'/0,
	unstrap_flora/0,
	FLQUERYCMD/5,
	flora_shell/0,
	ergo_shell/0,
	'\\flimport'/1,
	'\\compile'/1,
	'\\compileadd'/1,
	'\\load'/1,
	'\\add'/1,
        '\\save'/1,
	'\\isloaded'/1.

:- export
	'\\tabledump'/2,
	'\\tabledump'/3,
	'\\tabledump'/4,
	'\\dump_incomplete_tables'/1,
	'\\dump_incomplete_tables'/2,
	'\\dump_incomplete_tables_after_exception'/1,
	'\\dump_incomplete_tables_after_exception'/2,
	'\\set_dump_incomplete_tables_on_exception'/0.

/*****************************************************************************/

?- search_module(flora2,Dir,_,_,_,_), %% Flora or XSB pacckages dir
   slash(S),
   (search_module(flrcompiler,FlrDir,_,_,_,_)
   ->  FloraDir = FlrDir
   ;
       atom_concat(Dir,S,Dir1),
       atom_concat(Dir1,flora2,FloraDir),
       asserta(library_directory(FloraDir))
   ),
   asserta(flora_configuration(installdir,FloraDir)),
   flora_concat_atoms([FloraDir,S,'.flora_buildinfo.P'],FloraBuildInfoFile),
   load_dyn(FloraBuildInfoFile),
   %% must be after load_dyn(FloraBuildInfoFile)!
   asserta(flora_configuration(installdir,FloraDir)).

'_#flmakesetup' :- FLBOOTSTRAP.

#if exists("hooks/flrboot.P") && exists("hooks/ergo.switch")
#include "hooks/flrboot.P"
#else
ergo_shell :- shell_internal.
FLBOOTSTRAP :- bootstrap_internal.
FLBOOTSTRAP.
#endif

#if exists("opt/optcompile.P") && exists("hooks/ergo.switch")
?- flora_configuration(installdir,FloraDir),
    flora_slash(S),
    flora_concat_atoms([FloraDir,S,'opt',S,'optcompile.P'],Optimizer),
    [Optimizer].
#endif

bootstrap_internal :-
	\+ flora_configuration(loaded,yes),
	flora_configuration(installdir,FloraDir),
	flora_slash(S),
	flora_concat_atoms([pkgs,S,prolog],PkgsProlog),
	flora_concat_atoms(['AT',S,prolog],ATsProlog),
	(\+ library_directory(FloraDir) -> asserta(library_directory(FloraDir))
	; true
	),
	[flrversion],
	flora_assert_directories([syslib,datatypes,lib,debugger,pkgs,'AT',PkgsProlog,ATsProlog,cc]),
	!,
	assert(flora_configuration(loaded,yes)),
	flora_concat_atoms([FloraDir,S,closure],Closure),
	flora_concat_atoms([FloraDir,S,includes],Includes),
	flora_concat_atoms([FloraDir,S,flrincludes],FlrIncludes),
	flora_concat_atoms([FloraDir,S,genincludes],GenIncludes),
	flora_concat_atoms([FloraDir,S,lib,S,include],LibIncludes),
	flora_concat_atoms([FloraDir,S,'AT',S,include],ATIncludes),
	assert(xpp_include_dir(Closure)),
	assert(xpp_include_dir(Includes)),
	assert(xpp_include_dir(FlrIncludes)),
	assert(xpp_include_dir(GenIncludes)),
	assert(xpp_include_dir(LibIncludes)),
	assert(xpp_include_dir(ATIncludes)),
	assert(flora_configuration(includedirs, [Closure,Includes,FlrIncludes,GenIncludes,LibIncludes,ATIncludes])),
	flora_set_counter(FLORA_COMPILATION_COUNTER,0), % disambiguates _# in _add
	%% *-indexing only to the level 2
	%% Deeper than 2 may be bad for HiLog and F-logic,
	%% since *-indexing can't index on prefix arguments
	flora_set_star_indexing_depth(2),
	%%flora_set_counter(FL_QUERY_PREDICATE0,0),
	[flrcommon_definitions],
	[cc_config],
	%% flrimportedcalls is used by flora_query, if called directly from XSB
	[flrimportedcalls],
	consult(flrshell),
	load_rc_file.

flora_assert_directories([]) :- !.
flora_assert_directories([H|T]) :-
	flora_slash(S),
	flora_configuration(installdir,FloraInstallDir),
	flora_concat_atoms([FloraInstallDir,S,H], Directory),
	(\+ library_directory(Directory)
	-> assert(library_directory(Directory))
	;  true
	),
	flora_assert_directories(T).

flora_set_star_indexing_depth(X) :- 
	(X > 10 -> XX = 10
	; X < 1 -> XX = 1
	; XX = X
	),
	stat_set_flag(MAXTOINDEX_FLAG,XX).

load_rc_file :-
	machine:getenv('FLORA_RC_FILE',File),
	flora_file_op(isplain,File),
	flora_file_op(readable,File),
	!,
	flora_set_counter(flora_rc_file_loaded,1),
	seeing(OldFile),
	see(File),
	flora_embedded_shell_loop,
	see(OldFile).
load_rc_file.

/*****************************************************************************/
unstrap_flora :-
	flora_configuration(includedirs,IncludeDirs),
	remove_include_dirs(IncludeDirs),
	retractall(flora_configuration(loaded,_)),
	flora_set_counter(flora_shell_loaded,0).


/*****************************************************************************/
%% do not show shell commands in trace
:- assert(hide_this_show(ergo_shell,0)),
	assert(hide_this_show(flora_shell,0)),
	assert(hide_this_show(shell_internal,0)). 


/*****************************************************************************/
flora_shell :- shell_internal.

shell_internal :-
	FLBOOTSTRAP,
	notrace,
	( flora_get_counter(flora_shell_loaded,1), !
	;
	    %% enable prompt, feedback, and flora banner
	    flora_set_banner_control(noprompt,0),
	    flora_set_banner_control(nofeedback,0),
	    flora_set_banner_control(nobanner,0),
	    flora_shell_loop
	).

/************************************************************************
  Flora import stuff

  Syntax:
      :- '\\flimport' Pred/Arity as Pred1(_,_,...) from File[.flr]>>FloraModule
  or
      :- '\\flimport' Pred/Arity as Pred1(_,_,...) from FloraModule

  Also to load into the default module FROM WITHIN Prolog:
      :- '\\load'(file).
  or
      :- '\\load'(file>>module).

  To compile (without loading) FROM WITHIN Prolog:
      :- '\\compile'(file).
  or
      :- '\\compile'(file>>module).

  To add file to an existing module without overriding FROM WITHIN Prolog:
      :- '\\add'(file).
  or
      :- '\\add'(file>>module).

  To save module to a flora file FROM WITHIN Prolog:
      :- '\\save'(file).
  or
      :- '\\save'(module>>file).
            
  To compile for addition to an existing module without overriding
  FROM WITHIN Prolog:
      :- '\\compileadd'(file).
  or
      :- '\\compileadd'(file>>module).

************************************************************************/

:- op(1170,fx,('\\flimport')).

%% The other operators, '>>' and 'from', are already defined in Prolog

%% Taking care of the old FLORA-2's definition of the (as) operator
'\\flimport'(from(as(What,AsWhat),FileMod)) :-
	!,
	process_import_statement(What,AsWhat,FileMod).
%% Taking care of XSB's definition of the (as) operator
'\\flimport'(as(What,from(AsWhat,FileMod))) :-
	!,
	process_import_statement(What,AsWhat,FileMod).
'\\flimport'(X) :- flora_abort(['Invalid _flimport syntax: ', X],
			      FLORA_ABORT_NOTRACE).

process_import_statement(What,AsWhat,FileMod) :-
	(atom(FileMod)  % in this case FileMod is a module name
	-> ('\\isloaded'(FileMod)
	   -> flora_import_predicate(What,AsWhat,_,FileMod)
	   ;  flora_abort(['Trying to import hilog predicate ', What,
			   ' from a nonloaded FLORA-2 module ', FileMod],
			  FLORA_ABORT_NOTRACE)
	   )
	; FileMod = File>>Module 
	-> flora_import_predicate(What,AsWhat,File,Module)
	).


'\\tabledump'(File,Goal)   :- flora_dump_tables(File,Goal).
'\\tabledump'(File,Goal,DisplOpt) :-
	flora_dump_tables(File,Goal,DisplOpt,hide).
%% HideOpt: hide/show
'\\tabledump'(File,Goal,DisplOpt,HideOpt) :-
    	flora_dump_tables(File,Goal,DisplOpt,HideOpt).
'\\dump_incomplete_tables'(File) :- flora_dump_incomplete_tables(File).
%% HideOpt: hide/show
'\\dump_incomplete_tables'(File,HideOpt) :-
    	flora_dump_incomplete_tables(File,HideOpt).
%% print incomplete tables dumped by an exception
'\\dump_incomplete_tables_after_exception'(File) :-
    	flora_dump_incomplete_tables_after_exception(File).
%% HideOpt: hide/show
'\\dump_incomplete_tables_after_exception'(File,HideOpt) :-
    	flora_dump_incomplete_tables_after_exception(File,HideOpt).
'\\set_dump_incomplete_tables_on_exception' :-
    	set_prolog_flag(exception_pre_action,print_incomplete_tables).

/*************************************************************************
  
  \save(+ModuleName,+FlrFile)
  \save(+FlrFile)
   
  Purpose: -save Module into FlrFile
           -shell command
           -if ModuleName is omitted, main by defaut	   
  Comments: none
	   
*************************************************************************/

FL_SAVE(Module>>File) :- !, flora_save_module_util(Module,File).
FL_SAVE(File) :- flora_save_module_util(File).


FL_COMPILE(File>>Module) :- !, flora_compile_util(File,Module).
FL_COMPILE(File) :- flora_compile_util(File).


%% Compile for adding to module
FL_COMPILE_ADD(File>>Module) :- !, flora_compile_add(File,Module).
FL_COMPILE_ADD(File) :- flora_compile_add(File).

%% \load/\add are neded only so that we could call them from prolog
FL_LOAD(File>>Module) :- !, FLLIBLOAD([File>>Module],FL_SHELL_FICTITIOUS_FILENAME,FLORA_DEFAULT_WORKSPACE,[external,unknown]).
FL_LOAD(File) :-FLLIBLOAD([File],FL_SHELL_FICTITIOUS_FILENAME,FLORA_DEFAULT_WORKSPACE,[external,unknown]). 
FL_ADD(File>>Module) :- !, FLLIBADD([File>>Module],FL_SHELL_FICTITIOUS_FILENAME,FLORA_DEFAULT_WORKSPACE,[external,unknown]).
FL_ADD(File) :- FLLIBADD([File],FL_SHELL_FICTITIOUS_FILENAME,FLORA_DEFAULT_WORKSPACE,[external,unknown]).

%% tells if ModuleName is loaded
'\\isloaded'(ModuleName) :- 
	flora_user_module_registry(ModuleName).


/***************************************************************************/
%% Some utilities that must be duplicated here because they can't be imported

remove_include_dirs([]).
remove_include_dirs([H|T]) :-
	(retract(xpp_include_dir(H)) ; true),
	remove_include_dirs(T).


/************************************************************************
    FLQUERYCMD(+String,+Vars,-Status,-XWamState,-Exception)

   Execute a query specified in String.

   String: A query string
   Vars:   A list of the form [Name1=Var1, Name2=Var2,...].
           Name is a name of a variable mentioned in String, for instance, 
	   '?X' (note: must be quoted, since it is an atom).
	   Var is a variable where you want the binding for the variable 
	   Name in String to be returned. For instance, 
	   if String is 'p(?X,?Y).'
	   Vars can be ['?X' = ?Xyz, '?Y' = ?Qpr]
	   Then ?Xyz will be bound to the value of ?X in p(?X,?Y) after
	   the execution and ?Qpr will be bound to the value of ?Y in p(?X,?Y).
   Status: indicates the status of compilation of the command in String.
   XWamState: if =:= 0, the answer is true; else undefined
   Exception: is a possible exception during the runtime execution 
              of the command in String.
*************************************************************************/
FLQUERYCMD(String,Vars,Status,XWamState,Exception) :-
	flora_call_string_command(String,Vars,Status,XWamState,Exception).
