/* File:      flroperator.P -- Flora operator definitions
**
** Author(s): Guizhen Yang
**
** Contact:   flora-users@lists.sourceforge.net
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2013.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**      http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**
*/


:- compiler_options([xpp_on]).


#include "flora_terms.flh"


flora_op(1700,xfx,FL_IMPLYOP).
flora_op(1700,fx,FL_IMPLYOP).
flora_op(1700,fx,FL_QUERYOP).
flora_op(1700,fx,FL_LATENT_QUERYOP).

flora_op(1600,xfx,FL_BAR).
flora_op(1600,fx,FL_INDEX_INTERNAL).
flora_op(1600,fx,FL_PROLOG_INTERNAL).
flora_op(1600,fx,FL_TABLE_INTERNAL).
flora_op(1600,fx,FL_USESENSOR).
flora_op(1600,fx,FL_USEUDF).
flora_op(1300,xfx,FL_AS). /* specifies tabling type */
%%flora_op(1600,fx,FL_EXPORT).
flora_op(1600,fx,FL_EXPORT_INTERNAL).
flora_op(1600,fx,FL_IMPORTMODULE).
flora_op(1600,fx,FL_PREFIXDEF).
flora_op(1600,fx,FL_LOCALPREFIXDEF).
flora_op(1300,fx,FL_UPDATABLE).
flora_op(1600,fx,FL_CMPOPT).
flora_op(1600,fx,FL_IGNOREDEP).
%% op to cancel warnings about symbol context
flora_op(1600,fx,FL_SYMBOL_CONTEXT).

flora_op(1500,xfx,FL_FROM).
flora_op(1500,xfy,FL_OR_CONNECTIVE).

flora_op(1400,xfy,FL_AND_CONNECTIVE).

flora_op(1300,fy,FL_IF_INTERNAL).
flora_op(1300,xfy,FL_THEN_INTERNAL).
flora_op(1300,xfy,FL_ELSE_INTERNAL).

flora_op(1300,xfy,FL_LEFTNAFIMPLY).  % alternative if-then: uses NAF
flora_op(1300,xfy,FL_RIGHTNAFIMPLY). % alternative if-then: uses NAF
flora_op(1300,xfy,FL_LEFTNEGIMPLY).  % alternative if-then: uses NEG
flora_op(1300,xfy,FL_RIGHTNEGIMPLY). % alternative if-then: uses NEG

/*
flora_op(1300,fy,FL_WHILE).
flora_op(1300,fy,FL_DO).       % do... until...
flora_op(1300,xfy,FL_DO).      % while... do...  or unless ... do...
flora_op(1300,fy,FL_LOOP).     % loop... until...
flora_op(1300,xfy,FL_LOOP).    % while... loop...
flora_op(1300,xfy,FL_UNTIL).
flora_op(1300,fy,FL_UNLESS).
*/

flora_op(1300,fy,FL_WHILE_INTERNAL).
flora_op(1300,fy,FL_DO_INTERNAL).       % do... until...
flora_op(1300,xfy,FL_DO_INTERNAL).      % while... do...  or unless ... do...
flora_op(1300,fy,FL_LOOP_INTERNAL).     % loop... until...
flora_op(1300,xfy,FL_LOOP_INTERNAL).    % while... loop...
flora_op(1300,xfy,FL_UNTIL_INTERNAL).
flora_op(1300,fy,FL_UNLESS_INTERNAL).

%% These are higher than FL_RULELOGNAF, FL_NEG, etc., so that  neg a ~ neg b
%% would be interpreted as neg(a) ~ neg(b).
flora_op(1250,xfx,FL_UNIVEQFORM).      %  ~
flora_op(1250,xfx,FL_NOTUNIVEQFORM).   %  \~, !~

%% These are used for quantification. ^ separates variables from literals
%% such choice of priorities composes
%%      aaaa, exists a^b^c^(p,o),q,r 
%% as
%%      aaaa, exists(^a,^(b,^(c,(p, o)))), q, r
%% and
%%      aaaa, not exists a^b^c^(p,o),q,r
%% as
%%      aaaa, not(exists(^(a,^(b,^(c,(p, o))))), q, r
flora_op(1200,xfy,FL_QUANTVARCONNECTOR).

flora_op(1200,fy,FL_RULELOGNAF).
flora_op(1200,fy,FL_PLGNAF).
flora_op(1200,fy,FL_NEG).

flora_op(1200,fy,FL_POSSIBLE).
flora_op(1200,fy,FL_IMPOSSIBLE).


%% Prolog ->
flora_op(1100,xfx,FL_PROLOG_IFTHEN).

flora_op(1100,xfx,FL_MVDARROW).
flora_op(1100,xfx,FL_ALLINARROW).
flora_op(1100,xfx,FL_TOLISTARROW).
flora_op(1100,xfx,FL_MVDSIGARROW).
flora_op(1100,xfx,FL_INMVDARROW).
flora_op(1100,xfx,FL_INALLINARROW).
flora_op(1100,xfx,FL_INTOLISTARROW).
flora_op(1100,xfx,FL_INMVDSIGARR).
flora_op(1100,fx,FL_BOOLSIGARR).
flora_op(1100,fx,FL_INBOOLSIGARR).
flora_op(1100,fx,FL_TRANSIGARR).
flora_op(1100,fx,FL_INTRANSIGARR).
%%flora_op(1100,fx,FL_TRAN).

%% Keep these below FL_RULELOGNAF, FL_NEG, FL_PLGNAF, etc.
%% Otherwise, \+ ?X=?Y would be treated as \+(?X) = ?Y.
flora_op(1000,xfx,FL_UNIVEQ).       % =
flora_op(1000,xfx,FL_UNIVNOTEQ).    % \=
flora_op(1000,xfx,FL_C_UNEQUAL).    % !=
flora_op(1000,xfx,FL_TRYEQ).        % ?=
flora_op(1000,xfx,FL_EQ).           % ==
flora_op(1000,xfx,FL_NOTEQ).        % \==
flora_op(1000,xfx,FL_C_NOTSAME).    % !==

flora_op(1000,xfx,FL_ORDERLT).
flora_op(1000,xfx,FL_ORDEREQLT).
flora_op(1000,xfx,FL_ORDERGT).
flora_op(1000,xfx,FL_ORDEREQGT).
flora_op(1000,xfx,FL_METAUNIV).
flora_op(1000,xfx,FL_OBJEQL).
flora_op(1000,xfx,FL_IS_INTERNAL).
flora_op(1000,xfx,FL_MATHEQ).
flora_op(1000,xfx,FL_MATHNOTEQ).
flora_op(1000,xfx,FL_LT).
flora_op(1000,xfx,FL_EQLT).
flora_op(1000,xfx,FL_GT).
flora_op(1000,xfx,FL_EQGT).

%% ':=' for user defined functions; priority should be > comma'ss
flora_op(1410,xfy,FL_UDFEQ).
%% 'if' in equality for user defined functions; priority should be > comma'ss
%%flora_op(1420,xfy,FL_UDFIF).
%% 'function' in defs of user defined funcs; priority should be > comma's
%%flora_op(1730,fx,FL_UDFF).
flora_op(1420,xfy,FL_UDFIF_INTERNAL).
flora_op(1730,fx,FL_UDFF).

%% udf, sensor, prlg symbol_context directives; priority should be < comma's
flora_op(1390,fx,FL_SYMBOL_CONTEXT_UDF).
flora_op(1390,fx,FL_SYMBOL_CONTEXT_SENSOR).
flora_op(1390,fx,FL_SYMBOL_CONTEXT_PROLOG).
%% Do not rewrite function into predicate inside this operator
%%flora_op(1000,fx,FL_UDFCANCEL).

flora_op(900,xfx,FL_RIGHTTO).
flora_op(900,xfx,FL_LEFTTO).

flora_op(800,yfx,FL_PLUS).
flora_op(800,yfx,FL_MINUS).
flora_op(800,yfx,FL_SYMOR).

flora_op(700,yfx,FL_STAR).
flora_op(700,yfx,FL_DBLSTAR).
flora_op(700,yfx,FL_SLASH).
flora_op(700,yfx,FL_MOD_INTERNAL).
flora_op(700,yfx,FL_SYMAND).

flora_op(600,fy,FL_PLUS).
flora_op(600,fy,FL_MINUS).
flora_op(600,fx,FL_INMETH).

flora_op(500,xfx,FL_AT).

flora_op(400,yfx,FL_ISA).
flora_op(400,yfx,FL_SUB).

flora_op(300,yfx,FL_MVD).
flora_op(300,yfx,FL_INHERIMVD).

%%flora_op(200,fy,FL_AT).          %% '@' for @{@defeasible/strict} - abandoned
%%flora_op(200,fy,FL_RULEID_SYM).  %% '!' for @{!foo,moo} - abandoned

%% Don't declare FL_RULEID_OP as an operator!
%% Or else @!{abc} (cde). will not be composed right!
%%flora_op(200,fy,FL_RULEID_OP).   %% '@!' in @!ruleid

%% FL_DATATYPE_CONNECTOR should have higher priority than FL_CURIOP,
%% but less-or-equal the priority of FL_MVD and FL_INHERIMVD.
%% Otherwise, things like
%% ?x="22:22:33"^^_t._second@_basetype, ?x="22:22:33"^^xsd#time
%% ?x="22:22:33"^^xsd#time._minute@_basetype
%% won't be parsed correctly.
flora_op(300,yfx,FL_DATATYPE_CONNECTOR). %% ^^-op
flora_op(250,xfy,FL_CURIOP).	         %% #-operator for prefixes


%%flora_op(250,fx,FL_TRAN).


/***************************************************************************
   Infix operators that must be immediately enclosed in parentheses
***************************************************************************/
flora_parenthesized_op(FL_CURIOP).

/***************************************************************************
/****************************************************************************
  flora_opdef(+Precedence,+Associativity,+Op)
****************************************************************************/
flora_opdef(X,Y,Z) :-
	flora_op(X,Y,Z).

flora_opdef(X,Y,Z) :-
	( flora_get_counter(flora_shell_mode,1) ->
	    flora_shop(X,Y,Z)
	;
	  flora_dynop(X,Y,Z)
	).


/****************************************************************************
  flora_conflict_operator(+Precedence,+Associativity,+Op)
****************************************************************************/
flora_conflict_operator(P,A,Op) :-
	flora_op(_P,_A,Op),
	(P \= _P; A \= _A).


/****************************************************************************
  flora_reset_operator/0
****************************************************************************/
flora_reset_operator :- retractall(flora_dynop(_,_,_)).


/****************************************************************************
  flora_define_operator(+Precedence,+Associativity,+Op)
****************************************************************************/
flora_define_operator(P,A,Op) :-
	( flora_op(P,A,Op) ->
	    true
	;
	  assert(flora_dynop(P,A,Op))
	).


/****************************************************************************
  flora_shreset_operator/0
****************************************************************************/
flora_shreset_operator :- retractall(flora_shop(_,_,_)).


/****************************************************************************
  flora_shdefine_operator(+Precedence,+Associativity,+Op)
****************************************************************************/
flora_shdefine_operator(P,A,Op) :-
	( flora_op(P,A,Op) -> true
	;
	    assert(flora_shop(P,A,Op))
	).
