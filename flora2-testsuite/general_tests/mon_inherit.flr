
/* This demo shows various cases of monotonic inheritance */


a[|b  {1..1}=> c|],   a[bs   => e].
a[|b1  {1..1}=> c1,  bs1 => e1|].
aa[|b  {1..1}=> d,   bs1 => d2|].
ssss[|bbb{1..1}=>(), qqq=>()|].

aaa::a.
aa:aaa.
s1:ssss.
s2::ssss.

// b c, b1 c1
%tst1 :- 
	writeln('tst1: ')@\plg(),
	aa[?T{1..1}=>?X],
	numbervars(?X)@\plg(num_vars),
	write(?T)@\plg(), write('  ')@\plg(), writeln(?X)@\plg(), fail.
%tst1 :- true.

// b c, b1 c1
%tst2 :- 
	writeln('tst2: ')@\plg(),
	aaa[|?U{1..1}=>?Y|],
	numbervars(?Y)@\plg(num_vars),
	write(?U)@\plg(), write('  ')@\plg(), writeln(?Y)@\plg(), fail.
%tst2 :- true.

// bs1 e1
%tst3 :- 
	writeln('tst3: ')@\plg(),
	aa[?SM=>?V], true{naf(aa[?SM{1..1}=>?V])},
	\isatom(?SM),
	numbervars(?V)@\plg(num_vars),
	write(?SM)@\plg(), write('  ')@\plg(), writeln(?V)@\plg(), fail.
%tst3 :- true.

%tst4 :- write('tst4: ')@\plg(),
	 if s1[bbb{1..1}=>(), qqq=>()]
         then writeln(ok)@\plg()
         else writeln(fail)@\plg().

%tst5 :- write('tst5: ')@\plg(),
	 if s2[|bbb{1..1}=>(), qqq=>()|]
         then writeln(ok)@\plg()
         else writeln(fail)@\plg().

%pretest :- %tst1, %tst2, %tst3, %tst4, %tst5.

%test :- tell(temp)@\plg(),
	Method[mustDefine(on)]@\sys,
	%pretest,
	Method[mustDefine(off)]@\sys,
	%pretest,
	told@\plg().
