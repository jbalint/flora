
?- p2h{?PT,f(a,b)}, insert{foo(?PT,g(h))}.
?- p2h{?PT,bar(f(a,b))}, assert(?PT)@_plg().
?- p2h{?PT,bar(${f(a,b)[b->c]})}, assert(?PT)@_plg().

%tst1 :- write('tst1 ')@_plg(),
	if foo(f(?_X,?_Y),g(?_H)) then writeln('Something wrong')@_plg()
	   else writeln('foo(f(?X,?Y),g(?H)) failed, as expected')@_plg().
    
%tst2 :- write('tst2 ')@_plg,
	if bar(f(?X,?Y))@_plgall
	   then writeln(('?X'=?X,'?Y'=?Y))@_plgall()
	   else writeln('something wrong')@_plg().

%tst3 :- write('tst3 ')@_plg(),
	if bar(f(?_X,?_Y))@_plg()
	   then writeln('something wrong')@_plg()
	   else writeln('failed, as expected')@_plg().

// Testing argument position
?- p2h{?PT,g(f(a),f(?Y,k))}, insert{poo(?PT,d(h))}.

%tst4:- write('tst4 ')@_plg(),
	if poo(g(f(?X),f(?Y,k))@_plgall(),d(?W))
       then (
        if var(?Y) then ?YY='_',
	writeln(('?X'=?X,'?Y'=?YY,'?W'=?W))@_plgall()
       ) else writeln('something wrong')@_plg().

%tst5 :- write('tst5 ')@_plg(),
	if poo(g(f(?_X),f(?_Y,k))@_plg(),d(?_W))
	   then writeln('something wrong')@_plg()
	   else writeln('failed, as expected')@_plg().

%tst6 :- write('tst6 ')@_plg(),
	if foo(f(?_X,?_Y)@_plg(),g(?_H))
	   then writeln('foo(f(?X,?Y)@_plg(),g(?H)) succeeded, as expected')@_plg()
	   else writeln('something wrong')@_plg().
%tst7 :- write('tst7 ')@_plg(),
	if foo(f(?_X,?_Y)@_plgall(),g(?_H))
	   then writeln('foo(f(?X,?Y)@_plgall(),g(?H)) succeeded, as expected')@_plg()
	   else writeln('something wrong')@_plg().

// Testing meta
// Here we assert metapred(${a[b->c]}) as prolog
%tst8 :- write('tst8 ')@_plg(),
	insert{a[b->c], metapred(${a[b->c]})}, 
	assert(metapred(${a[b->c]}))@_plgall(),
	metapred(?X)@_plgall(),
	if ?X
        then writeln('metapred(?X)@_plgall() succeeded, as expected')@_plg()
        else  writeln('something wrong')@_plg().

// Here we assert metapred(${a[b->c]}) as prolog
%tst9 :- write('tst9 ')@_plg(),
	insert{a[b->c], metapred(${a[b->c]})}, 
	assert(metapred(${a[b->c]}))@_plgall(),
	metapred(?X)@_plg(),
	if ?X
        then writeln('metapred(?X)@_plg() succeeded, as expected')@_plg()
        else  writeln('something wrong')@_plg().

// Here we assert metapred(${a[b->c]}) as hilog
%tst10 :- write('tst10 ')@_plg(),
	insert{a[b->c], metapred(${a[b->c]})}, 
	 assert(metapred(${a[b->c]}))@_plg(),
	 metapred(?X),
	 if ?X
         then writeln('metapred(?X) succeeded, as expected')@_plg()
         else  writeln('something wrong')@_plg().


// Prolog predicates with embedded Flora terms (not meta)
%tst11 :- write('tst11 ')@_plg(),
	 ?L = collectset{?T| bar(${f(a,?X)[b->?Y]})@_plgall(), ?T=(?X,?Y)},
	 if ?L \= []
         then (sort(?L,?SortedL)@_plg(), writeln(?SortedL)@_plgall())
         else writeln('something wrong')@_plg().

%tst12 :- write('tst12 ')@_plg(),
	?L = collectset{?T| a[b->?Y], bar(f(a,?X))@_plgall(), ?T=(?X,?Y)},
	if ?L \= []
         then (sort(?L,?SortedL)@_plg(), writeln(?SortedL)@_plgall())
         else writeln('something wrong')@_plg().

:- setsemantics{equality(basic)}.
c :=: ?X :- ?X=x.y.
x[y->5].

%tst13 :- write('tst13 ')@_plg(),
	 if (a[b->x.y], bar(f(a,?X))@_plgall() )
         then writeln('bar(f(a,?X))@_plgall() ?X'=?X)@_plgall()
         else writeln('something wrong')@_plg().

%tst14 :- write('tst14 ')@_plg(),
	 p2h{?PT1, bar(f(${a[e.e->f.f[q->r.r]]},a))}, assert(?PT1)@_plg(),
	 if bar(f(${a[e.e->f.f[q->r.r]]},?X))@_plgall()
         then writeln('bar(f(${a[e.e->f.f[q->r.r]]},?X)@_plgall() ?X'=?X)@_plgall()
         else writeln('something wrong')@_plg().

%tst15 :- write('tst15 ')@_plg(),
	if bar(f(a[b->x.y],?_X))@_plg()
         then writeln('something wrong')@_plg()
         else writeln('bar(f(a[b->x.y],?X))@_plg() failed, as expected')@_plgall().

%pretest :- %tst1, %tst2, %tst3, %tst4, %tst5,
	   %tst6, %tst7, %tst8, %tst9, %tst10,
	   %tst11, %tst12, %tst13, %tst14, %tst15.

%test :- tell(temp)@_plg(),
	Method[%mustDefine(on)]@_sys,
	%pretest,
	Method[%mustDefine(off)]@_sys,
	%pretest,
	told@_plg().
