/* This auxiliary file is used because add1.flr and add2.flr should be loaded and added into same module.*/

%tst1 :- a[b->?X]@foo, 
	 write('tst1: ')@_plg(),	 
	 writeln(?X)@_plg(),
	 fail.

%tst1 :- true.

%tst2 :- ?_[?Y->f]@foo,
	 write('tst2: ')@_plg(),	 
	 writeln(?Y)@_plg(),
	 fail.

%tst2 :- true.

%tst3 :- p(?Z)@foo,
	 write('tst3: ')@_plg(),	 
	 writeln(?Z)@_plg(),
	 fail.

%tst3 :- true.

%tst4 :- ?N = count{?O1|?O1[name->?_name1, spouse ->?_O2[name->?_name2]]@foo},
	 write('tst4: ')@_plg(),	 
	 writeln(?N)@_plg(),
	 //?XX=setof{?O1|?O1[name->?_name1, spouse ->?_O2[name->?_name2]]@foo},
	 //writeln(tst4=?XX)@_plg,
	 true.

%tst5 :- ?O1[name->?Name1, spouse ->?O2[name->?Name2]]@foo,
	_isskolem(?O1), _isskolem(?O2),
	 write('tst5: ')@_plg(),
	 //flora_write_goal(?O1)@_plg(flrdecode),
	 write('  ')@_plg(),
	 write(?Name1)@_plg(),
	 write('  ')@_plg(),
	 //flora_write_goal(?O2)@_plg(flrdecode),
	 write('  ')@_plg(),
	 write(?Name2)@_plg(),
	 nl@_plg(),
	 fail.

%tst5 :- true.

%pretest :- %tst1, %tst2, %tst3, %tst4, %tst5.

%pretest1 :- writeln('[add1>>foo],[+add2>>foo].')@_plg(), 
	     [add1>>foo],[+add2>>foo],
	     %pretest.

%pretest2 :- writeln('[add1>>foo], [+add2>>foo], [+add2>>foo], _compileadd add2>>foo, _add add2>>foo.')@_plg, 
	     [add1>>foo], [+add2>>foo], [+add2>>foo],
	     _compileadd(add2>>foo), _add(add2>>foo),
	     %pretest.

%test :- tell(temp)@_plg, 
        Method[mustDefine(on)]@_sys,
	%pretest1, %pretest2,
        Method[mustDefine(off)]@_sys,
	%pretest1, %pretest2,
	told@_plg.	     



