
:- importmodule _typecheck.

?- insert{ o[f(a),g(b),h(a,b), h(a,a), h(a,a,a)],
       cc[*h(a,d)],
	o[=>f(aaa)],
	o:c,
	cc::c,
	c[*=>h(aaa,bbb)],
	c[*=>h(fff,bbb,ccc)],
	a:aaa,
	b:bbb
      }.

a:c[b->e, foo->e].
c[b*=>d].

q[foo->bar].
q:qq.

a[card->{1,2}, card2->1, card3->{}].
c[card {0:1} *=> _integer, card2 {2:*}*=>_integer, card3{1:1}=>_integer].
// this should generate a type error! Wrong without subsumptive tabling!
c[card *-> {1,2}].

%test1 :- Type[check(?[?_M],?_Res)]@_typecheck,
	flora_decode_oid_as_atom(?_Res,?Atm)@_plg(flrdecode),
	write('Test1: ')@_plg,
	writeln(?Atm)@_plg,
	fail.
%test1 :- true.


%test2 :- Type[check(?[=>?_M],?_Res)]@_typecheck,
	flora_decode_oid_as_atom(?_Res,?Atm)@_plg(flrdecode),
	write('Test2: ')@_plg,
	writeln(?Atm)@_plg,
	fail.
%test2 :- true.

%test3 :- Type[check(?[*=>?_M],?_Res)]@_typecheck,
	flora_decode_oid_as_atom(?_Res,?Atm)@_plg(flrdecode),
	write('Test3: ')@_plg,
	writeln(?Atm)@_plg,
	fail.
%test3 :- true.

%test4 :- Type[check(?[?->?],?_Res)]@_typecheck,
	flora_decode_oid_as_atom(?_Res,?_Atm)@_plg(flrdecode),
	write('Test4: ')@_plg,
	writeln(?_Atm)@_plg,
	fail.
%test4 :- true.

%test5 :- Type[check(?[?=>?],?_Res)]@_typecheck,
	flora_decode_oid_as_atom(?_Res,?Atm)@_plg(flrdecode),
	write('Test5: ')@_plg,
	writeln(?Atm)@_plg,
	fail.
%test5 :- true.

%test6 :- Type[check(qq[?->?],?_Res)]@_typecheck,
	flora_decode_oid_as_atom(?_Res,?_Atm)@_plg(flrdecode),
	write('Test6: ')@_plg,
	writeln(?_Atm)@_plg,
	fail.
%test6 :- true.

%test7 :- Cardinality[check(?_Obj[card=>?])]@_typecheck,
	write('Test7: ')@_plg,
	writeln(?_Obj)@_plg,
	fail.
%test7 :- true.

%test8 :- Cardinality[check(?_Obj[card*=>?])]@_typecheck,
	write('Test8: ')@_plg,
	writeln(?_Obj)@_plg,
	fail.
%test8 :- true.

// here we have to reify the arg to check, since we are not
// explicitly using @_typecheck
%test9 :- Cardinality[check(${?_Obj[card2 {?_L:?_H}=>?]})],
	write('Test9: ')@_plg,
	writeln(?_Obj+?_L+?_H)@_plg,
	fail.
%test9 :- true.

%test10 :- Cardinality[check(?_Obj[card3 {?_L:?_H}=>?])]@_typecheck,
	write('Test10: ')@_plg,
	writeln(?_Obj+?_L+?_H)@_plg,
	fail.
%test10 :- true.


// we have to reify the arg to check, since we are not
// explicitly using @_typecheck
%test11 :- Cardinality[check(${?_Obj[card {?_L:?_H}=>?]})],
	write('Test11: ')@_plg,
	writeln(?_Obj+?_L+?_H)@_plg,
	fail.
%test11 :- true.

%pretest :- %test1, %test2 and %test3 and %test4,
	    %test5, %test6, %test7, %test8, %test9,
	    %test10, %test11.

%pretest :- writeln('\n')@_plg.

%test :- tell(temp)@_plg(),
	Method[mustDefine(on)]@_sys,
	%pretest,
	Method[mustDefine(off)]@_sys,
	%pretest,
	told@_prolog.
