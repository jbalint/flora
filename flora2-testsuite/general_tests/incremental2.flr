
:- setsemantics{tabling(nonincremental)}.

a[b->d].
p(d).

init :- (a[b->c] or true), (p(c) or true).

p(?X) :- a[b->?X].

%tst1 :- 
	write('test1=')@_plg,
	t_insert{a[b->c]},
	refresh{p(c)},
	if (a[b->c], p(c)) then writeln(yes)@_plg
        else writeln(no)@_plg.

%tst2 :- 
	write('test2=')@_plg,
	delete{a[b->c]},
	//if (a[b->c] or p(c)) then writeln(no)@_plg
        //else writeln(yes)@_plg.
	((a[b->c] or p(c)) -->> writeln(no)@_plg
        ; writeln(yes)@_plg
        ).

%change :- setsemantics{tabling(incremental)}.
%cleanup :- setsemantics{tabling(nonincremental)}.


%tst3 :- 
	write('test3=')@_plg,
	t_insert{a[b->c]},
	if (a[b->c], p(c)) then writeln(yes)@_plg
        else writeln(no)@_plg.

%tst4 :- 
	write('test4=')@_plg,
	delete{a[b->c]},
	if (a[b->c] or p(c)) then writeln(no)@_plg
        else writeln(yes)@_plg.

%pretest :- init, %tst1, %tst2, %change, %tst3, %tst4, %cleanup.


%test :- tell(temp)@_plg(),
	Method[%mustDefine(on)]@_sys,
	%pretest,
	Method[%mustDefine(off)]@_sys,
	%pretest,
	told@_prolog.
