?- Method[mustDefine(on)]@_sys.

:- setsemantics{tabling(incremental)}.

:- use_argumentation_theory.

@!{aaa} @{bbb} @@{defeasible} p(_@!) :- true.

@!{'111'} @{bbb} @@{strict} q(_@!) :- true.
@!{'222'} @{bbb} @@{defeasible} r(_@!).

// Answers: test1: r('222') q('111') p(aaa) 
%tst1 :- write('test1: ')@_plg,
	?P(?A),
	write(?P(?A))@_io,
	write(' ')@_plg,
	fail.
%tst1 :- nl@_plg.

// Answers: test2: ${r(?A)} :- true ${p(?A)} :- true 
%tst2 :- write('test2: ')@_plg,
	clause{@@{defeasible}  ?H@main,?B},
	flora_decode_goal_as_atom_substitute_vars((?H:-?B),?Atm)@_plg(flrdecode),
	write(?Atm)@_plg,
	write(' ')@_plg,
	fail.
%tst2 :- nl@_plg.

// Answers: test3: ${q(?A)} :- true 
%tst3 :- write('test3: ')@_plg,
	clause{@@{strict}  ?H@main,?B},
	flora_decode_goal_as_atom_substitute_vars((?H:-?B),?Atm)@_plg(flrdecode),
	write(?Atm)@_plg,
	write(' ')@_plg,
	fail.
%tst3 :- nl@_plg.

// Answers: test4: r('222') 
%tst4 :- write('test4: ')@_plg,
	disable{aaa},
	disable{'111',_@F,main},
	\+isenabled{aaa},
	isdisabled{aaa,_@F,main},
	isdisabled{'111'},
	?P(?A),
	write(?P(?A))@_io,
	write(' ')@_plg,
	fail.
%tst4 :- nl@_plg.

// Answers:  test5: p(aaa) r('222') 
%tst5 :- write('test5: ')@_plg,
	enable{aaa,_@F,main},
	isenabled{aaa,_@F,main},
	\+isdisabled{aaa,_@F,main},
	isdisabled{'111',_@F,main},
	?P(?A),
	write(?P(?A))@_io,
	write(' ')@_plg,
	fail.
%tst5 :- nl@_plg.

// Answers: test6: ${q(?A)} :- true 
%tst6 :- write('test6: ')@_plg,
	makedefeasible{'111'},
	enable{'111',_@F,main},
	clause{@@{strict}  ?H@main,?B},
	isdefeasible{'111',_@F,?},
	\+isstrict{'111'},
	flora_decode_goal_as_atom_substitute_vars((?H:-?B),?Atm)@_plg(flrdecode),
	write(?Atm)@_plg,
	write(' ')@_plg,
	fail.
%tst6 :- nl@_plg.

// Answers: test7: r('222') p(aaa) 
%tst7 :- write('test7: ')@_plg,
	insert{@{ccc} neg q(?)},
	?P(?A),
	write(?P(?A))@_io,
	write(' ')@_plg,
	fail.
%tst7 :- nl@_plg.

// Answers: test8: q('111') r('222') p(aaa) 
%tst8 :- write('test8: ')@_plg,
	makestrict{'111',_@F,main},
	?P(?A),
	write(?P(?A))@_io,
	write(' ')@_plg,
	fail.
%tst8 :- nl@_plg.

%pretest :- %tst1, %tst2, %tst3, %tst4, %tst5, %tst6,
	// shis should be removed after XSB incr bug 871 is fixed
	abolish_all_tables,
	%tst7, %tst8.
%test :- tell(temp)@_plg(),
	%pretest,
	told@_plg().
