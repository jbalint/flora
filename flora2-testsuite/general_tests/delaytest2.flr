:- use_argumentation_theory.

@{t1(?X)} foo(?X) :- p(?X).
p(?).

_cancel(t1(aaa)).

@{t2} moo :- naf q(?_X).

q(a).

@{t3} moo2 :- naf q(?X), ?X=b.

moo3(?X) :- naf q(?X).
moo4 :- moo3(?_X).
moo5 :- moo3(?X), ?X=c.
moo6 :- moo3(?X), ?X=a.

%tst1 :- write('test1: ')@_plg,
	 if undefined{moo} then writeln(success)@_plg
	 else writeln(failure)@_plg.
%tst2 :- write('test2: ')@_plg,
	 if true{moo2} then writeln(success)@_plg
	 else writeln(failure)@_plg.
%tst3 :- write('test3: ')@_plg,
	 if undefined{moo4} then writeln(success)@_plg
	 else writeln(failure)@_plg.
%tst4 :- write('test4: ')@_plg,
	 if true{moo5} then writeln(success)@_plg
	 else writeln(failure)@_plg.

%tst5 :- write('test5: ')@_plg,
	 if false{moo6} then writeln(success)@_plg
	 else writeln(failure)@_plg.

%tst6 :- write('test6: ')@_plg,
	  if (foo(?X), _isvar(?X)) then writeln(success)@_plg
	 else writeln(failure)@_plg.


%tst7 :- write('test7: ')@_plg,
	  if (foo(?X), ?X=bbb) then writeln(success)@_plg
	 else writeln(failure)@_plg.


%tst8 :- write('test8: ')@_plg,
	  if (foo(?X), ?X=aaa) then writeln(failure)@_plg
	 else writeln(success)@_plg.


%pretest :- %tst1, %tst2, %tst3, %tst4, %tst5, %tst6, %tst7, %tst8.

%test :- tell(temp)@_plg(),
        Method[mustDefine(on)]@_sys,
        %pretest,
        Method[mustDefine(off)]@_sys,
        %pretest,
        told@_plg().
