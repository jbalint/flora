
a[b->c].
%phase1 :- insertrule{c[d->e] :- a[b->c]},
	insertrule{c[%d] :- h},
	insertrule{c[d] :- h},
	insertrule{%p(s) :- a[b->c]},
	insertrule{p(s,r) :- a[b->c]}.

%tst1 :- write('tst1: ')@_plg(), ?X[d->e], writeln(?X)@_plg().
%tst2 :- write('tst2: ')@_plg(), p(?X,?Y), writeln(?X+?Y)@_plg().
%tst3 :- write('tst3: ')@_plg(), %p(?X), writeln(?X)@_plg().

%phase2 :- deleterule{c[d->e] :- ?_X1},
	deleterule{c[%d] :- ?_X2},
	deleterule{c[d] :- ?_X3},
	deleterule{%p(s) :- ?_X4},
	deleterule{p(s,r) :- ?_X5}.

%tst4 :- write('tst4: ')@_plg(),
	if c[d->e]
        then writeln(failed)@_plg()
        else writeln(succeeded)@_plg().
%tst5 :- write('tst5: ')@_plg(),
	if c[%d]
        then writeln(failed)@_plg()
        else writeln(succeeded)@_plg().
%tst6 :- write('tst6: ')@_plg(),
	if c[d]
        then writeln(failed)@_plg()
        else writeln(succeeded)@_plg().
%tst7 :- write('tst7: ')@_plg(),
	if %p(s)
        then writeln(failed)@_plg()
        else writeln(succeeded)@_plg().
%tst8 :- write('tst8: ')@_plg(),
	if p(s,r)
        then writeln(failed)@_plg()
        else writeln(succeeded)@_plg().

%pretest :- %phase1, %tst1, %tst2, %tst3,
	   %phase2, %tst4, %tst5, %tst6, %tst7, %tst8.

%test :- tell(temp)@_plg(),
        Method[%mustDefine(on)]@_sys,
        %pretest,
        Method[%mustDefine(off)]@_sys,
        %pretest,
        told@_plg().


