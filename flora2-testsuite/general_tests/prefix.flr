


?- newmodule{foo}.
//?- tt[%silk#cccc]@foo.
//?- tt[%silk#cccc].
tt[%silk#cccc] :- true.

?- insert{tt[%silk#cccc]}.
tt[%silk#cccc(aaa)].

?- insert{tt[%silk#aaa(kkk)]@foo}.
?- insert{tt[%silk#cccc]@foo}.
rrr[%silk#www].

C[%silk#aaa(b)].
C[silk#aaa(b)].
%silk#pppp(?Y)(?X):-?X[%silk#aaa(?Y)].
%silk#rrrr(?Y)(?X):-?X[%silk#aaa(?Y)]@foo.

%silk#aaaaa(aa)(bb,cc).
bbbbbb[%silk#ccccc(ooo)(pppp)].

// the next group are just to make sure they compile.
// mod is an infix operator, and it does not compose right with the # operator.
// so we modify arrange_arguments to make sure the mis-composition is corrected.
// Also, tests that builtin identifier works right with %...#...
:- iriprefix swrlb = "http://www.w3.org/2003/11/swrlb#" .
swrlb#mod(?output):- foo(?output).
swrlb#_mod(?output):- foo(?output).
%swrlb#mod(?output):- foo(?output).
%swrlb#_mod(?output):- foo(?output).


%tst1 :- write(tst1)@\plg, write(' ')@\plg,
	 ?L= collectset{?Z| ?X[%silk#aaa(?Y)], ?Z=(?X,?Y)},
	 writeln(?L)@\plg.
%tst2 :- write(tst2)@\plg, write(' ')@\plg,
	 ?L = collectset{?Z| %silk#pppp(?y)(?x), ?Z= (?x,?y)},
	 writeln(?L)@\plg.
%tst3 :- write(tst3)@\plg, write(' ')@\plg,
	?L = setof{?Z| %silk#rrrr(?y)(?x), ?Z=(?x,?y)},
	 writeln(?L)@\plg.
%tst4 :- write(tst4)@\plg,
	 if tt[%silk#cccc]@foo then writeln(' ok')@\plg
         else writeln(' bummer')@\plg.
%tst5 :- write(tst5)@\plg, write(' ')@\plg,
	 ?L = setof{?X| rrr[%?X]},
	 writeln(?L)@\plg.
%tst6 :- write(tst6)@\plg,
	 if rrr[%silk#www] then writeln(' ok')@\plg
         else writeln(' bummer')@\plg.
%tst7 :- write(tst7)@\plg,
	 write(' ')@\plg,
	 ?L = setof{?X|tt[%?X]},
	 flora_write_oid(?L)@\plg(flrdecode),
	 nl@\plg.

%tst8 :- write(tst8)@\plg,
	 if %silk#aaaaa(aa)(bb,cc) then writeln(' ok')@\plg
         else writeln(' bummer')@\plg.
%tst9 :- write(tst9)@\plg,
	 if bbbbbb[%silk#ccccc(ooo)(pppp)] then writeln(' ok')@\plg
         else writeln(' bummer')@\plg.

%tst10 :- write(tst10)@\plg,
	  insert{mary[salary->15]},
	  mary.salary@main=?X,
	  insert{ppp(?X),%qqq(?X)},
	  if (ppp(mary.salary@main), %qqq(mary.salary@main))
          then writeln(' ok')@\plg
          else writeln(' bummer')@\plg.

%aabcde.
%fdegh.
%qprs :- %fdegh@main.

%tst11 :- write(tst11)@\plg,
	  insert{%pqwer :- %fdegh},
	  if (%aabcde,%qprs,%pqwer)
          then writeln(' ok')@\plg
          else writeln(' bummer')@\plg.

%"foo"^^bar.
"foo"^^bar.
%"http://www.w3.org/2003/11/swrlb#add"^^\iri :- %"foo"^^bar.
"http://www.w3.org/2003/11/swrlb#add"^^\iri :- "foo"^^bar.

%tst12 :- write(tst12)@\plg,
	// this insert is just to test the compiler
	insert{%"foo"^^bar,"foo"^^bar},
	insertrule{(%"http://www.w3.org/2003/11/swrlb#add"^^\iri :- %"foo"^^bar),
	("http://www.w3.org/2003/11/swrlb#add"^^\iri :- "foo"^^bar)},
	if (%"http://www.w3.org/2003/11/swrlb#add"^^\iri,
	    "http://www.w3.org/2003/11/swrlb#add"^^\iri,
	    %"http://www.w3.org/2003/11/swrlb#add"^^\iri,
	    "http://www.w3.org/2003/11/swrlb#add"^^\iri)
        then writeln(' ok')@\plg
        else writeln(' bummer')@\plg.




%pretest :- %tst1, %tst2 and %tst3 and %tst4,
	    %tst5, %tst6, %tst7, %tst8, %tst9,
	    %tst10, %tst11, %tst12.

%test :-
	tell(temp)@\plg(),
	Method[mustDefine(on)]@\sys,
	%pretest,
	Method[mustDefine(off)]@\sys,
	%pretest,
	told@\plg().

