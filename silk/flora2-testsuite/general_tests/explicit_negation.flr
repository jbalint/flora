
?- newmodule{w}.

%insert_rules1 :- insertrule{((aaa(b) :- neg bbb,c),
			     (aaa :- neg bbb,c),
			     (neg aaa :- neg bbb,c),
			     (neg aaa(b) :- neg bbb,c))@w}.

%insert_rules2 :-
	insertrule{(neg c[d] :- h)@w},
	insertrule{neg rr[d] :- rr},
	insertrule{neg e[f->?X] :- p(?X)},
	insertrule{((neg ppp(?X) :- p(?X)),
	             (neg qqq(?X) :- rrr(?X)),
		     (neg pppp :- rr))@w}.

%delete_rules :-
	deleterule{((neg c[d] :- ?_X3),
	               (neg pppp :- ?))@w,
	           (neg qqq(?) :- ?)@w}.


neg aaa(a) :- neg bbb,c.


%test1 :- %insert_rules1,
          write('test01: ')@_plg,
          refresh{aaa(?)},
          refresh{neg aaa(?)},
	  catch{(neg aaa(a) ; aaa(a)),?,fail},
	  %writeln('undefinedness check failed')@_io.
%test1 :- %writeln('undefined error caught - success')@_io.

%test2 :- write('test02: ')@_plg,
          refresh{aaa(?)},
	  insert{neg bbb,c},
	  neg aaa(a),
	  writeln(success)@_plg.

%test3 :- write('test03: ')@_plg,
          refresh{aaa@w, aaa(?)@w},
	  insert{(neg bbb,c)@w},
	  neg aaa@w,
	  neg aaa(b)@w,
	  aaa@w,
	  aaa(b)@w,
	  writeln(success)@_plg.

%test4 :- write('test04: ')@_plg,
	  delete{(neg bbb@w),c@w},
	  // these two inserts test table refresh
	  // when inserting rules with negative heads
	  insert{(neg aaa :- neg bbb,c)@w},
	  insert{(neg aaa(b) :- neg bbb,c)@w},
	  (neg aaa@w ; neg aaa(b)@w),
	  !,
	  writeln(failed)@_plg.
%test4 :- writeln(success)@_plg.

%test5 :- write('test05: ')@_plg,
          %insert_rules2,
	  insert{h@w,rr},
	  refresh{?[?]@w},
	  refresh{?[?]},
	  neg rr[d],
	  neg c[d]@w,
	  writeln(success)@_plg.

%test6 :- write('test06: ')@_plg,
	  insert{p(b),p(a)@w,rr@w},
	  neg e[?->?],
	  neg ppp(?)@w,
	  neg pppp@w, 
	  writeln(success)@_plg.

%test7 :- write('test07: ')@_plg,
           %delete_rules,
           (neg c[d]@w ; neg pppp)@w,
	   !,
	   writeln(failed)@_plg.
%test7 :- writeln(success)@_plg.

%test8 :- write('test08: ')@_plg,
           neg qqq(?)@w,
	   !,
	   writeln(failed)@_plg.
%test8 :- writeln(success)@_plg.

%test9 :- write('test09: ')@_plg,
           insert{b[neg aaa-> bbb]},
	   b[neg aaa-> bbb],
	   !,
	   writeln(success)@_plg.
%test9 :- writeln(failed)@_plg.

%test10 :- write('test10: ')@_plg,
           insert{b[neg aaa *=> bbb]},
	   b[neg aaa *=> bbb],
	   !,
	   writeln(success)@_plg.
%test10 :- writeln(failed)@_plg.

%cleanup :- delete{neg bbb,c, b[neg aaa-> bbb],  b[neg aaa *=> bbb]}.

%pretest :- %test1, %test2, %test3, %test4, %test5, %test6, %test7, %test8,
	    %test9, %test10,
            %cleanup.


%test :- tell(temp)@_plg(),
	Method[%mustDefine(on)]@_sys,
	%pretest,
	Method[%mustDefine(off)]@_sys,
	%pretest,
	told@_prolog.
