
#include "flora_exceptions.flh"

:- ignore_depchk %p(?_).

a:c[b->?X] :- d[e->?X].  
d[e->f].
d[e->g].
d[e->h].
%p(a).
r(?X) :- %p(?X).

c[p *-> q, r*->u].

?- insert{o[m->v]}, o[m->v].


%test1 :- write('tst1: ')@_plg(),
	delete{o[m->v]},
	if o[m->v]
        then writeln(failed)@_plg()
        else writeln(passed)@_plg().

%test2 :- write('tst2: ')@_plg(),
	insert{o[m->v]},
	if o[m->v]
        then writeln(passed)@_plg()
        else writeln(failed)@_plg().

%test3 :- write('tst3: ')@_plg(),
	a[b->f],
	delete{d[e->f]}, refresh{a[b->f]},
	if a[b->f]
        then writeln(failed)@_plg()
        else writeln(passed)@_plg().

%test4 :- write('tst4: ')@_plg(),
	if a:?_X then writeln(passed)@_plg() else writeln(failed)@_plg().

%test5 :- write('tst5: ')@_plg(),
	// "a" should have inherited from "c"
	if a[p->?_X, r->?_Y]
        then writeln(passed)@_plg()
	else writeln(failed)@_plg().


%test6 :- write('tst6: ')@_plg(),
	// after this nothing about "a" is supported by the rules
	a[b->?_X], deleteall{d[e->?_Y]}, refresh{a:c[e->?_Z]},
	if a[b->?_X]
        then  writeln(failed)@_plg()
        else writeln(passed)@_plg().

%test7 :- write('tst7: ')@_plg(),
	a:?X, atom(?X)@_plg,
	if (a:?X, \+ member(?X, [_string,_symbol,_object])@_plg(basics))
        then  writeln(failed)@_plg()
        else writeln(passed)@_plg().

%test8 :- write('tst8: ')@_plg(),
	// stuff inherited from "c" should no longer be valid,
	// since a:c is no longer true
	refresh{a[p->?_X, r->?_Y]},
	if a[p->?_X, r->?_Y]
        then  writeln(failed)@_plg()
        else writeln(passed)@_plg().

%test9 :- write('tst9: ')@_plg(),
	if catch{naf w[q->r],FLORA_ABORT(FLORA_UNDEFINED_EXCEPTION(?_,?_),?_),true} // should succeed
	then  writeln(passed)@_plg()
        else  writeln(failed)@_plg().

%test10 :- write('tst10: ')@_plg(),
	insert{w[q->r]},
	if naf w[q->r]  // now should fail
	then  writeln(failed)@_plg()
        else  writeln(passed)@_plg().

%test11 :- write('tst11: ')@_plg(),
	insert{q(a),q(b)}, q(a), delete{q(a)},
	if q(a) // should fail
	then  writeln(failed)@_plg()
        else  writeln(passed)@_plg().

%test12 :- write('tst12: ')@_plg(),
          naf q(a), // should succeed and get tabled
	  insert{q(a)},
          if q(a)
          then writeln(passed)@_plg()
          else writeln(failed)@_plg().

%test13 :- write('tst13: ')@_plg(),
          if naf q(a)  // should fail
          then writeln(failed)@_plg()
          else writeln(passed)@_plg().

%test14 :- write('tst14: ')@_plg(), r(?_X), deleteall{%p(a)},
          refresh{r(?_Y)}, if r(?_Z) then writeln(failed)@_plg()
          else writeln(passed)@_plg().

%pretest :- %test1, %test2, %test3, %test4, %test5, %test6, %test7,
            %test8, %test9, %test10, %test11, %test12, %test13, %test14.



