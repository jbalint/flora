#include "standard.h"

?- Method[%mustDefine(off, ?[pp->?]@ _@)]@_sys.
?- Method[%mustDefine(off, ?[ee(?,?)->?]@ _@)]@_sys.

aa[bb->h(x)].
p(f(c,1,g(x)),aa).

%rtps(?Str,?Status) :-
	flora_read_parse_compile_build_term(atom(?Str)@_plg,?,?,?Status)@_plg(flrutils).

%tst1 :-
	write('test1: ')@_plg,
	%rtps('${not _exists ?_x^?_y^p(f(?_c),aa[bb->h(?_y)])}.',?Err),
	writeln(?Err)@_plg.
%tst2 :-
	write('test2: ')@_plg,
	%rtps('${not _exists ?_x^?_y^p(f(?_c),h(?_y))}.',?Err),
	writeln(?Err)@_plg.
%tst3 :-
	write('test3: ')@_plg,
	%rtps('${not _exists ?_x^?_y^p(?_c,?_y)}.',?Err),
        writeln(?Err)@_plg.

%tst4 :-
	write('test4: ')@_plg,
	if not _exists ?_x^?_y^p(f(?_c,?,g(?_x)),aa[bb->h(?_y)])
        then writeln(failed)@_plg
        else writeln(succeeded)@_plg.
%tst5 :-
	write('test5: ')@_plg,
	not _exists ?_x^?_y^ (p.pp)(f(?_c.cc,g(?_x)),aa[bb->h(?_y)]),
        writeln(succeeded)@_plg.
%tst6 :-
	write('test6: ')@_plg,
	not _exists ?_x^?_y^p(f(?_c,g(?_x)),aa[bb[eeee(?_x)->?_y]->h(?_y,?_d)]),
        writeln(succeeded)@_plg.

%tst7 :-
	write('test7: ')@_plg,
	aa[bb[\+ _exists ?_y^?_x^ee(?_x,ggg(?_y))->ff(?_y,?_x)]->h(?_y)],
        writeln(succeeded)@_plg.
%tst8 :-
	write('test8: ')@_plg,
	if aa[not _exists ?_x^bb[\+ _exists ?_y^?_z^ee(?_x,ggg(?_y))->ff(?_y,?_z)]->h(?_y)]
        then writeln(failed)@_plg
        else writeln(succeeded)@_plg.

%pretest :- %tst1, %tst2, %tst3, %tst4, %tst5, %tst6, %tst7, %tst8.

%test :- tell(temp)@_plg(),
	flora_set_maxerrors(30)@_plg(flrutils),
	file_reopen('/dev/null',w,STDERR,?_)@_plg(file_io),
	Method[%mustDefine(on)]@_sys,
	%pretest,
	Method[%mustDefine(off)]@_sys,
	//abolish_all_tables,
	%pretest,
	file_close(STDERR)@_plg(file_io),
	told@_plg.
