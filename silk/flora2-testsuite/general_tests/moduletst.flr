

?- expand_filename('../datafiles', ?_X)@_plg(machine),
	assert(library_directory(?_X)@_plg())@_plg().

%insert_stuff :-
	newmodule{foobar},
	insert{mary[salary(1990)->40]@foobar, mary[salary(1991)->30]@foobar},
	insert{%p, %p@foobar, q[a], q[a]@foobar, q[c]@marymodule},
	insert{%p(${%f@main}), %p(${%f@foobar}),
		%p(${%f(a)@main}), %p(${%f(b)@foobar}),
		q[aaa-> ${%g(c)@main}], q[aaa-> ${%g(h)@foobar}],
		q[aaa-> ${%c@foobar}]@marymodule}.

john:employee.

john[salary(1990) -> 20].
john[salary(1991) -> 40].
john[salary(1992) -> 60].
john[salary(1993) -> 70].
john[salary(1994) -> 70].
john[salary(1995) -> 80].
john[salary(1996) -> 70].
john[salary(1997) -> 50].
john[salary(1998) -> 80].


%tst1 :- ?Z = max{?X|john[salary(?_Year)->?X]},
	writeln(?Z)@_plg().

%tst2 :- ?Z = max{?X|john[salary(?Year) ->?X], ?Year < 1996},
	writeln(?Z)@_plg().

%tst3 :- ?Z = max{?X|mary[salary(?_Year)->?X] @ marymodule}, writeln(?Z)@_plg().

%tst4 :- ?Z=count{?Year|john.salary(?Year) < max{?X|john[salary(?Y2)->?X], ?Y2<?Year} },
    	writeln(?Z)@_plg().

%tst5 :- ?Z=count{?Year|john.salary(?Year) < mary.salary(?Year) @ marymodule},
	writeln(?Z)@_plg().

%tst6 :- ?Z= avg{?X[?Who]|?Who[salary(?Year)->?X]; ?Who[salary(?Year)->?X] @ marymodule},
	write(?Z)@_plg(), write('   ')@_plg(), %writeln(?Who)@_io, fail.
%tst6 :- true.

%tst7 :- (write('Module: '), writeln(_@))@_plg().

%tst8 :- mary[salary(1990) -> ?X]@?Mod,
	write('tst8: ')@_plg(), writeln(?X = ?Mod)@_plg(), fail.
%tst8 :- true.

%tst9 :- mary[salary(1991) -> ?X]@?Mod,
	write('tst9: ')@_plg(), writeln(?X = ?Mod)@_plg(), fail.
%tst9 :- true.

%tst10 :- %p@?Mod,
	 write('tst10: ')@_plg(), writeln(?Mod)@_plg(), fail.
%tst10 :- true.

%tst11 :- q[?X]@?Mod,
	 write('tst11: ')@_plg(), writeln(?X=?Mod)@_plg(), fail.
%tst11 :- true.

%tst12 :- %p(${%f@?Mod}), %p(${%?P(?A)@?Mod2}),
	 write('tst12: ')@_plg(), writeln(?P+?A=?Mod2+?Mod)@_plg(), fail.
%tst12 :- true.

%tst13 :- %p(${%?X(?Y)@?Mod}),
	 write('tst13: ')@_plg(), writeln(?X+?Y=?Mod)@_plg(), fail.
%tst13 :- true.

%tst14 :- q[aaa-> ${%g(?X)@?Mod}],
	 write('tst14: ')@_plg(), writeln(?X=?Mod)@_plg(), fail.
%tst14 :- q[aaa-> ${%c@?Mod}]@?Mod2,
	 write('tst14: ')@_plg(), writeln(?Mod+?Mod2)@_plg().

foo(a).
%tst15 :- ?X = ${tnot foo(b)}, ?X,
	 writeln('tst15: done')@_plg().

%pretest :- %tst1, %tst2, %tst3, %tst4, %tst5, %tst6, %tst7, 
           %tst8, %tst9, %tst10, %tst11, %tst12, %tst13, %tst14,
	   %tst15.

%test :- tell(temp)@_plg(),
	[marymodule >> marymodule],
	%insert_stuff,
	Method[%mustDefine(on)]@_sys,
	%pretest,
	Method[%mustDefine(off)]@_sys,
	%pretest,
	told@_plg().



