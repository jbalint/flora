
/*
?- Method[%mustDefine(off,${_:(_,_)})]@_sys.
?- Method[%mustDefine(off,${_:(_;_)})]@_sys.
?- Method[%mustDefine(off,${_:(_-_)})]@_sys.
?- Method[%mustDefine(off,${_::(_,_)})]@_sys.
?- Method[%mustDefine(off,${_::(_;_)})]@_sys.
?- Method[%mustDefine(off,${_::(_-_)})]@_sys.
*/
a[m*->am].
b[m*->bm, k*->bk].
o::p(a,b).

(a;b)[pp*->ab].
ooo::(a,b).
uuu::a.
vvv::(a-b).

dd::a.

p::q.

1:a.
2:a.
2:b.
3:b.

%tst1 :- write('tst1: ')@_plg(), ooo::a, ooo::b,
	writeln(success)@_plg().
%tst2 :- write('tst2: ')@_plg(), not (a,b)::(a,b), not (a;b)::(a;b),
	writeln(success)@_plg().
%tst3 :- ooo[?M*->?V],
	(write('tst3: '), write(meth=?M), write(' '), writeln(val=?V))@_plg(),
	fail.
%tst3 :- true.
%tst4 :- uuu[?M*->?V],
	(write('tst4: '), write(meth=?M), write(' '), writeln(val=?V))@_plg(),
	fail.
%tst4 :- true.
%tst5 :- vvv[?M*->?V],
	(write('tst5: '), write(meth=?M), write(' '), writeln(val=?V))@_plg(),
	fail.
%tst5 :- true.
%tst6 :- ?X:(a,b), (write('tst6: '), writeln(?X))@_plg(),
	fail.
%tst6 :- true.
%tst7 :- ?X:(a;b), (write('tst7: '), writeln(?X))@_plg(),
	fail.
%tst7 :- true.
%tst8 :- ?X:(a-b), (write('tst8: '), writeln(?X))@_plg(),
	fail.
%tst8 :- true.

%pretest :- %tst1, %tst2, %tst3, %tst4, %tst5, %tst6, %tst7, %tst8.

%test :- tell(temp)@_plg,
	Method[%mustDefine(on)]@_sys,
	%pretest,
	!,
	Method[%mustDefine(off)]@_sys,
	abolish_all_tables,
	%pretest,
	told@_plg().



