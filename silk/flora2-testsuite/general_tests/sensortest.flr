:- setsemantics{tabling(incremental)}.

?- ['prolog/sensorfoo'],
	[sensortest_declarations>>sensorsmod].


:- usesensor sens1@sensorfoo/2, sens2/2,
	"http://vulcan.com/2008/silk#avg"^^_iri/2.

:- symbol_context sens2(?,?)@?.
:- symbol_context sensor sens2(?,?).

// this is just for warning checking (sensor/predicate dual use)
sens2(c,b) :- fail.

%test1 :- write('test1: ')@_plg, sens1(bbbb,?_Y).
%test2 :- write('test2: ')@_plg, sens2(?_X,aaaa).
%test3 :- write('test3: ')@_plg, sens1(?X,?Y), ?X=123, ?Y=aaaaa.
%test4 :- write('test4: ')@_plg, sens2(?X,?Y), ?Y=345, ?X=bbbbb.
%test5 :- write('test5: ')@_plg,
	  "http://vulcan.com/2008/silk#avg"^^_iri(?_X,?_Y),
	  writeln(success)@_plg.
%test6 :- write('test6: ')@_plg,
	  _"http://vulcan.com/2008/silk#avg"(a,a),
	  writeln(success)@_plg.

// this is just for warning checking (sensor/predicate dual use)
sens2(a,b) :- fail.

/*
  // All these are supposed to trigger compiler errors
//sens2(?,?,?,dddd[bbbb]) :- !.

:- sensor( sens3(?Y,?X),(ground(?X),ground(?Y))).

?- insert{
      sens3(?F,?L,?X,?Y) :-
	(
	    write('in file '), write(?F),
	    write(' on line '), write(?L),
	    write(': '), writeln(sensor3=?X+?Y)
	)@_plg,
	if \+ground(?X) then writeln('Instantiation error in sens3: ?X')@_plg,
	if \+ground(?Y) then writeln('Instantiation error in sens3: ?Y')@_plg
   }.

//?- insert{sens3(?,?,?,ffff[eeee->?]) :- !}.
*/



%pretest :- %test1, %test2, %test3, %test4, %test5, %test6, uritst@sensorsmod.

%test :- tell(temp)@_plg(),
        Method[%mustDefine(on)]@_sys,
        %pretest,
        Method[%mustDefine(off)]@_sys,
        %pretest,
        told@_plg().

