:- setsemantics{tabling(incremental)}.

?- ['prolog/sensorfoo'].

:- sensor( sens1(?Y,?X),sensorfoo,(nonvar(?X),ground(?Y))).
:- sensor( sens2(?Y,?X),(ground(?X),ground(?Y))).

//:- prolog sens2/4.

sens2(?F,?L,a,b) :- !, writeln(?F+?L)@_plg.
sens2(?F,?L,?X,?Y) :-
	if \+ground(?X) then write('Instantiation error in sens2: ?X. ')@_plg,
	if \+ground(?Y) then write('Instantiation error in sens2: ?Y. ')@_plg,
	(
	    write('In file '), write(?F),
	    write(' on line '), write(?L),
	    write(': '),
	    if var(?X) then writeln(sensor2=?Y+' ?X unbound'),
	    if var(?Y) then writeln(sensor2=?X+' ?Y unbound'),
	    if (nonvar(?X),nonvar(?Y)) then writeln(sensor2=?X+?Y)
	)@_plg,
	?X = bbbbb,
	sens2(?F,?L,a,b),
	!.

:- sensor((_"http://vulcan.com/2008/silk#avg")(?a,?b), (nonvar(?a))).

_"http://vulcan.com/2008/silk#avg"(?X,?Y,?,?) :- ?X = ?Y.

%test1 :- write('test1: ')@_plg, sens1(bbbb,?_Y)@_plg(sensorfoo).
%test2 :- write('test2: ')@_plg, sens2(?_X,aaaa).
%test3 :- write('test3: ')@_plg, sens1(?X,?Y), ?X=123, ?Y=aaaaa.
%test4 :- write('test4: ')@_plg, sens2(?X,?Y), ?Y=345, ?X=bbbbb.
%test5 :- write('test5: ')@_plg,
	  "http://vulcan.com/2008/silk#avg"^^_iri(?_X,?_Y,?,?),
	  writeln(success)@_plg.


/*
  // All these are supposed to trigger compiler errors
//sens2(?,?,?,dddd[bbbb]) :- !.

:- sensor( sens3(?Y,?X),(ground(?X),ground(?Y))).

?- insert{
      sens3(?F,?L,?X,?Y) :-
	(
	    write('in file '), write(?F),
	    write(' on line '), write(?L),
	    write(': '), writeln(sensor3=?X+?Y)
	)@_plg,
	if \+ground(?X) then writeln('Instantiation error in sens3: ?X')@_plg,
	if \+ground(?Y) then writeln('Instantiation error in sens3: ?Y')@_plg
   }.

//?- insert{sens3(?,?,?,ffff[eeee->?]) :- !}.
*/



%pretest :- %test1, %test2, %test3, %test4, %test5.

%test :- tell(temp)@_plg(),
        Method[%mustDefine(on)]@_sys,
        %pretest,
        Method[%mustDefine(off)]@_sys,
        %pretest,
        told@_plg().

