
?- Method[%mustDefine(off,?_[b->?_]@main)]@_sys.


%test1 :- write('test1: ')@_plg(),
	if not a[b->c] then writeln(yes)@_plg() else writeln(no)@_plg().
%test2 :- write('test2: ')@_plg(),
	if insert{a[b->c]} then writeln(yes)@_plg() else writeln(no)@_plg().
%test3 :- write('test3: ')@_plg(),
	// this should print no for incremental and nonincremental tabling
	if not a[b->c] then writeln(yes)@_plg() else writeln(no)@_plg().
%test4 :- write('test4: ')@_plg(),
	/*
	  Note: if we don't delete a[b->c] below then BOTH not delete{a[b->c]}
	        & not not delete{a[b->c]} will be false:
		    not delete{a[b->c]}
	        is false because delete{a[b->c]} is true, since a[b->c] is true
	        at this point. However, since at this also deletes a[b->c],
	        the next call to delete{a[b->c]} will be FALSE. Therefore
	            not not delete{a[b->c]}
	        will also be false. This means that NONE of the branches of
		    if not delete{a[b->c]} then ... else ...
	        will execute.
	*/
	delete{a[b->c]}, 
	if not delete{a[b->c]}
        then writeln(yes)@_plg() else writeln(no)@_plg().
%test5 :- write('test5: ')@_plg(),
	if not delete{a[b->c]}
        then writeln(yes)@_plg() else writeln(no)@_plg().


%pretest :- %test1, %test2, %test3, %test4, %test5.

%test :- tell(temp)@_plg(),
	Method[%mustDefine(on)]@_sys,
	%pretest,
	Method[%mustDefine(off)]@_sys,
	abolish_all_tables,
	%pretest,
	told@_plg().
