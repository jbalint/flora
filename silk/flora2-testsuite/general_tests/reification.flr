
tom[believes-> ${alice[thinks->flora:cool]}].
tom[believes-> ${sally[thinks-> ${flora:cool}]}].
%tst1 :- ?X = ${a[b->c[e]]@foo}, write('tst1: ')@_plg(),
	flora_write_goal(?X)@_plg(flrdecode), nl@_plg().
%tst2 :- ?X = collectset{?B| tom[believes->?B]},
	write('tst2: ')@_plg(),
	flora_write_goal(?X)@_plg(flrdecode), nl@_plg().
%tst3 :- ?X = ${b:a[b->c]@bar}, write('tst3: ')@_plg(),
	flora_write_goal(?X)@_plg(flrdecode), nl@_plg().

%tst4 :- insert{jack[believes-> ${mary[thinks-> ${flora:cool}]}]},
	jack[believes->?B],
	write('tst4: ')@_plg(), 
	flora_write_goal(?B)@_plg(flrdecode), nl@_plg(),
	delete{jack[believes->?P]},
	write('tst4: P = ')@_plg(),
	flora_write_goal(?P)@_plg(flrdecode), nl@_plg(),
	if jack[believes->?_B] then
           writeln('Tst4: something wrong')@_plg()
        else
           writeln('Tst4: ok')@_plg().


%pretest :- %tst1, %tst2, %tst3, %tst4.

%test :- tell(temp)@_plg(),
	Method[%mustDefine(on)]@_sys,
	%pretest,
	Method[%mustDefine(off)]@_sys,
	%pretest,
	told@_plg().


