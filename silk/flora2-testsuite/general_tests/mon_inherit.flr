
/* This demo shows various cases of monotonic inheritance */


a[b   {1:1}*=> c,   bs   => e].
a[b1  {1:1}*=> c1,  bs1 *=> e1].
aa[b  {1:1}*=> d,   bs1 *=> d2].
ssss[bbb{1:1}*=>(), qqq*=>()].

aaa::a.
aa:aaa.
s1:ssss.
s2::ssss.

// b c, b1 c1
%tst1 :- 
	writeln('tst1: ')@_plg(),
	aa[?T{1:1}=>?X],
	numbervars(?X)@_plg(num_vars),
	write(?T)@_plg(), write('  ')@_plg(), writeln(?X)@_plg(), fail.
%tst1 :- true.

// b c, b1 c1
%tst2 :- 
	writeln('tst2: ')@_plg(),
	aaa[?U{1:1}*=>?Y],
	numbervars(?Y)@_plg(num_vars),
	write(?U)@_plg(), write('  ')@_plg(), writeln(?Y)@_plg(), fail.
%tst2 :- true.

// bs1 e1
%tst3 :- 
	writeln('tst3: ')@_plg(),
	aa[?SM=>?V],not(aa[?SM{1:1}=>?V]),
	numbervars(?V)@_plg(num_vars),
	write(?SM)@_plg(), write('  ')@_plg(), writeln(?V)@_plg(), fail.
%tst3 :- true.

%tst4 :- write('tst4: ')@_plg(),
	 if s1[bbb{1:1}=>(), qqq=>()]
         then writeln(ok)@_plg()
         else writeln(fail)@_plg().

%tst5 :- write('tst5: ')@_plg(),
	 if s2[bbb{1:1}*=>(), qqq*=>()]
         then writeln(ok)@_plg()
         else writeln(fail)@_plg().

%pretest :- %tst1, %tst2, %tst3, %tst4, %tst5.

%test :- tell(temp)@_plg(),
	Method[%mustDefine(on)]@_sys,
	%pretest,
	Method[%mustDefine(off)]@_sys,
	%pretest,
	told@_plg().
