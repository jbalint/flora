
?- [reif_foo>>foo].

ppp(a).
?- delete{ppp(?_)}.

a[b->c] :-
	caller{?X},
	if ?X==main
	then writeln(caller1ok=?X)@_plg()
        else writeln(caller1wrong=?X)@_plg().


?- newmodule{bar}.
?- insertrule{(fff[dppp->eeee] :-
		caller{?X},
		if ?X == main
	        then writeln(caller2ok=?X)@_plg()
	        else writeln(caller2wrong=?X)@_plg())@bar}.

?- insertrule{(abc[d->eeee] :-
		caller{?X},
		if ?X == foo
	        then writeln(caller3ok=?X)@_plg()
	        else writeln(caller3wrong=?X)@_plg())@bar}.

%myquery(?QuerySpec) :- ?QuerySpec.

%tst1 :- write('tst1: ')@_plg(),
	refresh{?_[?_->?_]@foo},
	refresh{?_[?_->?_]},
	john[believes->?X]@foo,
	?X,
	write('tst1: John believes: ')@_plg(),
	flora_write_goal(?X)@_plg(flrdecode),
	nl@_plg().
%tst1b :- write('tst1b: ')@_plg(),
	john[%(believes)->?X]@foo,
	write('tst1b should be "main": ')@_plg(),
	?X.

%tst2 :- write('tst2: Calling fff[dppp->eeee] directly: ')@_plg(),
	refresh{?_[?_->?_]@bar},
	refresh{?_[?_->?_]@foo},
	fff[dppp->eeee]@bar.

%tst3 :- writeln('tst3: Calling fff[dppp->eeee] via bill[likes->X]@foo')@_plg(),
	refresh{?_[?_->?_]@bar},
	refresh{?_[?_->?_]@foo},
	bill[likes->?X]@foo,
	write('tst3: ')@_plg(),
	?X,
	write('tst3: calling reified goal: ')@_plg(),
	flora_write_goal(?X)@_plg(flrdecode),
	nl@_plg().

%tst4 :- write('tst4: Call bill[likes-> ${fff[dppp->eeee]@bar}] directly: ')@_plg(),
	refresh{?_[?_->?_]@bar},
	refresh{?_[?_->?_]@foo},
	if bill[likes-> ${fff[dppp->eeee]@bar}]@foo
	then writeln('instantiated-ok')@_plg()
        else writeln('instantiated-wrong')@_plg().

%tst5 :- write('tst5: Calling rule in @bar through module foo: ')@_plg(),
	refresh{?_[?_->?_]@bar},
	refresh{?_[?_->?_]@foo},
	%call_bar@foo.

%tst6 :- writeln('tst6: Calling bar(2) via foo[believes->X]@foo')@_plg(),
	refresh{?_[?_->?_]@bar},
	refresh{?_[?_->?_]@foo},
	foo[believes->?X]@foo,
	write('tst6: calling reified goal: ')@_plg(),
	?X,
	flora_write_goal(?X)@_plg(flrdecode),
	nl@_plg(),
	?X~ ?_(?_,?Caller)@ ?_M,
	if ?Caller==main
        then writeln(tst6=ok)@_plg()
        else writeln(tst6=failed)@_plg().
        

%tst7 :- writeln('tst7: Calling %foo(3) via bar[knows->X]@foo')@_plg(),
	refresh{?_[?_->?_]@bar},
	refresh{?_[?_->?_]@foo},
	bar[knows->?X]@foo,
	write('tst7: calling reified goal: ')@_plg(),
	%?X@foo,
	flora_write_goal(?X)@_plg(flrdecode),
	nl@_plg(),
	?X~ %?_(?_,?Caller)@ ?_M,
	if ?Caller==main
        then writeln(tst7=ok)@_plg()
        else writeln(tst7=failed)@_plg().

%tst8 :- writeln('tst8: Calling %foo(_)@X directly')@_plg(),
	%foo(?_,?Caller)@?Mod,
	if (?Caller==main, ?Mod==foo)
        then writeln(tst8=ok)@_plg()
        else writeln(tst8=failed)@_plg().

%tst9 :- writeln('tst9: Calling bar(_)@X directly')@_plg(),
	refresh{bar(?_,?_)@foo},
	bar(?_,?Caller)@?Mod,
	if (?Caller==main, ?Mod==foo)
        then writeln(tst9=ok)@_plg()
        else writeln(tst9=failed)@_plg().

%tst10 :- write('tst10: ')@_plg(),
	  %myquery(${not ppp(?_S)}),
	  writeln(succeeded)@_plg().

%tst11 :- write('tst11: ')@_plg(),
	  %myquery(${if var(?Total) then ?Total = '??'}),
	  writeln(succeeded)@_plg().

%tst12 :- write('tst12: ')@_plg(),
	  %myquery(${
	      ?L=collectset{?S |
			       ?S:people@foo, not ?S.has(moo)[type->bar]@foo
			   },
	      bob.has(?_)[]@foo,
	      write(?L)@_plg()
		    }),
	  writeln(' succeeded')@_plg().

%pretest :-
	%tst1, %tst1b, %tst2, %tst3, %tst4, %tst5, %tst6, %tst7, %tst8, %tst9,
	%tst10, %tst11, %tst12.


%test :- tell(temp)@_plg(),
	Method[%mustDefine(on)]@_sys,
	%pretest,
	Method[%mustDefine(off)]@_sys,
	%pretest,
	told@_plg().


