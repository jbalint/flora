#define ITERATIONS 30000

p(a,1).
p(b,1).
r[b->8].
r[c->8].
p(d,1) :- true.
p(d,1) :- true.
p(d,1) :- true.
p(d,1) :- true.
p(d,1) :- true.
p(x,2) :- not p(x,2).
p(aa,2) :- not p(aa,2).
p(aa,2) :- not p(aa,2).
p(bb,2) :- not p(bb,2).
p(bb,2) :- not p(bb,2).

%tst1 :- flora_collect_all(${q(?X,?Y)},['?X'=?X,'?Y'=?Y],?True,?Undef)@_plg,
	(writeln('tst1: true'=?True), writeln('tst1: undf'=?Undef))@_plg.

%tst2 :- flora_collect_all(${q(?X,?Y)},['?X'=?X,'?Y'=?Y],?True,aaaaa)@_plg,
	writeln('tst2: true'=?True)@_plg.

%tst3 :- flora_collect_all(${q(?X,?Y)},['?X'=?X,'?Y'=?Y],f(?),?Undef)@_plg,
	writeln('tst3: undf'=?Undef)@_plg.


q(?X,?Y) :- r[?X->?Y].
q(?X,?Y) :- p(?X,?Y).
qq(?X,?Y) :- q(?X,?Y).
qq(?X,?Y) :- qq(?X,?Z),  ?Y is ?Z+1, ?Y< ITERATIONS.

%tst4 :- 
	flora_collect_all(${qq(?X,?Y)},['?X'=?X,'?Y'=?Y],?True,?Undef)@_plg,
	length(?True,?LT)@_plg(basics),
	length(?Undef,?LU)@_plg(basics),
	(write('tst4: true answers'=?LT), writeln('  undef answers'=?LU))@_plg.

%pretest :- %tst1, %tst2, %tst3, %tst4.

%test :- tell(temp)@_plg(),
        Method[%mustDefine(on)]@_sys,
        %pretest,
        Method[%mustDefine(off)]@_sys,
        %pretest,
        told@_plg().
