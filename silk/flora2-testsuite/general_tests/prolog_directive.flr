
:- iriprefix bbb = "http://my.fo.bar.com/".

// :- table implies :- prolog, so :- prolog foo/2 is unnecessary
//:- prolog foo/2.
:- table foo/2.

:- prolog silk#foo/2.
:- prolog bbb#"abc"/2.

// :- table implies :- prolog, so :- prolog is unnecessary here,
// but we keep it for testing
:- prolog silk#barr/2.
:- table silk#barr/2.

// if foo/2 weren't tabled, this would be an infinite loop
foo(?X,?Y) :- abc(?X,?Y).
foo(?X,?Y) :- foo(?X,?Z), foo(?Z,?Y).

silk#foo(?X,?Y) :- cde(?X,?Y).

abc(11,22).
abc(22,11).
cde(aa,bb).

bbb#abc(ww,qq).

%tst1 :- write('test1: ')@_plg,
	setof{?X|?X(?,?)} = ?L,
	writeln(?L)@_plg.

%tst2 :- write('test2: ')@_plg,
	?X = foo(a,b),
	writeln(?X)@_plg.

%tst3 :- write('test3: ')@_plg,
	?X = ${silk#foo(a,b)},
	flora_write_goal_substitute_vars(?X)@_plg(flrdecode).


%tst4 :- write('test4: ')@_plg,
	?X = bbb#abc(a,b),
	writeln(?X)@_plg.

%tst5 :- write('test5: ')@_plg,
	// we do not support non-logical features like :- prolog
	// in %readAll
	string('silk#abc(a,b), silk#barr(c,d).')[%readAll(main,?L)]@_parse,
	writeln(?L)@_plg.

%tst6 :- write('test6: ')@_plg,
	?L = setof{?X|foo(?A,?B), ?X=(?A,?B)},
	writeln(?L)@_plg.

%tst7 :- write('test7: ')@_plg,
	if predicate_property(${foo(?,?)},tabled)@_plg(curr_sym)
	then writeln('foo/2 is tabled')@_plg
        else writeln('problem with foo/2')@_plg.

%tst8 :- write('test8: ')@_plg,
	if predicate_property(${silk#barr(?,?)},tabled)@_plg(curr_sym)
	then writeln('silk#barr/2 is tabled')@_plg
        else writeln('problem with silk#barr/2')@_plg.

%tst9 :- write('test9: ')@_plg,
	if predicate_property(${bbb#abc(?,?)},tabled)@_plg(curr_sym)
        then writeln('problem with bbb#abc/2')@_plg
	else writeln('bbb#abc/2 is not tabled')@_plg.

%pretest :- %tst1, %tst2, %tst3, %tst4, %tst5, %tst6, %tst7, %tst8, %tst9.

%test :- tell(temp)@_plg(), 
        Method[%mustDefine(on)]@_sys,
	%pretest,
        Method[%mustDefine(off)]@_sys,
	%pretest,
	told@_plg.	
