
:- use_argumentation_theory.

/*
  Group 1
  Here neg A1 and B1 refute each other and are disqualigied
  (transitively defeat each other).
*/
@{t1} neg A1.
@{tt1} B1.
_opposes(tt1,B1,t1,neg A1).

%tst1 :- write('test1: ')@_plg,
	 ?L = collectset{?R|status(?I,neg A1)[howDefeated->?Z]@_gcl, ?R=(?I/(neg A1),?Z)},
	 %writeln(?L)@_io.
%tst2 :- write('test2: ')@_plg,
	 ?L = collectset{?R|status(?I,B1)[howDefeated->?Z]@_gcl, ?R=(?I/B1,?Z)},
	 %writeln(?L)@_io.

/*
  Group 2
  Here B2 > A2 and A2 > C2, but not B2 > C2
  B2 does not oppose C2, but A2 opposes everything.

  B2 is true, A2 is false. c2/C2 is disqualified with truth value
  unknown.  So, it is defeated with truth value unknown, and so its
  truth value is unknown also.
*/

@{a2} A2.
@{b2} B2.
@{c2} C2.

_overrides(a2,c2).
_overrides(b2,a2).
_opposes(A2,B2).
_opposes(A2,C2).

%tst3 :- write('test3: ')@_plg,
          true{B2}, unknown{C2}, false{A2}, writeln(success)@_plg.
// this test first time does not return anything. XSB bug? Omit.
%tst4 :- write('test4: ')@_plg,
          ?L = collectset{?R|status(?I,A2)[howDefeated->?Z]@_gcl, ?R=(?I/A2,?Z)},
          %writeln(?L)@_io.
%tst5 :- write('test5: ')@_plg,
          ?L = collectset{?R | status(?I,C2)[howDefeated->?Z]@_gcl,
	                       ?R = (?I/C2 , ?Z)},
          %writeln(?L)@_io.

/*
  Group 3
  B3 > A3 > C3
  A3, C3 - defeated
*/

@{a3} A3.
@{b3} B3.
@{c3} C3.

_overrides(a3,c3).
_overrides(b3,a3).
_overrides(b3,c3). 
_opposes(A3,B3).
_opposes(A3,C3).
_opposes(B3,C3).

%tst6 :- write('test6: ')@_plg,
          true{B3}, false{C3}, false{A3}, writeln(success)@_plg.

/*
  Group 4
  t4 > r4
  t4<->tt4 - conflict, A4/neg A4 - conflict
  Here t4 and tt4 rebut each other. So, t4 does not defeat r4,
  and r4, s4 are leaft to rebut each other, but r4 is refuted,
  so it does not rebut s4, but s4 rebuts r4. Thus, (s4,A4) stands.
*/

@{r4} A4.
@{s4} neg A4.

@{t4} neg A4.
@{tt4} B4.

_overrides(t4,r4).
_opposes(tt4,B4,t4,neg A4).


%tst7 :- write('test7: ')@_plg,
         false{B4}, true{neg A4}, false{A4}, writeln(success)@_plg.
%tst8 :- write('test8: ')@_plg,
         ?L = collectset{?R|status(r4,A4)[howDefeated->?Z]@_gcl, ?R=(r4/A4,?Z)},
          %writeln(?L)@_io.
%tst9 :- write('test9: ')@_plg,
         ?L = collectset{?R|status(s4,neg A4)[info->?Z]@_gcl, ?R=(s4/A4,?Z)},
          %writeln(?L)@_io.

// test 4 is omitted: misbehaves. The first time ?L = [].
// Only the second time it returns the right answer.
%pretest :- %tst1, %tst2, %tst3, %tst5, %tst6, %tst7, %tst8, %tst9.

%test :- tell(temp)@_plg(),
	Method[%mustDefine(on)]@_sys,
	%pretest,
	Method[%mustDefine(off)]@_sys,
	abolish_all_tables,
	%pretest,
	told@_plg.
