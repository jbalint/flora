:- use_argumentation_theory.

/*
  This tests the directives for switching the defaults between defeasible
  and strict. It also tests the tag{...} primitive
*/
      
aaa :- bbb.
aaa(?,?) :- bbb.
@{?,ppp} aaaa1111:- kk.

?- insert{AAA :- BBB}.
?- insert{AAA(?,?) :- BBB}.

?- insert{@{?,PPP} AAAA1111:- KK}.

:- default_is_defeasible_rules.

aaa1 :- bbb1.
aaa1(?,?,?) :- bbb1.

@{pp} aaa2 :- bbb2.
@{pppp} aaa2(?,?) :- bbb2.
@{?} aaa2222222 :- ppp.

?- insert{AAA1 :- BBB1}.
?- insert{AAA1(?,?) :- BBB1}.
?- insert{@{PP} AAA2 :- BBB2}.
?- insert{@{?} AAA2222222 :- PPP}.

:- default_is_strict.

aaa3 :- bbb3.
aaa3(?) :- bbb3.

@{qq} aaa4 :- ddd.
@{qqqq} aaa4(?) :- ddd.
@{?} aaa4444:- ppp.
@{?} aaa4444:- ppp.

?- insert{AAA3 :- BBB3}.
?- insert{@{QQ} AAA4 :- DDD}.
?- insert{@{QQ} AAA4(?,?,?) :- DDD}.
?- insert{@{?} AAA4444(?):- PPP}.

%tst1 :- write('test01: ')@_plg,
	not tag{?_L,aaa@ _@},  // tag should fail
	writeln(success)@_plg.
%tst2 :- write('test02: ')@_plg,
	not tag{?_L,aaa(?,?,?)@ _@}, // should fail
	writeln(success)@_plg.
%tst3 :- write('test03: ')@_plg,
	tag{?L,aaa1@ _@},  // success
	writeln(?L)@_plg.
%tst4 :- write('test04: ')@_plg,
	tag{?L,aaa1(?,?,?)@ _@},  // success
	writeln(?L)@_plg.
%tst5 :- write('test05: ')@_plg,
	tag{?L,aaa2@ _@},  // success
	writeln(?L)@_plg.
%tst6 :- write('test06: ')@_plg,
	tag{?L,aaa2(?,?)@ _@},  // success
	writeln(?L)@_plg.
%tst7 :- write('test07: ')@_plg,
	not tag{?_L,aaa2222222@ _@}, // should fail
	writeln(success)@_plg.
%tst8 :- write('test08: ')@_plg,
	not tag{?_L,aaa3@ _@}, // should fail
	writeln(success)@_plg.
%tst9 :- write('test09: ')@_plg,
	not tag{?_L,aaa3(?)@ _@}, // should fail
	writeln(success)@_plg.
%tst10 :- write('test10: ')@_plg,
	tag{?L,aaa4@ _@}, // success
	writeln(?L)@_plg.
%tst11 :- write('test11: ')@_plg,
	tag{?L,aaa4(?)@ _@}, // success
	writeln(?L)@_plg.

%tst12 :- write('test12: ')@_plg,
	tag{?L,AAA1@ _@},  // success
	writeln(?L)@_plg.
%tst13 :- write('test13: ')@_plg,
	tag{?L,AAA1(?,?)@ _@},  // success
	writeln(?L)@_plg.
%tst14 :- write('test14: ')@_plg,
	tag{?L,aaa2@ _@},  // success
	writeln(?L)@_plg.
%tst15 :- write('test15: ')@_plg,
	not tag{?_L,AAA2222222@ _@}, // should fail
	writeln(success)@_plg.

%tst16 :- write('test16: ')@_plg,
	not tag{?_L, AAA3}, // fail
	writeln(success)@_plg.
%tst17 :- write('test17: ')@_plg,
	tag{?L, AAA4}, // success
	writeln(?L)@_plg.
%tst18 :- write('test18: ')@_plg,
	tag{?L, AAA4(?,?,?)}, // success
	writeln(?L)@_plg.
%tst19 :- write('test19: ')@_plg,
	not tag{?_L, AAA4444(?)}, // fail
	writeln(success)@_plg.


%pretest :- %tst1, %tst2, %tst3, %tst4, %tst5,
	%tst6, %tst7, %tst8, %tst9, %tst10,
	%tst11, %tst12, %tst13, %tst14, %tst15,
	%tst16, %tst17, %tst18, %tst19.



%test :- tell(temp)@_plg,
	Method[%mustDefine(on)]@_sys,
	%pretest,
	Method[%mustDefine(off)]@_sys,
	abolish_all_tables,
	%pretest,
	told@_plg.
