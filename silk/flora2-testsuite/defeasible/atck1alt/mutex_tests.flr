
:- use_argumentation_theory{ogcle}.
?- [atck1alt>>ogcle].

// Ex 1
@{p1} p.
@{q1} q.
@{r1} r.
_overrides(p1,q1).
_overrides(p1,r1).
_overrides(q1,r1).

m1:_Exclusion[_opposers->{p, q, r}].

/*
  Desired conclusions:  p, q, not r.
  Justification:  p and q are both higher priority than r, thus 
  r should be the one thrown out in the 3-ary mutex.
*/
%tst1 :-  write('test1: ')@_plg,
	   p, q, not r,
	   !,
	   writeln(passed)@_plg.
%tst1 :- writeln(failed)@_plg.


// Ex 2
@{pp1} pp.
@{qq1} qq.
@{rr1} rr.
_overrides(pp1,rr1).

m2:_Exclusion[_opposers->{pp, qq, rr}].

/* 
   Desired conclusions: pp, naf qq, naf rr.
   Intuitive justification: The interpretation {q,r} is less preferred
   than {p,q} since ov(p1,r1). {p,r}, as well as {p,q}, is maximally
   preferred.  Thus p should be a
   conclusion since it is true in all maximally preferred
   interpretations, but neither q nor r is true in all maximally
   preferred interpretations so neither should be a conclusion.
   Another way to describe this is that p beats r, but q beats no one.
*/
%tst2 :-  write('test2: ')@_plg,
	   pp, not qq, not rr,
	   !,
	   writeln(passed)@_plg.
%tst2 :- writeln(failed)@_plg.



// Ex 3
@{p3L} p3.
@{q3L} q3.
@{r3L} r3.
_overrides(p3L,q3L).
_overrides(q3L,r3L).

m3:_Exclusion[_opposers->{p3, q3, r3}].

/*
  Desired conc's: p3, q3, naf r3. Intuitive justification: {p,r} < {p,q}
  since ov(q1,r1). {q,r} < {p,r} since ov(p1,q1).  Thus {p,q} is the
  sole mpi, if one can apply transitivity to the preceding two
  pairwise model preferences. I.e., p beats q, and q beats r.
*/
%tst3 :-  write('test3: ')@_plg,
	   p3, q3, not r3,
	   !,
	   writeln(passed)@_plg.
%tst3 :- writeln(failed)@_plg.



// Ex 4
@{p4L} p4.
@{q4L} q4.
@{r4L} r4.
_overrides(p4L,q4L).
_overrides(q4L,r4L).

m4:_Exclusion[_opposers->{p4, q4, r4}].

/*
  Desired conc's: p4, q4, naf r4. Intuitive justification: {p,r} < {p,q}
  since ov(q1,r1). {q,r} < {p,r} since ov(p1,q1).  Thus {p,q} is the
  sole mpi, if one can apply transitivity to the preceding two
  pairwise model preferences. I.e., p beats q, and q beats r.
*/
%tst4 :-  write('test4: ')@_plg,
	   p4, q4, not r4,
	   !,
	   writeln(passed)@_plg.
%tst4 :- writeln(failed)@_plg.


// Ex 5
@{p5L} p5.
@{q5L} q5.
@{r5L} r5 :- not r5.
_overrides(p5L,q5L).

m5:_Exclusion[_opposers->{p5, q5, r5}].

/*
  Desired conc's:  p5, naf q5, naf r5
  Intuitive justification:  p beats q, and q beats no one.  
  (Perhaps it's OK if q=u instead?)
*/
%tst5 :-  write('test5: ')@_plg,
	   p5, not q5, not r5,
	   !,
	   writeln(passed)@_plg.
%tst5 :- writeln(failed)@_plg.


// Ex 6
@{p6L1} p6.
@{q6L1} q6.
@{r6L1} r6.
@{p6L2} p6.
@{q6L2} q6.
@{r6L2} r6.
_overrides(p6L1,q6L1).
_overrides(p6L1,r6L1).
_overrides(p6L2,q6L2).
_overrides(p6L2,r6L2).

m6:_Exclusion[_opposers->{p6, q6, r6}].

/*
  Desired conc's:  p, naf q, naf r.
*/
%tst6 :-  write('test6: ')@_plg,
	   p6, not q6, not r6,
	   !,
	   writeln(passed)@_plg.
%tst6 :- writeln(failed)@_plg.


// Ex 7
@{p7L1} p7.
@{q7L1} q7.
@{r7L1} r7.
@{p7L2} p7.
@{q7L2} q7.
@{r7L2} r7.
_overrides(p7L1,q7L1).
_overrides(q7L1,r7L1).
_overrides(p7L1,r7L1). // also interesting example without this fact
_overrides(p7L2,r7L2).
_overrides(r7L2,q7L2).
_overrides(p7L2,q7L2). // also interesting example without this fact

m7:_Exclusion[_opposers->{p7, q7, r7}].

/*
  Desired conc's:  p, naf q, naf r.
*/
%tst7 :-  write('test7: ')@_plg,
	   p7, not q7, not r7,
	   !,
	   writeln(passed)@_plg.
%tst7 :- writeln(failed)@_plg.


// Ex 8
@{p8L1} p8.
@{q8L1} q8.
@{r8L1} r8.
@{q8L2} q8.
@{r8L2} r8.
_overrides(p8L1,q8L1).
_overrides(q8L1,r8L1).
_overrides(p8L1,r8L1).
_overrides(p8L1,r8L2).
_overrides(r8L2,q8L2).
_overrides(p8L1,q8L2).

m8:_Exclusion[_opposers->{p8, q8, r8}].

/*
  Desired conc's:  p, naf q, naf r.
*/
%tst8 :-  write('test8: ')@_plg,
	   p8, not q8, not r8,
	   !,
	   writeln(passed)@_plg.
%tst8 :- writeln(failed)@_plg.


// Ex 9
@{p9L1} p9.
@{q9L1} q9.
@{p9L2} p9.
@{r9L2} r9.
_overrides(p9L1,q9L1).
_overrides(p9L2,r9L2).

m9:_Exclusion[_opposers->{p9, q9, r9}].

/*
  Desired conc's:  p, naf q, naf r.
*/
%tst9 :-  write('test9: ')@_plg,
	   p9, not q9, not r9,
	   !,
	   writeln(passed)@_plg.
%tst9 :- writeln(failed)@_plg.


// Ex 10
@{p10L1} p10.
@{q10L1} q10.
@{r10L1} r10.
@{p10L2} p10.
@{r10L2} r10.
_overrides(p10L1,q10L1).
_overrides(p10L2,r10L2).

m10:_Exclusion[_opposers->{p10, q10, r10}].

/*
  Desired conc's:  p, naf q, naf r.
*/
%tst10 :-  write('test10: ')@_plg,
	   p10, not q10, not r10,
	   !,
	   writeln(passed)@_plg.
%tst10 :- writeln(failed)@_plg.


// Ex 11
@{p11L1} p11.
@{q11L1} q11.
@{r11L1} r11.
@{p11L2} p11.
@{q11L2} q11.
@{r11L2} r11.
_overrides(p11L1,q11L1).
_overrides(p11L2,r11L2).

m11:_Exclusion[_opposers->{p11, q11, r11}].

/*
  Desired conc's:  naf p, naf q, naf r.
*/
%tst11 :-  write('test11: ')@_plg,
	   not p11, not q11, not r11,
	   !,
	   writeln(passed)@_plg.
%tst11 :- writeln(failed)@_plg.



// Ex 12
@{p12L1} p12.
@{q12L1} q12.
@{r12L1} r12.
@{p12L2} p12.
@{q12L2} q12.
@{r12L2} r12.
_overrides(p12L1,q12L1).
_overrides(q12L1,r12L1).
_overrides(p12L1,r12L1).
_overrides(p12L2,q12L2).
_overrides(q12L2,r12L2).
_overrides(p12L2,r12L2).

m12:_Exclusion[_opposers->{p12, q12, r12}].

/*
  Desired conc's:  p, q, naf r.
*/

%tst12 :-  write('test12: ')@_plg,
	   p12, q12, not r12,
	   !,
	   writeln(passed)@_plg.
%tst12 :- writeln(failed)@_plg.


// Ex 13
@{p13L1} p13.
@{q13L1} q13.
@{r13L1} r13.
@{q13L2} q13.
_overrides(p13L1,q13L1).
_overrides(r13L1,q13L2).

m13:_Exclusion[_opposers->{p13, q13, r13}].

/*
  Desired conc's:  naf p, naf q, naf r.

  Discussion: A bit of a subtlety here is the LACK
              of the prioritizations p1>q2 and r1>q1.  
	      Thus q2 is a rebutting argument for p1,
	      and likewise q1 is a rebutting argument for r1.  
*/

%tst13 :-  write('test13: ')@_plg,
	   not p13, not q13, not r13,
	   !,
	   writeln(passed)@_plg.
%tst13 :- writeln(failed)@_plg.



// Ex course taking.

@{c1L}  crs1.
@{c2L}  crs2.
@{c3L}  crs3.
@{c4L}  crs4.

// only two courses are allowed:
c1m:_Exclusion[_opposers->{crs1, crs2, crs3}].
c2m:_Exclusion[_opposers->{crs1, crs2, crs4}].
c3m:_Exclusion[_opposers->{crs1, crs3, crs4}].
c4m:_Exclusion[_opposers->{crs2, crs3, crs4}].

_overrides(c4L,?X) :- ?X = c1L ; ?X= c2L ; ?X = c3L.
_overrides(c3L,?X) :- ?X = c1L or ?X= c2L.

/*
  Desired conc's:  crs4, crs3. 
  After all, 4 is the highest desirable course and 3 is the next one.
*/


%tst14 :-  write('test14: ')@_plg,
	   if (crs3, crs4, not crs1, not crs2) then writeln(passed)@_plg
	   else writeln(failed)@_plg.

%pretest :- %tst1, %tst2, %tst3, %tst4, %tst5, %tst6, %tst7, %tst8, %tst9,
            %tst10, %tst11, %tst12, %tst13, %tst14.

%test :- tell(temp)@_plg(),
	Method[%mustDefine(on)]@_sys,
	%pretest,
	Method[%mustDefine(off)]@_sys,
	!,
	abolish_all_tables,
	%pretest,
	told@_plg.
