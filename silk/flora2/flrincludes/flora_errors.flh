/* File:      flora_errors.flh -- FLORA-2 errors
**
** Author(s): Guizhen Yang
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2010;
**      and Vulcan, Inc., 2008-2010.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/


#mode standard Prolog


/**************************************
  errors reported by Flora Lexer
**************************************/
#define UNEXP_UNPRINT	'unexpected unprintable character'
#define UNEXP_DEL_ISO	'unexpected DEL or ISO character'
#define UNEXP_EOF	'unexpected end of file'
#define UNEXP_PRINT	'unexpected printable character'
#define HEX_EXPECTED    'hexadecimal symbol expected in string'
#define ALPHA_EXPECTED  'alphanumeric symbol expected'
#define AFTER_RADIX	'invalid symbol after radix'
#define INVALID_RADIX	'invalid radix'
#define ERROR_EXPONENT	'syntax error in exponent'
#mode save
#mode nocomment "%"
#define ERROR_DBLPERCENT   'invalid symbol after %'
#mode restore
#define AFTER_UNDERSCORE   'invalid symbol after _'
#define VARIABLE_EXPECTED  'variable name expected after ?'

/**************************************
  warnings reported by Flora Composer
**************************************/
#define OP_AMBIGUITY	 'ambiguous operator definitions'


/**************************************
  errors reported by Flora Composer
**************************************/
#define UNKNOWN_ERROR    'internal error -- please report this problem using the bug tracking system at http://sourceforge.net/projects/flora'
#define UNEXP_EOR	 'rule delimeter expected'
#define UNEXP_OPERAND    'unexpected operand'
#define UNEXP_OPERATOR   'unexpected operator'
#define UNEXP_LEFT       'unexpected left parenthesis/brace/bracket'
#define UNEXP_RIGHT      'unexpected right parenthesis/brace/bracket/end-of-clause'
#define UNEXP_END        'unexpected end of rule'
#define UNEXP_ENDCLAUSE	 'unexpected end of clause before the #include macro'
#define WRONG_PRECEDENCE 'precedence definitions violated'
#define WRONG_ASSOCIATE  'associativity definition violated'
#define UNMATCHED_LEFT   'unmatched left parenthesis/brace/bracket'
#define UNMATCHED_RIGHT  'unmatched right parenthesis/brace/bracket'


/**************************************
  errors reported by Flora Operator
**************************************/
#define NO_REDEFOP	'redefinition of standard operators is illegal'


/**************************************
  errors reported by Flora Arguments directive
**************************************/
#define NO_REDEFARG	'redefinition of standard argument types is illegal'


/**************************************
  errors reported by Flora Parser
**************************************/
#define ERROR_OPDEF	'invalid associativity definition'
#define ERROR_OPERATOR	'invalid operator'
/*
  #define ERROR_FAPAIR	'invalid functor/arity pair'
*/
#define ERROR_SKELETON  'invalid functor/arity skeleton'

#mode save
#mode nostring "\!#'"
/*
  #define ERROR_ARGTYPE	'invalid argument type specification: FL_OID/FL_BODYFORMULA expected'
*/
#mode restore

/*
  #define ERROR_ARGUMENTS	'invalid arguments directive'
*/
#define ERROR_AGGREGT	'syntax error in aggregate body'
#define ERROR_BDLITERAL	'invalid construct in the context of a predicate/molecule in rule/query body or in a reified argument position'
#define ERROR_TEMPLATE  'invalid construct in the context of a predicate/molecule template or in a reified argument position'
#define ERROR_PRLGLIT	'invalid PROLOG literal'
#define ERROR_HILGTERM	'invalid HiLog term'
#define ERROR_WSNAME	'invalid module name'
#define ERROR_BOOLSIG	'invalid boolean signature'
#define ERROR_PATHEXP	'invalid path expression'
#define ERROR_HDLITERAL 'invalid construct in the context of a predicate/molecule in rule head or in a reified argument position'
#define ERROR_EXPINHEAD 'invalid path expression in rule head'
#define ERROR_LOADLIST	'invalid list of loading commands'
#define ERROR_LOADITEM	'invalid loading command'
#define ERROR_LOADFILE	'invalid file name in _load(...)'
#define ERROR_INSERT	'invalid literal in insert{...}'
#define ERROR_DELETE	'invalid literal in delete{...}'
#define ERROR_REFRESH	'invalid literal in refresh{...}'
#define ERROR_CLAUSELIT	'invalid literal in clause{...}'
#define ERROR_CLAUSEMOD	'the form clause{...}@module is not supported'
#define ERROR_LABELPRIMITIVEMOD	'the form tag{...}@module is not supported'
#define ERROR_LABELPRIMITIVEARITY 'the primitive tag{Label,Head} has two arguments'
#define ERROR_PREFIXPRIMITIVEARITY 'the primitive prefix{Prefix,Expansion} has two arguments'
#define ERROR_PREFIXPRIMITIVESYNTAX 'the argument of the primitive prefix{Prefix} must be a name or a variable'
#define ERROR_EXPINSERT 'invalid path expression in insert{...}'
#define ERROR_EXPDELETE 'invalid path expression in delete{...}'
#define ERROR_EXPREFRESH 'invalid path expression in refresh{...}'
#define ERROR_EXPCLAUSE 'invalid path expression in clause{...}'
#define ERROR_INDXDIREC	'invalid indexing directive'
#define ERROR_VERBATIM_DIRECT	'invalid argument in a verbatim directive'
#define ERROR_NEWOID	'invalid use of an anonymous oid'
/*
  #define ERROR_FUNCTOR	'invalid functor (atom or variable expected)'
*/
#define ERROR_ARITY	'invalid arity (non-negative integer or variable expected)'
#define ERROR_SEMOPT	'invalid option syntax in a semantics{...} directive'
#define ERROR_SETSEMOPT	'invalid option syntax in a setsemantics{...} directive'
#define ERROR_UPDATEOP	'invalid use of an update operator where an oid is expected'
#define ERROR_SETNOTE	'invalid use of the set notation {...}'
#define ERROR_GPP	'error while parsing the output from the gpp preprocessor'
#define ERROR_CMPOPT	'invalid compiler option'
#define ERROR_TABLE	'invalid arguments for table command'
#define ERROR_CLAUSE    'invalid syntax in clause{...}'
#define ERROR_NAMEDVAR  'invalid use of a named variable'
#define ERROR_ADDFILE   'invalid file name in _add(...)'

#define EXP_POSINTEGER	'positive integer (>= 0) expected'
#define EXP_VARIABLE	'variable expected'
#define EXP_ATOMICFUNCT	'atomic functor expected'
#define EXP_VARORATOM   'variable or atom expected'
#define EXP_AGGREGVAR	'aggregate variable expected'
#define EXP_AGGRGRPVAR	'aggregate and grouping variables expected'
#define EXP_AGGRRESSORT	'unexpected sort specification for aggregate grouping'
#define EXP_AGGRSORTSPC	'invalid sort specification for aggregate result or grouping'
#define UNEXP_SORTSPEC	'sorting specification is allowed only in setof and bagof aggregates'
#define EXP_ARGS	'arguments expected'
#define EXP_RULES	'a rule, list of rules, or a variable expected'
#define NO_REIFICATION	'no reification in this context: a rule, list of rules, or a variable expected'
#define EXP_OPTLIST	'a list of Prolog compiler options expected'
#define EXP_SPECLIST	'a list of hilog predicate specifications expected'
#define EXP_ANONYVAR	'an anonymous variable expected'
#define NO_LISTTAIL	'list tail specification is illegal in this context'
#define NO_DISJUNCTION	'disjunction in rule heads and facts is illegal'
#define NO_NEGATION	'negation in rule head is illegal'
#define ILLEGAL_NEGHEAD 'illegal explicit negation (NEG) in rule head'
#define NEG_NEGATE_HEAD	'NEG in rule head cannot negate conjunction'
#define NEG_NEGATE_DB	'NEG in an update statement cannot negate conjunction'
#define NO_WORKSPACE	'invalid use of the @module specification'
#define NO_WS_VAR	'module variables (@?Var) in facts and rule heads are illegal'
#define NO_PRED_VAR	'variables inside reifications in facts and rule heads are illegal'
#define NO_REIFY_VAR	'reification of a variable-literal is illegal'
#define NO_WSINRULEHEAD	'@module in rule heads and facts is illegal'
#define NO_WSNESTING	'invalid nesting of module specifications'
#define NO_REDEFINITION 'redefinition of a built-in in rule head'
#define NO_AGGINHEAD	'aggregation in rule heads is illegal'
#define NO_INSERT	'insertion into built-in predicates or attributes is illegal'
#define NO_DELETE	'deletion from a built-in predicates or attributes is illegal'
#define NO_INSERTDISJUN	'disjunction in insert{...} is illegal'
#define NO_DELETEDISJUN	'disjunction in delete{...} is illegal'
#define NO_INSERTNEG	'negation in insert{...} is illegal'
#define NO_DELETENEG	'negation in delete{...} is illegal'
#define NO_PROLOG       'invalid operation on Prolog predicates'
#define UNKNOWN_AGGREGT 'unknown aggregate operator'
#define UNKNOWN_BRACE_BUILTIN 'unknown builtin of the form <name>{...}'
#define UNKNOWN_DIRECT	'unknown compiler directive'
#define DISALLOWED_DIRECT 'this compile-time directive does not have the @module form'
#define UNREG_SYSMOD	'unregistered system module'
#define ERROR_BUILTIN   'invalid operation on a built-in'
#define ERROR_IFHEAD	'invalid if-statement in rule head'
#define ERROR_THENHEAD	'invalid then-statement in rule head'
#define ERROR_ELSEHEAD	'invalid else-statement in rule head'
#define ERROR_THENBODY	'invalid then-statement'
#define ERROR_ELSEBODY	'invalid else-statement'
#define MISSING_THEN	'missing then-statement in if-then-else'
#define UNEXPECTED_THEN	'unexpected then-statement'
#define UNEXPECTED_ELSE	'unexpected else-statement'
#define UNEXPECTED_CONTROL 'unexpected control statement'
#define NO_UPDATEIF	'update with an if-statement is illegal'
#define NO_UPDATETHEN	'update with a then-statement is illegal'
#define NO_UPDATEELSE	'update with an else-statement is illegal'
#define REIFY_WRONG_ARGNUM 'reification operator takes at most 1 argument'

#define ERROR_IMPORTMODULE	'syntax error in the module import directive'
#define ERROR_IMPORT_MODULE_SYNTAX 'invalid module name in the module import directive'

#define ERROR_EXPORT_PATH	'export of invalid path expression'
#define ERROR_EXPORT_SPEC	'export of invalid F-logic molecule type'
#define ERROR_EXPORT_ATOM	'atom occurs where variable is expected'
#define ERROR_EXPORT_MODULE	'export to invalid module'
#define ERROR_EXPORT_ATOM_ATTR	'variable occurs where term is expected'

#define ERROR_SIGCONSTR		'error in signature cardinality constraint'
#define ERROR_SIGCONSTR_LOW	'the lower bound of signature cardinality constraint should be an integer or a variable'
#define ERROR_SIGCONSTR_HIGH	'the higher bound of signature cardinality constraint should be a non-negative integer, a variable, or *'

#define ERROR_PREFIX_DEF	'invalid prefix definition'
#define ERROR_PREFIX_HEAD	'identifier expected as a name of a prefix macro'
#define ERROR_PREFIX_BODY	'quoted string, identifier, or atom expected as a prefix definition'

#define ERROR_SQNAME_PREFIX	'identifier expected as a prefix in a prefix macro'
#define ERROR_SQNAME_LOCAL	'quoted string, identifier, or atom expected as a local name in a prefix macro'  

#define LABELING_CONSTR_RULEHEAD 'annotations in rule heads must be grouped with relevant literals using parentheses'

#define INVALID_META_IN_LABEL    'syntax error in the Id or meta part of an annotation'

#mode save
#mode nocomment "%"
#define ERROR_TRANSACTIONAL_SYMBOL     'unexpected transactional symbol'
#mode restore

#define ERROR_TRANSACTIONALVARLIT      'transactional variables cannot appear as standalone literals'
#define DISALLOWED_UPDATE_IN_HYPOTHETICAL 'only transactional updates are allowed inside hypotheticals'

/********************************* Datatype errors ***************/
#define ERROR_TIME_LITERAL             'invalid time literal'
#define ERROR_DATETIME_LITERAL         'invalid dateTime literal'
#define ERROR_DATE_LITERAL             'invalid date literal'
#define ERROR_DURATION_LITERAL         'invalid duration literal'
#define ERROR_IRI                      'invalid IRI literal'
#define ERROR_INTEGER                  'invalid integer literal'
#define ERROR_REAL                     'invalid real number literal'
#define ERROR_STRING                   'invalid string literal'
#define ERROR_CHARLIST                 'invalid character list literal'
#define ERROR_LISTTYPE                 'invalid list literal'
#define ERROR_BOOLEAN                  'invalid Boolean literal'

#define ERROR_DATATYPE_LITERAL         'invalid datatype literal'
#define ERROR_DATATYPE_LITLIST         'invalid list of datatype literals'
#define ERROR_DATATYPE_NAME            'invalid datatype name specification'

/**************************************
  warnings reported by Flora Compiler
**************************************/
#define SINGLETON_VAR	'singleton variable'
#define UNBOUND_VAR	'unsafe variable in rule head'

/****************************************
  support for numbered anon oids
*****************************************/
#define SINGLETON_OID	'singleton numbered anonymous oid in clause'


/**************************************
  errors reported by Flora Compiler
**************************************/
#define REPEATED_GVAR	'repeated grouping variables in aggregates are illegal'
#define GVAR_NOTIN	'grouping variable not in aggregate body'
#define AVAR_NOTIN	'aggregate variable not in aggregate body'
#define ERROR_GVAR	'invalid grouping variable'
#define ERROR_AVAR	'invalid aggregate variable'
#define AVAR_ASGVAR	'aggregation variables cannot be grouped by'
#define VARWSINHEAD	'unbound module name in rule head'
#define ILLEGAL_NEG	'illegal explicit negation (NEG) of formula'
#define UNIMPLEMENTED_NEG 'this use of explicit negation (NEG) has not been implemented yet'
#define READING_NONREIFIED_MOLECULE 'Attempt to read non-reified molecule from external source'
#define LABELED_TRANSACTION_NOT_ALLOWED 'rule tags are illegal in rules that produce side-effects'


/**************************************
  errors reported by Flora Coder
**************************************/
#define MOD_NODEFPREFIX		'prefix is not defined in the specified module'
#define FILE_NODEFPREFIX	'prefix is not defined in this flora file'

/********************************************
  Misc warnings 
********************************************/

#define WARN_TABLED_FLLOAD  'Tabled predicate or F-logic molecule depends on ~w.~n                  The program might not function correctly'
