/* File:      flora_prefix.flh -- FLORA-2 prefixes
**
** Author(s): Michael Kifer
**	      Guizhen Yang
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2008;
**      and Vulcan, Inc., 2008.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/



/******************************************************************************
  Flora prefix

  All Flora symbols begin with this prefix.
******************************************************************************/
/* for F-logic and HiLog predicates */
#define FLORA_PREFIX			'_$_$_flora'


/******************************************************************************
  Attaching FLORA_PREFIX

  The argument to this Macro should be quoted.
******************************************************************************/
#define FLORA_SYMBOL(X)	       	       	FLORA_PREFIX#1


/******************************************************************************
  Strings following FLORA_PREFIX

  These strings should be quoted.
******************************************************************************/
/* Keep "mod" in the name of a formula wrapper right after FLORA_PREFIX
   We rely on this to identify meta wrappers */
#define FLORA_MODULE_TAG		'mod'
#define FLORA_FDB_TRIE   		'fdbtrie'

/*  Trie for keeping skeletons of defined facts -- debugging */
#define FLORA_FLD_TRIE  		'fldtrie'



/******************************************************************************
  Module and trie prefixes
******************************************************************************/
/* prefix to construct Flora module predicates. */
#deffast FLORA_MODULE_PREFIX	  	FLORA_SYMBOL(FLORA_MODULE_TAG)

/*  prefix to name Flora storage trie for a module. */
#deffast FLORA_FDB_TRIE_PREFIX	        FLORA_SYMBOL(FLORA_FDB_TRIE)


/* prefix to name Flora fld storage trie for a module. */
#deffast FLORA_FLD_TRIE_PREFIX	        FLORA_SYMBOL(FLORA_FLD_TRIE)


/****************************************************************************
  F-logic atom prefixes for predicates that are used to distinguish F-logic
  wrappers in the trailers, the user program, base facts, etc.
****************************************************************************/
#define FLHEADPREFIX		'derived_'
#define FLTRAILERPREFIX		'inferred_'
#define FLEMPTYPREFIX		''
#define FLNEGPREFIX		'neg_'

#mode save
#mode nostring "\!#'"
#define FLHEADPREFIX(X)		'derived_#1'
#define FLTRAILERPREFIX(X)	'inferred_#1'
#define FLNEGPREFIX_UNQ(X)  	neg_#1
#define FLNEGPREFIX(X)  	'neg_#1'
#define FLNEGHEADPREFIX(X)      'neg_derived_#1'
#define FLNEGTRAILERPREFIX(X)   'neg_inferred_#1'
#mode restore


/******************************************************************************
  Lengths of prefixes of F-logic wrappers
******************************************************************************/
#deffast FLHEADPREFIX_LEN		#eval length(FLHEADPREFIX)-2
#deffast FLTRAILERPREFIX_LEN		#eval length(FLTRAILERPREFIX)-2

/****************************************************************************
  Prefixes that are used for F-logic wrappers in rule bodies of user programs.
  They are called "debuggin prefixes" because they were introduced to help
  implement the debugging feature that catches undefined methods.
****************************************************************************/
#define FLBodyPREFIX		'd_'
#define FLDYNAPREFIX		'dyna_'
#define FLDYNZPREFIX		'dynz_'
/* Prefixes used for checking undefinedness */
#define FLDefinedPREFIX		'defined_'
#define FLUndefinedPREFIX	'undef_'

/* Corresponding 1-arg macros */
#mode save
#mode nostring "\!#'"
#define FLBodyPREFIX(X)        'd_#1'
#define FLBodyPREFIX_UNQ(X)     d_#1
#define FLDYNAPREFIX(X)		'dyna_#1'
#define FLDYNZPREFIX(X)		'dynz_#1'

#define FLDefinedPREFIX(X)	'defined_#1'
#define FLUndefinedPREFIX(X)	'undef_#1'

#define FLNEGBodyPREFIX_UNQ(X)  neg_d_#1
#define FLNEGBodyPREFIX(X)  	'neg_d_#1'
#define FLNEGDYNAPREFIX(X)  	'neg_dyna_#1'
#define FLNEGDYNZPREFIX(X)  	'neg_dynz_#1'
#mode restore


/******************************************************************************
  Lengths of prefixes that are used in the wrappers to the left of module name

  Note: We need to remember that these prefixes are enclosed in quotes.
        But we need the actual atom length that Prolog uses. So, we deduct 2.
******************************************************************************/

#deffast FLORA_PREFIX_LEN_PLUS1	     #eval length(FLORA_PREFIX)-1

/* length of FLORA_PREFIX'FLORA_MODULE_TAG */
#deffast FLORA_MODULE_PREFIX_LEN_PLUS1  #eval length(FLORA_MODULE_PREFIX)-2

