/* File:      flora_terms.flh -- FLORA-2 main terms
**
** Author(s): Guizhen Yang
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2010;
**      and Vulcan, Inc., 2008-2010.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/


#mode standard Prolog

/****************************************************************************
  Include prefixes for output Macros
****************************************************************************/
#include "flora_prefix.flh"

#include "flora_datatype_symbols.flh"

/**************************************************************************
  The following are the types of tokens returned by the FLORA Lexer:
  (1)  IDENTIFIER(I,TextInfo)
  (2)  VARIABLE(V,TextInfo)
  (3)  NUMBER(N,TextInfo)
  (4)  QUOTED_ATOM(QA,TextInfo)
  (5)  ASCII_STRING(AS,TextInfo)
  (6)  SYMBOL_TOKEN(ST,TextInfo)
  (7)  SPECIAL_TOKEN(SpT,TextInfo)
  (8)  WHITESPACE(TextInfo)
  (9)  COMMENT(TextInfo)
  (10) RULE_DELIMETER(TextInfo)
  (11) BUILTIN_IDENTIFIER(Identifier,TextInfo)
  (12) DATATYPE(DataType,TextInfo)

  TextInfo=TEXT(BeginX,BeginY,EndX,EndY,ListOfCodes)
**************************************************************************/
#define TEXT			text
#define IDENTIFIER		identifier
#define TRANSACTIONAL_IDENTIFIER	transactional_identifier
#define VARIABLE		variable
#define TRANSACTIONAL_VARIABLE		transactional_variable
#define NUMBER			number
#define TRANSACTIONAL_NUMBER		transactional_number
#define QUOTED_ATOM		quoted_atom
#define TRANSACTIONAL_QUOTED_ATOM	transactional_quoted_atom
#define ASCII_STRING		ascii_string
#define TRANSACTIONAL_ASCII_STRING	transactional_ascii_string
#define SYMBOL_TOKEN		symbol_token
#define TRANSACTIONAL_SYMBOL_TOKEN	transactional_symbol_token
#define SPECIAL_TOKEN		special_token
#define WHITESPACE		whitespace
#define COMMENT			comment
#define RULE_DELIMETER		rule_delimeter
#define BUILTIN_IDENTIFIER	builtin_identifier
#define TRANSACTIONAL_BUILTIN	transactional_builtin
#define DATATYPE         	datatype


/**************************************************************************
  Indices of Tokens
**************************************************************************/
#define LOW_INDEX		1
#define NO_INDEX		0


/**************************************************************************
  The following are the types of tokens returned by the FLORA Composer:
  (1)PREFIX(Symbol,Token,Index)
  (2)INFIX(Symbol,LeftToken,RightToken,Index)
  (3)SUFFIX(Symbol,Token,Index)
  (4)FUNCTION(Function,Argument)
  (5)ARGUMENT(Parenthesis,Token,Indx1,Indx2) or
     ARGUMENT(Parenthesis,Indx1,Indx2)
  (6)OBJECT(Token,Index)
**************************************************************************/
#define NULL			null

/* types of operators: prefix, infix, suffix */
#define PREFIX			prefix
#define INFIX			infix
#define SUFFIX			suffix

#define FUNCTION		function
#define ARGUMENT		argument
#define OBJECT			object


/**************************************************************************
  FLORA Vocabulary
**************************************************************************/
#define FL_IMPLYOP		(':-')
#define FL_QUERYOP		('?-')
/* Alternative if-then */
#define FL_LEFTNAFIMPLY		('<~~')
#define FL_RIGHTNAFIMPLY	('~~>')
#define FL_LEFTNEGIMPLY		('<==')
#define FL_RIGHTNEGIMPLY	('==>')

#define FL_PARENTHESIS		'('
#define FL_BRACKET		'['
#define FL_BRACE		'{'
#define FL_RIGHT_PARENTHESIS	')'
#define FL_RIGHT_BRACKET	']'
#define FL_RIGHT_BRACE		'}'

#define FL_QUOTE		''''
#define FL_DOUBLEQUOTE		'"'

#define FL_VARSYM		'?'

#define FL_COMMA		','
#define FL_AND   		and
#define FL_SLASH		'/'
#define FL_BAR			'|'
#define FL_SEMICOLON		';'
#define FL_OR		        or
#define FL_PLUS			'+'
#define FL_MINUS		'-'
#define FL_STAR			'*'
#define FL_DBLSTAR		'**'
#define FL_SLASH		'/'
#define FL_MOD			(mod)
#define FL_SYMOR		'\/'
#define FL_SYMAND		'/\'

#define FL_URISQOP		'#'

#define FL_FLOOR                floor
#define FL_ROUND                round
#define FL_ABS                  abs
#define FL_FLOATFUNC            float
#define FL_EXP                  exp
#define FL_LOG                  log

#define FL_TRUE                 true
#define FL_FALSE                false
#define FL_UNKNOWN              unknown
#define FL_FAIL                 fail
/* These are shorthands for _boolean"true" and _boolean"false" */
#define FL_TRUECONST            '_true'
#define FL_FALSECONST           '_false'

#define FL_UNDERSCORE		'_'
#define FL_HASH			'#' 
#define FL_AT			'@'
#define FL_CUT			'!'

#define FL_THISMODULE           '_@'


/* static newoid _# */
#define FL_NEWOID		'_#'
#define FL_NEWOID_SYM           newoid

/* Dynamic newoid operation */
#define FL_NEWOIDOP		newoid
#define FL_NEWOID_DYNSYM	dyn_newoid

#mode save
#mode nostring "\!#'"
#define FL_NEWOID_PREFIX        FLORA_SYMBOL('FL_NEWOID_SYM')
#define FL_NEWOID_DYNPREFIX     FLORA_SYMBOL('FL_NEWOID_DYNSYM')
#mode restore

#define FL_TNOT			(tnot)
#define FL_NOT			(not)
#define FL_SILKNAF		(naf)
#define FL_NEG			(neg)
#define FL_NEG_Atm		neg
#define FL_NAF			'\+'

#define FL_POSSIBLE             '<>'
#define FL_IMPOSSIBLE           '~<>'

#define FL_ISA			':'
#define FL_ISAWORD              isA
#define FL_MEMBEROF             memberOf
#define FL_SUB			'::'
#define FL_SUBCLASSOF           subclassOf

/* path expressions */
#define FL_MVD			'.'
#define FL_INHERIMVD		'!'
#define FL_MVDARROW		'->'
#define FL_HASVALUE		hasValue
#define FL_ALLINARROW		'+>>'
#define FL_TOLISTARROW		'->->'
#define FL_MVDSIGARROW		'=>'
/*
A synonym for => needs to be defined.
But people normally do not specify =>, so this is not really important
#define FL_VALUESOFTYPE		valuesOfType
*/
#define FL_INMVDARROW		'*->'
#define FL_HASDEFAULTVALUE	hasDefaultValue
#define FL_INALLINARROW		'*+>>'
#define FL_INTOLISTARROW	'*->->'
#define FL_INMVDSIGARR		'*=>'
#define FL_HASTYPE		hasType
#define FL_OFTYPE		ofType
#define FL_INMETH		'*'
#define FL_CONSTR		':'
#define FL_BOOLSIGARR		'=>'
#define FL_INBOOLSIGARR		'*=>'

#mode save
#mode nocomment "%"
#define FL_TRAN			'%'
#define FL_TRANSIGARR		'=>%'
#define FL_INTRANSIGARR		'*=>%'
#mode restore

#define FL_UNIVEQ		'='
#define FL_UNIVNOTEQ		'\='
#define FL_C_UNEQUAL            '!='
#define FL_TRYEQ		'?='
#define FL_EQ			'=='
#define FL_NOTEQ		'\=='
#define FL_C_NOTSAME		'!=='
#define FL_ORDERLT		'@<'
#define FL_ORDEREQLT		'@=<'
#define FL_ORDERGT		'@>'
#define FL_ORDEREQGT		'@>='
#define FL_METAUNIV		'=..'
#define FL_UNIVEQFORM		'~'
#define FL_C_NOTUNIVEQFORM	'!~'
#define FL_NOTUNIVEQFORM	'\~'
#define FL_IS			(is)
#define FL_MATHEQ		'=:='
#define FL_OBJEQL		':=:'
#define FL_MATHNOTEQ		'=\='
#define FL_LT			'<'
#define FL_EQLT			'=<'
#define FL_GT			'>'
#define FL_EQGT			'>='
#define FL_RIGHTTO		'>>'
#define FL_LEFTTO		'<<'

#define FL_REIFYOP		'$'
#define FL_LABELINGOP		'@'
#define FL_LABELINGOP2	  	'#'
#define FL_LABELFUNC		FLORA_SYMBOL('@')

/* Executable op definition in the :- op directive */
#define FL_OP			'_op'
#define FL_HILOG		(hilog)
#define FL_INDEX		(index)

#define FL_IMPORT		(import)
#define FL_IMPORTMODULE		(importmodule)
#define FL_FROM			(from)
#define FL_EXPORT		export
#define FL_UPDATABLE		updatable

#define FL_OID			oid
#define FL_BODYFORMULA		meta
#define FL_CMPOPT		flora_compiler_options
#define FL_IGNOREDEP            ignore_depchk

#define FL_SEMANTICS		semantics
#define FL_SETSEMANTICS		setsemantics
#define FL_EQUALITY		equality
#define FL_INHERITANCE		inheritance
#define FL_TABLING		tabling
#define FL_CUSTOM		custom
#define FLORA_DEFAULT_SEMANTICS [FL_EQUALITY(NONE),FL_INHERITANCE(FLOGIC),FL_CUSTOM(NONE),FL_TABLING(variant)]
#define FL_PREFIXDEF		iriprefix
#define FL_PREFIXDEF_SYNONYM	uriprefix

/* Tabling types */
#define FL_SUBSUMPTIVE   	subsumptive
#define FL_VARIANT      	variant
#define FL_INCREMENTAL      	incremental

#define FL_IN			(in)

#define FL_LIBMOD               libmod_wrapper
#define FL_NEGLIBMOD            neg_libmod_wrapper
#define FL_TRANSLIBMOD          trans_libmod_wrapper

#define FL_MIN			min
#define FL_MAX			max
#define FL_SUM			sum
#define FL_AVG			avg
#define FL_COUNT		count
/* collectset/set and collectbag/bag are synonyms */
#define FL_COLLECTSET		collectset
#define FL_COLLECTBAG		collectbag
#define FL_SET		        setof
#define FL_BAG  		bagof

#define FL_INSERT		insert
#define FL_INSERTALL		insertall
#define FL_DELETE		delete
#define FL_DELETEALL		deleteall
#define FL_ERASE		erase
#define FL_ERASEALL		eraseall

/* For refreshing table calls */
#define FL_REFRESH		refresh

#define FL_BTINSERT		t_insert
#define FL_BTINSERTALL		t_insertall
#define FL_BTDELETE		t_delete
#define FL_BTDELETEALL		t_deleteall
#define FL_BTERASE		t_erase
#define FL_BTERASEALL		t_eraseall

#define FL_CALLERMODULE		caller
#define FL_NEWMODULE		newmodule
#define FL_ERASEMODULE		erasemodule
#define FL_INSERTRULE		insertrule
#define FL_INSERTRULE_A		insertrule_a
#define FL_INSERTRULE_Z		insertrule_z
#define FL_DELETERULE_A		deleterule_a
#define FL_DELETERULE_Z		deleterule_z
#define FL_DELETERULE		deleterule

/*  clause{...} */
#define FL_CLAUSE		clause
/*  tag{...} */
#define FL_LABEL_PRIMITIVE	tag
/*  prefix{...} */
#define FL_PREFIX_PRIMITIVE	prefix

#define FL_CONSTRAINT_START     '{'
#define FL_CONSTRAINT_END       '}'

#define FL_CATCH		catch
#define FL_THROW		throw
#define FL_P2H  		p2h

/* Optimization types */
#define FLORA_LOCAL_OVERRIDE_OPTION   local_override
#define FLORA_CLASS_EXPRESSIONS       class_expressions


/****************************************************************************
  Intermediate coding of a FLORA program consists of the following constructs:

  FLRULE(Head,Body)
  FLFACT(Head)
  FLQUERY(Body)
  FLDIRECTIVE(DirectList)
  FLLABELEDCONSTRUCT(Label,Construct)
  FLLABEL(Id,Meta)

  FLEXPORT(Body)
  FLCOMMAND(Direct)
  FLIMPORT(Functor,Arity)
  FLARGUMENTS(Functor,Arity,Args)
  FLPROLOG(Functor,Arity)
  FLOPDEF(Predecence,Associativity,Op)
  FLINDEX(Arity,ArgPos)
  FLCMPOPT(OptionList)
  FLSEMANTICS(Type)
  FLSETSEMANTICS(Type)
 
  FLVAR(Name,Index)
  FLATOM(Atom,Index)
  FLNUMBER(Number,Index)
  FLURISQ(Prefix,Localname)
  FLDATATYPE(DT,Index)
  FLBUILTIN_IDENTIFIER(BI,Index)
  FLSTRING(String,Index)
  FLTOKEN(Token,Index)
  FLTERM(FLPATHEXP,Arity,[FLPATHEXPs])
  FLAGGREGATE(Operator,FLVAR,[FLVARs],FLLITERAL|FLCONJUNCT|FLDISJUNCT)
  FLLIST([FLPATHEXPs],FLPATHEXP,Index)
  FLBIRELATE(FLPATHEXP,BiRelType,FLPATHEXP)
  FLOBJREF(FLPATHEXP,ObjRefType,FLPATHEXP)
  FLOBJSPEC(FLPATHEXP,FLATTSPEC|FLTERM|FLCONJUNCT|FLDISJUNCT)
  FLMVDATTSPEC(FLPATHEXP,AttRefType,FLPATHEXPLIST)
  FLSIGATTSPEC(FLPATHEXP,AttRefType,FLPATHEXPLIST)
  FLSIGATTCONSPEC(FLPATHEXP,Constraint,AttRefType,FLPATHEXPLIST)
  FLINCATTSPEC(FLPATHEXP,AttRefType,FLPATHEXP)
  FLTOLISTATTSPEC(FLPATHEXP,AttRefType,FLPATHEXP)
  FLBOOLSIG(FLPATHEXP,AttRefType)
  FLIBOOLSIG(FLPATHEXP,AttRefType)
  FLTRANSIG(TRAN,AttRefType)
  FLITRANSIG(TRAN,AttRefType)
  FLMETHSPEC(Meth)
  FLIMETHSPEC(IMeth)
  FLSIGCONSTR(FLPATHEXP,FLPATHEXP)
  FLTRANSPEC(Tran)
  FLOBJEQL(O1,O2)
  FLCUT(Index)
  FLPASSTRU(PassthruObj)
  FLLOAD(FLLIST)
  FLWORKSPACE(FLTERM|FLOBJSPEC|FLBIRELATE,Name)
  FLRULEWORKSPACE(FLRULE)
  FLPLIB(FLTERM,Name)
  FLPLIB(FLTERM)
  FLPLIBALL(FLTERM,Name)
  FLPLIBALL(FLTERM)
  FLFLORALIB(FLTERM,NAME)
  FLCONJUNCT(Goal,Goal)
  FLDISJUNCT(Goal,Goal)
  FLNEG(Goal)
  FLNAF(Goal)
  FLNOT(Goal)

  FLINSERT(Op,LiteralList,Condition)
  FLINSERT(Op,LiteralList)
  FLDELETE(Op,LiteralList,Conditon)
  FLDELETE(Op,LiteralList)

  FLREFRESH(Op,LiteralList)

  FLCALLERMODULE(Op,Module)
  FLNEWMODULE(Op,Module)
  FLERASEMODULE(Op,Module)
  FLUPDATERULE(Op,RuleList)

  FLIFTHEN(IfCondition,ThenStatement)
  FLIFTHENELSE(IfCondition,ThenStatement,ElseStatement)

  FLUNLESSDO(Condition,ActionWhenCondIsFalse)
  FLWHILEDO(WhileCondition,Action)
  FLDOUNTIL(Action,UntilCondition)
  FLWHILELOOP(WhileCondition,Action)
  FLLOOPUNTIL(Action,UntilCondition)

  FLMETAUNIV(LeftTerm,RightList)      % handles and =..
  FLUNIVEQFORM(LeftFormula,RightFormula)

  FLREIFYOP(Formula)                  % ${...}

  FLCATCH                             % catch{...,...,...}
  FLTHROW                             % throw{...}
  FLP2H	       	       	       	      % p2h{...}
****************************************************************************/
#define FLRULE			flrule
#define FLFACT			flfact
#define FLQUERY			flquery
#define FLDIRECTIVE		fldirective

#define FLLABELEDCONSTRUCT    	flannotatedconstruct
#define FLLABEL			fltag

#define FLDYNRULE               fldynrule

#define FLCOMMAND		flcommand
#define FLIMPORT		flimport
#define FLPROLOG		flprolog
#define FLOPDEF			flopdef
#define FLINDEX			flindex
/* :- compiler_options */
#define FLCMPOPT		flcmpopt
#define FLIGNOREDEP             flignoredep
#define FLDEPCHKEX              fldepchkex
#define FLSEMANTICS		flsemantics
#define FLSETSEMANTICS		flsetsemantics
#define FLPREFIXDEF		flprefixdef

#define FLATOM			flatom
#define FLTRANSACTIONALATOM	fltransactionalatom
#define FLNUMBER		flnumber
#define FLURISQ			flurisq
#define FLDATATYPE		fldatatype
#define FLBUILTIN_IDENTIFIER	flbuiltin_identifier
#define FLTRANSACTIONALNUMBER		fltransactionalnumber
#define FLSTRING		flstring
#define FLTRANSACTIONALSTRING		fltransactionalstring
#define FLVAR			flvar
#define FLTRANSACTIONALVAR		fltransactionalvar
#define FLTOKEN			fltoken
#define FLTERM			flterm
#define FLTRANSACTIONALTERM		fltransactionalterm
#define FLAGGREGATE		flaggregate
#define FLLIST			fllist
#define FLBIRELATE		flbirelate
#define FLOBJREF		flobjref
#define FLOBJSPEC		flobjspec
#define FLMVDATTSPEC		flmvdattspec
#define FLSIGATTSPEC		flsigattspec
#define FLSIGATTCONSPEC		flsigattconspec
#define FLINCATTSPEC		flincattspec
#define FLTOLISTATTSPEC		fltolistattspec
#define FLBOOLSIG		flboolsig
#define FLIBOOLSIG		fliboolsig
#define FLTRANSIG		fltransig
#define FLITRANSIG		flitransig
#define FLMETHSPEC		flmethspec
#define FLIMETHSPEC		flimethspec
#define FLSIGCONSTR		flsigconstr
#define FLTRANSPEC		fltranspec
#define FLOBJEQL		flobjeql
#define FLCUT			flcut
#define FLPASSTRU		flpassthru
#define FLLOAD			flload
#define FLWORKSPACE		flworkspace
#define FLRULEWORKSPACE		flruleworkspace
#define FLPLIB			flplib
#define FLPLIBALL               flpliball
#define FLFLORALIB		flfloralib
#define FLCONJUNCT		flconjunct
#define FLDISJUNCT		fldisjunct
#define FLNAF			flnaf
#define FLNOT			flnot
#define FLNEG			flneg

#define FLINSERT		flinsert
#define FLDELETE		fldelete

/* for refreshing tables */
#define FLREFRESH 		flrefresh

#define FLCLAUSE                flclause
#define FLLABELEDCLAUSE         flannotatedclause

#define FLCALLERMODULE		flcallermodule
#define FLNEWMODULE		flnewmodule
#define FLERASEMODULE		flerasemodule
#define FLUPDATERULE		flupdaterule

#define FLCONSTRAINT	        flconstraint

#define FLIFTHEN		flifthen
#define FLIFTHENELSE		flifthenelse

#define FLUNLESSDO		flunlessdo
#define FLDOUNTIL		fldountil
#define FLWHILEDO		flwhiledo
#define FLWHILELOOP		flwhileloop
#define FLLOOPUNTIL		flloopuntil

#define FLNEWOIDOP		flnewoidop

/* Parse functor for ~ */
#define FLUNIVEQFORM            fluniveqform
/* Parse functor for =.. */
#define FLMETAUNIV              flmetauniv

/* ${...} */
#define FLREIFYOP               flreify

#define FLCATCH	       	        flcatch
#define FLTHROW	       	        flthrow
#define FLP2H	       	        flp2h

#define FLEMPTYTERM             emptyterm


/****************************************************************************
  Flags that control the behavior of plg2hlg
****************************************************************************/
#define P2H_UNIFY_VARS 	      1
/* Used in @_prologall */
#define P2H_DONOT_UNIFY_VARS  0

#define P2H_PREDICATE           flora_plg2hlg
#define P2H_CONVERSION(Plg,Hlg) P2H_PREDICATE(Plg,Hlg,WRAP_HILOG,P2H_UNIFY_VARS)

/****************************************************************************
  Prolog encoding of a compiled FLORA program
****************************************************************************/
#define PRRULE			prrule
#define PRFACT			prfact
#define PRQUERY			prquery
#define PRDIRECTIVE		prdirective

#define PRLABELEDCONSTRUCT    	prannotatedconstruct

#define PRDYNRULE               prdynrule

#define PRREIFY	       	        prreify

#define PRCONSTRAINT		prconstraint

#define PRCOMMAND		prcommand
#define PRIMPORT		primport
/* operator definition */
#define PROPDEF			propdef
#define PRCMPOPT		prcmpopt
#define PRIGNOREDEP             prignoredep
#define PRPREFIXDEF		prprefixdef

#define PRTHISMODULE		prthismodule
/* For the trie that keeps database facts */
#define PRTHISFDBSTORAGE	prthisfdbstorage
#define PRFDBSTORAGE		prfdbstorage
/* For the trie that keeps track of defined predicate skeletons */
#define PRTHISFLDSTORAGE	prthisfldstorage

/* Represents the special variable, which appears in the rule head, that is
   bound to the caller name  */
#define PRCALLERVAR             prcallervar
#define PRDYNCALLERVAR          prdyncallervar
/* Represents the variable, which appears in the rule head, that is
   bound to the arguments with which the module is called  */
#define PRCALLERARGSVAR         prcallerargsvar
#define PRDYNCALLERARGSVAR      prdyncallerargsvar

/* Represents the term used to pass caller arguments to modules */
#define PRCALLERARGSTERM        prcallerargsterm

#define PRATOM			pratom
#define PRNUMBER		prnumber
#define PRTRANSACTIONALNUMBER	prtransactionalnumber
#define PRVARIABLE		prvariable
#define PRTRANSACTIONALVARIABLE	prtransactionalvariable
#define PRSTRING		prstring
#define PRURISQ			prurisq
#define PRDATATYPE		prdatatype
#define PRBUILTIN_IDENTIFIER	prbuiltin_identifier
#define PRLIST			prlist
#define PRTERM			prterm

#define PRAND			prand
#define PROR			pror
#define PRNOT			prnot
#define PRNAF			prnaf
#define PRNEG			prneg
#define PRATOMLIT		pratomlit
#define PRTRANSACTIONALATOMLIT		prtransactionalatomlit
#define PRTERMLIT		prtermlit
#define PRTRANSACTIONALTERMLIT		prtransactionaltermlit
#define PRCALL			prcall
#define PRCUT			prcut
#define PRWORKSPACE		prworkspace
#define PRWORKSPACETERM		prworkspaceterm
#define PRFLORALIB		prfloralib
#define PROLOGTERM		prologterm
#define PROLOGLIBLIT		prologliblit
#define FLORASYSLIB		florasyslib

#define PRNEWPRED		prnewpred
#define PRNEWOID		prnewoid
#define PRNEWOIDOP		prnewoidop

#define PRISA			prisa
#define PRSUB			prsub
#define PRMETH			prmeth
#define PRIMETH			primeth
#define PRTRAN			prtran
#define PRMVDSIG		prmvdsig
#define PRMVDCON		prmvdcon
#define PRMVDCONDEF		prmvdcondef
#define PRMVDSIGDEF		prmvdsigdef
#define PRIMVDSIG		primvdsig
#define PRIMVDCON		primvdcon
#define PRIMVDCONDEF		primvdcondef
#define PRIMVDSIGDEF		primvdsigdef
#define PRBOOLSIG		prboolsig
#define PRIBOOLSIG		priboolsig
#define PRTRANSIG		prtransig
#define PRITRANSIG		pritransig
#define PRMVD			prmvd
#define PRIMVD			primvd
#define PRMVDINC		prmvdinc
#define PRIMVDINC		primvdinc
#define PRMVDTOLIST		prmvdtolist
#define PRIMVDTOLIST		primvdtolist
#define PREXISTS		prexists
#define PRMVDDEF		prmvddef
#define PRIMVDDEF		primvddef
#define PROBJEQL		probjeql

#define FLEXPORT		flexport
#define FLEXPORT_LIST		flexport_list
#define PREXPORT		prexport

#define FLEXPORT_UPDATABLE 	updatable	
#define FLEXPORT_READABLE	readable

#define FLIMPORTMOD             flimportmod
#define FLIMPORTMOD_LIST        flimportmod_list
#define PRIMPORTMOD             primportmod

/****************************************************************************
  wrappers
****************************************************************************/
/* WRAP_HILOG is used for HiLog terms */
#define	WRAP_HILOG		flapply
/* The next two are used for HiLog predicates */
#define	WRAP_TABLED_HILOG	tblflapply
#define	WRAP_NONTABLED_HILOG	nontblflapply

#define	WRAP_ISA		isa
#define	WRAP_SUB		sub
#define	WRAP_METH		meth
#define	WRAP_IMETH		imeth
#define	WRAP_TRAN		tran
#define	WRAP_MVD		mvd
#define	WRAP_IMVD		imvd
#define	WRAP_MVDSIG		mvdsig
#define	WRAP_MVDSIGDEF		mvdsigdef
#define	WRAP_MVDCON		mvdcon
#define	WRAP_MVDCONDEF		mvdcondef
#define	WRAP_MVDCONDERIVED	mvdconderived
#define	WRAP_IMVDSIG		imvdsig
#define WRAP_BOOLSIG		boolsig
#define WRAP_IBOOLSIG		iboolsig
#define WRAP_TRANSIG		transig
#define WRAP_ITRANSIG		itransig
#define	WRAP_IMVDSIGDEF		imvdsigdef
#define	WRAP_IMVDCON		imvdcon
#define	WRAP_IMVDCONDEF		imvdcondef
#define	WRAP_IMVDCONDERIVED	imvdconderived
#define	WRAP_MVDINC		mvdinc
#define	WRAP_IMVDINC		imvdinc
#define WRAP_MVDTOLIST		mvdtolist
#define WRAP_IMVDTOLIST		imvdtolist
#define	WRAP_EXISTS		exists
#define	WRAP_MVDDEF		mvddef
#define	WRAP_IMVDDEF		imvddef
#define	WRAP_OBJEQL		objeql
#define	WRAP_DIFFOBJEQL		diffobjeql

#define	WRAP_ISA_EQL		isa_eql
#define	WRAP_SUB_EQL		sub_eql
#define	WRAP_METH_EQL		meth_eql
#define	WRAP_IMETH_EQL		imeth_eql
#define	WRAP_MVD_EQL		mvd_eql
#define	WRAP_IMVD_EQL		imvd_eql
#define	WRAP_MVDSIGDEF_EQL	mvdsigdef_eql
#define	WRAP_MVDDEF_EQL		mvddef_eql
#define	WRAP_IMVDDEF_EQL	imvddef_eql



/*
   List of data wrappers used in FLORA-2 along with the arity (excluding the
   caller arguments and such).

   These are used to tell flrdbmodule.P which tables to create in the database.
   
   wrap=arity denotes the arity of the wrapper.
   wrap < Number means that Number-1 is the max arity of the wrapper
   supported in FLORA-2. The latter is used for HiLog only.
*/
#define MAX_HILOG_ARITY         24
#define WRAP_LIST               [WRAP_TABLED_HILOG<MAX_HILOG_ARITY, \
                                 WRAP_NONTABLED_HILOG<MAX_HILOG_ARITY, \
                                 WRAP_ISA=2,  \
                                 WRAP_SUB=2, \
				 WRAP_METH=2, \
                                 WRAP_IMETH=2, \
                                 WRAP_TRANSIG=2, \
                                 WRAP_ITRANSIG=2, \
                                 WRAP_BOOLSIG=2, \
                                 WRAP_IBOOLSIG=2, \
                                 WRAP_TRAN=2, \
                                 WRAP_MVD=3, \
                                 WRAP_IMVD=3, \
                                 WRAP_MVDSIG=3, \
				 WRAP_MVDSIGDEF=2, \
                                 WRAP_MVDCON=4, \
				 WRAP_MVDCONDEF=4, \
                                 WRAP_IMVDSIG=3, \
				 WRAP_IMVDSIGDEF=2, \
                                 WRAP_IMVDCON=4, \
				 WRAP_IMVDCONDEF=4, \
                                 WRAP_EXISTS=1, \
                                 WRAP_MVDDEF=2, \
                                 WRAP_IMVDDEF=2, \
                                 WRAP_OBJEQL=2]

#define WRAP_LIST_PRED          [WRAP_TABLED_HILOG, \
                                 WRAP_NONTABLED_HILOG]

#define WRAP_LIST_METH          [WRAP_ISA,  \
                                 WRAP_SUB, \
                                 WRAP_MVD, \
                                 WRAP_IMVD]


/****************************************************************************
  FLORA builtin libraries
****************************************************************************/
#define	FLLIBMIN		fllibmin
#define	FLLIBMAX		fllibmax
#define	FLLIBSUM		fllibsum
#define	FLLIBAVG		fllibavg
#define FLLIBCOUNT		fllibcount
#define	FLLIBCOLLECTSET		fllibcollectset
#define	FLLIBCOLLECTBAG 	fllibcollectbag

/* Determines the truth value of a goal */
#define	FLLIBTRUTHVALUE 	fllibtruthvalue
/* Library file for tag{...} */
#define	FLLIBLABELPRIMITIVE 	fllibtagprimitive
/* Library file for prefix{...} */
#define	FLLIBPREFIXPRIMITIVE 	fllibprefixprimitive

#define	FLLIBLOAD		fllibload

#define FLLIBANSWER		fllibanswer
#define FLLIBSHELLANS		fllibshellans
#define FLLIBPROGRAMANS		fllibprogramans

#define FLLIBDISPLAY		fllibdisplay

#define FLLIBEXPORT		fllibexport
#define FLLIBEXPORT_INTERNAL	fllibexport_internal
#define FLLIBDBMODULE		fllibdbmodule

#define FLLIBDBOP		fllibdbop
#define FLLIBINSERT		fllibinsert
#define FLLIBINSERTALL		fllibinsertall
#define FLLIBDELETE		fllibdelete
#define FLLIBDELETEALL		fllibdeleteall
#define FLLIBERASE		flliberase
#define FLLIBERASEALL		flliberaseall

#define FLLIBREFRESH		fllibrefresh
#define FLLIBTABLES		fllibtables

#define FLLIBBTDBOP		fllibbtdbop
#define FLLIBBTINSERT		fllibbtinsert
#define FLLIBBTINSERTALL	fllibbtinsertall
#define FLLIBBTDELETE		fllibbtdelete
#define FLLIBBTDELETEALL	fllibbtdeleteall
#define FLLIBBTERASE		fllibbterase
#define FLLIBBTERASEALL		fllibbteraseall

#define FLLIBDYNRULE		fllibdynrule
#define FLLIBNEWMODULE		fllibnewmodule
#define FLLIBERASEMODULE	flliberasemodule

#define FLLIBINSERTRULE_A	fllibinsertrule_a
#define FLLIBINSERTRULE_Z	fllibinsertrule_z
#define FLLIBDELETERULE_A	fllibdeleterule_a
#define FLLIBDELETERULE_Z	fllibdeleterule_z
#define FLLIBDELETERULE	        fllibdeleterule

#define FLLIBCLAUSE	        fllibclause
#define FLLIBINSRULESIG	        fllibinsrulesig

#define FLLIBSHDIRECT		fllibshdirect

#define FLLIBDYNMOD		fllibdynmod
#define FLLIBMODLIT		fllibmodlit
#define FLLIBMODOBJ		fllibmodobj
#define FLNEGLIBMODLIT		flneglibmodlit
#define FLNEGLIBMODOBJ		flneglibmodobj

#define FLLIBSEMANTICS		fllibsemantics
#define FLLIBSETSEMANTICS	fllibsetsemantics

#define FLLIBPREFIXDEF		fllibprefixdef

#define FLLIBCONTROL		fllibcontrol
#define FLLIBIFTHENELSE		fllibifthenelse
#define FLLIBIFTHEN		fllibifthen

#define FLLIBUNLESSDO           fllibunlessdo
#define FLLIBWHILEDO		fllibwhiledo
#define FLLIBDOUNTIL		fllibdountil
#define FLLIBWHILELOOP		fllibwhileloop
#define FLLIBLOOPUNTIL		fllibloopuntil

#define FLLIBMETAOPS		fllibmetaops
/* The library predicate name for meta ~ */
#define FLLIBUNIVEQFORM		fllibuniveqform
/* The library predicate name for meta =.. */
#define FLLIBMETAUNIV  		fllibmetauniv

/* keeps executable import statements that are needed by all in usermod */
#define FLLIBIMPORTEDCALLS      fllibimportedcalls
/* basic axioms for explicit negation and for opposition in GCL */
#define FLOPPOSESBASELIB        flopposesbaselib

#define FLLIBCATCH              fllibcatch
#define FLLIBTHROW              fllibthrow
#define FLLIBERRHANDLER         flliberrhandler

#define FLLIBNEWOID             fllibnewoid

/* Used to wrap canonical form of terms */
#define FLCANON                 canon

/*****************************************************************************
   Flora system modules IDs
*****************************************************************************/
/* This functor is used by the compiler. */
#define FLSYSMOD		flsysmod

#define FLSYSMODIO		'_io'
#define FLSYSMODDATABASE	'_storage'
#define FLSYSMODSYSTEM		'_system'
#define FLSYSMODTYPECHECK	'_typecheck'
#define FLSYSMODEVAL		'_eval'
#define FLSYSMODBASETYPE	'_basetype'
#define FLSYSMODPARSE   	'_parse'
#define FL_PLIB			'_prolog'
#define FL_PLIBALL		'_prologall'
/* Typing [FL_INLINEMODULE] reads the program from stdin */
#define FL_INLINEMODULE		'_'


/****************************************************************************
  Types of update hooks
****************************************************************************/

#define INSERTFACT              insertfact
#define DELETEFACT              deletefact
#define FINDFACT                findfact

#define EXITFLORA               exitflora
#define LOADTOMODULE            loadtomodule
#define QUERYHOOK               queryhook


/****************************************************************************
  FLORA options
****************************************************************************/
#define	FLHEADER		flheader
/* Files included after header, but before everything else */
#define	FLHEADER2		flheader2
#define	FLTRAILER		fltrailer
#define	FLTRAILERREGISTRY	fltrailerregistry

#define	FLSKOLEM		flskolem
#define	FLOBJEQLDEF		flobjeqldef
#define FLEQLNONE		fleqlnone
#define FLEQLBASIC		fleqlbasic
#define FLEQLFLOGIC		fleqlflogic


/****************************************************************************
  FLORA include files
****************************************************************************/
#define FLDEFINITION		fldefinition
#define FLDEFINITION_ADD	fldefinition_add
#define FLPATCH			flpatch
#define FLABOLISH		flabolish

#define FLINDEX_P		flindex_P

/* support for undefinedness checking */
#define FLPREDDEF		flpreddef

/* support for abolishing tabled calls */
#define FLREFRESHTABLE	    	flrefreshtable

/* true{...}, undefined{...}, false{...} */
#define FLTRUTHVALUE	    	fltruthvalue
/* tag{...} */
#define FLLABELPRIMITIVE    	fltagprimitive
/* prefix{...} */
#define FLPREFIXPRIMITIVE    	flprefixprimitive

/* libraries of dynamically inserted rules */
#define FLDYNALIB			fldyna
#define FLDYNZLIB			fldynz

/****************************************************************************
  default workspace
****************************************************************************/
#define FLORA_DEFAULT_WORKSPACE	main


/****************************************************************************
  commonly used identifiers

  Notes: (1) FLORA_PREFIX_LEN is the length of FLORA_PREFIX PLUS 1. This
             macro is used in syslib/flrdbop.P.
****************************************************************************/
#define	FLORA_EOF		eof
#define FLORA_NOT_EOF		not_eof

/* these three are used in flrutils, flora_read_parse_compile_build_term */
#define FLORA_NULL_CODE 	null
#define FLORA_GOOD_CODE 	ok
#define FLORA_BAD_CODE  	error

#define FLSYSLIB		flsyslib
#define FLSYSDBUPDATE		flsysdbupdate

#define FLSYSRULEUPDATE		flsysruleupdate


/****************************************************************************
  arguments to options of the semantics{...} & setsemantics{...} primitives
****************************************************************************/
#define NONE			none
#define BASIC			basic
#define FLOGIC			flogic

/****************************************************************************
  optional first arguments to the clause{...} primitive
****************************************************************************/
#define STATIC_CLAUSE           static
#define DYNAMIC_CLAUSE          dynamic
#define DYNA_CLAUSE             dyna
#define DYNZ_CLAUSE             dynz


/****************************************************************************
  shell command operators for compilation and loading
****************************************************************************/
#define FL_COMPILE              '_compile'
#define FL_COMPILE_ADD		'_compileadd'
#define FL_LOAD			'_load'
#define FL_ADD                  '_add'
#define FL_DUMP			'_dump'
#define FL_SAVE                 '_save'



/****************************************************************************
  control structure
****************************************************************************/
#define FL_IF			if
#define FL_THEN			then
#define FL_ELSE			else

#define FL_WHILE		while
#define FL_UNTIL		until
#define FL_UNLESS		unless
#define FL_DO			do
#define FL_LOOP			loop


/****************************************************************************
  some debugger support
****************************************************************************/
#define FL_SILENT_EQUAL            FLORA_SYMBOL('silent_equal')


/****************************************************************************
  markups for include files
****************************************************************************/
#define FLORA_GPP_MARKUP	'_$_$_flora_gpp_markup'

/****************************************************************************
  xsb compiler options
****************************************************************************/
#define XSB_SPECREPR		spec_repr

/****************************************************************************
  ignore_undefcheck
****************************************************************************/
#define FLORA_IGNORE_UNDEFCHECK	ignore_undefcheck

#define FL_TRANSACTIONAL        FLORA_SYMBOL('transactional')
#define FL_TABLED               FLORA_SYMBOL('tabled')
#define FL_TABLED_NEG           FLORA_SYMBOL('tabled_neg')
#define FL_NOTTABLED            FLORA_SYMBOL('nottabled')
#define FL_TERM                 FLORA_SYMBOL('term')

#define FL_INVALIDMODULE        '_invalid_flora_module_'

#define FL_QUERY_PREDICATE      FLORA_SYMBOL('query_predicate')

/****************************************************************************
  constraint checking
****************************************************************************/
#define NOT_VIOLATED           ok


/***************************************************************************
        Contexts for the coder
***************************************************************************/

#define CODER_BODY_CONTEXT      coderbody_context
#define CODER_HEAD_CONTEXT      coderhead_context
#define CODER_GENERIC_CONTEXT   codergeneric_context


/***************************************************************************
   Symbols used for compiling and defining argumentation theories
***************************************************************************/

#define FLVERBATIM	    	flverbatim
#define PRVERBATIM	    	prverbatim
#define FL_VERBATIM             verbatim

#define FLDEFEASIBLE	    	fldefeasible
#define PRDEFEASIBLE	    	prdefeasible

/* structs to switch default from defeasible to non-defeasible rules & back */
#define FLDEFEASIBLE_RULE_DEFAULT fldefeasible_rule_default
#define FLSTRICT_RULE_DEFAULT     flstrict_rule_default

#define FLSYSMODGCLP	    	FL_DEFAULT_DEFEASIBLE_THEORY

/* directives dealing with default theories and defeasibility of rules */
#define FL_DEFEASIBLE_DIRECTIVE           use_argumentation_theory
#define FL_DEFEASIBLE_DEFAULT_DIRECTIVE   default_is_defeasible_rules
#define FL_STRICT_DEFAULT_DIRECTIVE       default_is_strict_rules
#define FL_DEFEASIBLE_DEFAULT_DIRECTIVE2  default_is_defeasible
#define FL_STRICT_DEFAULT_DIRECTIVE2      default_is_strict

#define FL_DEFAULT_DEFEASIBLE_THEORY  '_gcl'
#define FL_OPPOSES_BASE               FLORA_SYMBOL('opposes_base')
#define FL_NEGATION_AXIOM             'negation_axiom'

#define FL_OPPOSES_AUX          FLORA_SYMBOL('_opposes_aux')
#define FL_OVERRIDES_AUX        FLORA_SYMBOL('_overrides_aux')
#define FL_CANCEL_AUX           FLORA_SYMBOL('_cancel_aux')
#define FL_DISQUALIFIED_AUX     FLORA_SYMBOL('_disqualified')

#define FL_DEFEASIBLE_CLEANUP   FLORA_SYMBOL('_defesible_cleanup')

#define FL_RULE_LABEL           FLORA_SYMBOL('rule_tag')
#define FL_RULE_BODY            FLORA_SYMBOL('rule_body')

#define FL_SKIP_LABEL           flskipannotation

/* User-visible predicates */
#define FL_OPPOSES              '_opposes'
#define FL_OVERRIDES            '_overrides'
#define FL_CANCEL               '_cancel'
#define FL_UNDEFEATED           undefeated

/* Internal predicates of argumentation theories */
#define FL_CONFLICTS            conflicts
#define FL_CANDIDATE            candidate
#define FL_TRANS_DEFEATS        trans_defeats
#define FL_DEFEATED             defeated
#define FL_DEFEATS              defeats
#define FL_REFUTES              refutes
#define FL_REBUTS               rebuts
#define FL_COMPROMISED          compromized
#define FL_DISQUALIFIED         disqualified
#define FL_REFUTED    	        refuted
#define FL_REBUTTED             rebutted


/* predicates used in multiple-exclusion theories */
#define FL_COMPETES             competes
#define FL_BEATER               beater
#define FL_STOMPED              stomped
#define FL_DOMINATES            dominates
