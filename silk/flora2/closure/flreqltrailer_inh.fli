/*******************************************************************************
  file: closure/flreqltrailer_inh.fli - A template for generating trailers with
  				      	equality maintenance AND inheritance

  Author(s): Guizhen Yang

  Contact:   kifer@cs.stonybrook.edu

  Copyright (C) by
       The Research Foundation of the State University of New York, 1999-2010.

  All rights reserved.

  For information about licensing terms, please see
  http://silk.projects.semwebcentral.org/flora2-license.html

*******************************************************************************/


#include "flora_wspredicates.flh"
#include "flora_porting.flh"

:- import flora_warning_line/2 from flrprint.
:- import flora_funct_arity/2 from flrwrapper.
:- import flora_optimizer_registry/2 from flrregistry.

:- WRAP_COPY_UNQUOTED 'FLORA_THIS_MODULE_NAME'.

#define IF_LOCAL_OVERRIDE_OPTIMIZATION(Test)  \
   (flora_optimizer_registry(FLORA_LOCAL_OVERRIDE_OPTION,'FLORA_THIS_MODULE_NAME') \
   -> Test ; true)
#define IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(Test)  \
   (flora_optimizer_registry(FLORA_LOCAL_OVERRIDE_OPTION,'FLORA_THIS_MODULE_NAME') \
   -> true ; Test)


#include "flreqltrailer_neg.inc"
	    

/***************************************************************************
  Note that all programs rules are translated with with a 'derived_' prefix.
  These rules are bridged to the trailer using wrapper predicates with a
  'inferred_' (FLTRAILERPREFIX) prefix.
***************************************************************************/


/***************************************************************************
  closure rules for X::Y
***************************************************************************/
%% FLTRAILERPREFIX(WRAP_SUB_EQL)/3

FLTRAILERPREFIX(WRAP_SUB_EQL)(X,Y,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(X,OX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(Y,OY,CallerInfo),
	FLTRAILERPREFIX(WRAP_SUB)(OX,OY,CallerInfo).


%% WRAP_SUB/3
WRAP_SUB(X,Y,CallerInfo) :-
	FLTRAILERPREFIX(WRAP_SUB_EQL)(X,Y,CallerInfo),
	(X=Y,
	    flora_warning_line('cycle in class hierarchy: ~w sub ~w',[X,Y])
	; true).

WRAP_SUB(X,Y,CallerInfo) :-
	silent_sub(X,Z,CallerInfo),
	FLTRAILERPREFIX(WRAP_SUB_EQL)(Z,Y,CallerInfo),
	(X=Y,
	    flora_warning_line('cycle in class hierarchy: ~w sub ~w sub ~w',[X,Z,Y])
	; true).


/***************************************************************************
  closure rules for O:C
***************************************************************************/
%% FLTRAILERPREFIX(WRAP_ISA_EQL)/3

FLTRAILERPREFIX(WRAP_ISA_EQL)(O,C,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(C,CX,CallerInfo),
	FLTRAILERPREFIX(WRAP_ISA)(OX,CX,CallerInfo).


%% isa/3
WRAP_ISA(O,C,CallerInfo) :-
	FLTRAILERPREFIX(WRAP_ISA_EQL)(O,C,CallerInfo).

WRAP_ISA(O,C,CallerInfo) :-
        nonvar(C), var(O),
	!,
	silent_sub(S,C,CallerInfo),
	FLTRAILERPREFIX(WRAP_ISA_EQL)(O,S,CallerInfo).

WRAP_ISA(O,C,CallerInfo) :-
	(
	    flora_optimizer_registry(FLORA_CLASS_EXPRESSIONS,'FLORA_THIS_MODULE_NAME')
	-> 
	    silent_sub(S,C,CallerInfo),
	    FLTRAILERPREFIX(WRAP_ISA_EQL)(O,S,CallerInfo)
	;
	   %% The order of FLTRAILERPREFIX(WRAP_ISA)/SILENT_sub is important. Otherwise, it
	   %% won't return correct answers in cases like a:(b,c). ?- a:?X.
	    FLTRAILERPREFIX(WRAP_ISA_EQL)(O,S,CallerInfo),
	    silent_sub(S,C,CallerInfo)
	).


/*****************************************************************************
  The following rules propogate the effects of equality.
*****************************************************************************/
%% FLTRAILERPREFIX(WRAP_IMVD_EQL)/4

FLTRAILERPREFIX(WRAP_IMVD_EQL)(C,M,V,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(C,CX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(M,MX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(V,VX,CallerInfo),
	FLTRAILERPREFIX(WRAP_IMVD)(CX,MX,VX,CallerInfo).


%% FLTRAILERPREFIX(WRAP_IMVDDEF_EQL)/3
FLTRAILERPREFIX(WRAP_IMVDDEF_EQL)(C,M,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(C,CX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(M,MX,CallerInfo),
	FLTRAILERPREFIX(WRAP_IMVDDEF)(CX,MX,CallerInfo).


/***************************************************************************
  closure for X[Y->Z], X[Y*->Z], X[]
/***************************************************************************/
%% FLTRAILERPREFIX(WRAP_MVD_EQL)/4
FLTRAILERPREFIX(WRAP_MVD_EQL)(O,M,V,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(M,MX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(V,VX,CallerInfo),
	FLTRAILERPREFIX(WRAP_MVD)(OX,MX,VX,CallerInfo).


%% FLTRAILERPREFIX(WRAP_MVDDEF_EQL)/3
FLTRAILERPREFIX(WRAP_MVDDEF_EQL)(O,M,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,CallerInfo),
	WRAP_DIFFOBJEQL(M,MX,CallerInfo),
	FLTRAILERPREFIX(WRAP_MVDDEF)(OX,MX,CallerInfo).

%% FLTRAILERPREFIX(WRAP_IMETH_EQL)/3
FLTRAILERPREFIX(WRAP_IMETH_EQL)(C,M,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(C,CX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(M,MX,CallerInfo),
	FLTRAILERPREFIX(WRAP_IMETH)(CX,MX,CallerInfo).


%% FLTRAILERPREFIX(WRAP_METH_EQL)/3
FLTRAILERPREFIX(WRAP_METH_EQL)(O,M,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(M,MX,CallerInfo),
	FLTRAILERPREFIX(WRAP_METH)(OX,MX,CallerInfo).


/*****************************************************************************
  inheritable methods that are locally defined

  The argument "MethSign" has the form of Funct/Arity/Type.
*****************************************************************************/
%% local_imvd/3
local_imvd(S,MethSign,CallerInfo) :-
	var(MethSign),
	FLTRAILERPREFIX(WRAP_IMVD_EQL)(S,M,_V,CallerInfo),
	%% Should have a cut here when XSB will allow
	flora_funct_arity(M,MethSign).

local_imvd(S,MethSign,CallerInfo) :-
	var(MethSign),
	!,
	FLTRAILERPREFIX(WRAP_IMVDDEF_EQL)(S,M,CallerInfo),
	flora_funct_arity(M,MethSign).

local_imvd(S,MethSign,CallerInfo) :-
	nonvar(MethSign), % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	FLTRAILERPREFIX(WRAP_IMVD_EQL)(S,M,_V,CallerInfo).
	%% Should have a cut here when XSB will allow

local_imvd(S,MethSign,CallerInfo) :-
	nonvar(MethSign), % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	FLTRAILERPREFIX(WRAP_IMVDDEF_EQL)(S,M,CallerInfo).


%% local_mvd/3
local_mvd(S,MethSign,CallerInfo) :-
	var(MethSign),
	FLTRAILERPREFIX(WRAP_MVD_EQL)(S,M,_V,CallerInfo),
	%% Should have a cut here when XSB will allow
	flora_funct_arity(M,MethSign).

local_mvd(S,MethSign,CallerInfo) :-
	var(MethSign),
	!,
	FLTRAILERPREFIX(WRAP_MVDDEF_EQL)(S,M,CallerInfo),
	flora_funct_arity(M,MethSign).

local_mvd(S,MethSign,CallerInfo) :-
	nonvar(MethSign), % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	FLTRAILERPREFIX(WRAP_MVD_EQL)(S,M,_V,CallerInfo).
	%% Should have a cut here when XSB will allow

local_mvd(S,MethSign,CallerInfo) :-
	nonvar(MethSign), % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	FLTRAILERPREFIX(WRAP_MVDDEF_EQL)(S,M,CallerInfo).


%% local_imeth/3
local_imeth(S,MethSign,CallerInfo) :-
	var(MethSign),
	!,
	FLTRAILERPREFIX(WRAP_IMETH_EQL)(S,M,CallerInfo),
	%% Should have a cut here when XSB will allow
	flora_funct_arity(M,MethSign).

local_imeth(S,MethSign,CallerInfo) :-
	nonvar(MethSign), % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	FLTRAILERPREFIX(WRAP_IMETH_EQL)(S,M,CallerInfo).
	%% Should have a cut here when XSB will allow


%% local_meth/3
local_meth(S,MethSign,CallerInfo) :-
	var(MethSign),
	!,
	FLTRAILERPREFIX(WRAP_METH_EQL)(S,M,CallerInfo),
	%% Should have a cut here when XSB will allow
	flora_funct_arity(M,MethSign).

local_meth(S,MethSign,CallerInfo) :-
	nonvar(MethSign), % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	FLTRAILERPREFIX(WRAP_METH_EQL)(S,M,CallerInfo).
	%% Should have a cut here when XSB will allow


/*****************************************************************************
  nonmonotonic multiple inheritance of multivalued attributes
  from superclasses to subclasses
*****************************************************************************/
WRAP_IMVD(C,M,V,CallerInfo) :-
	FLTRAILERPREFIX(WRAP_IMVD_EQL)(C,M,V,CallerInfo).

WRAP_IMVD(C,M,V,CallerInfo) :-
	var(M),
	!,
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_imvd(C,MethSign,CallerInfo))),
	inheritance_sub(C,Super,CallerInfo),
	inheritance_imvd_eql(Super,M,V,CallerInfo),
	flora_funct_arity(M,MethSign),
	candidate_class_imvd(Super,MethSign,C,CallerInfo),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_imvd(C,MethSign,CallerInfo))),
	FLORA_TNOT(multiple_class_imvd(Super,MethSign,C,CallerInfo)).

WRAP_IMVD(C,M,V,CallerInfo) :-
	nonvar(M),  % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_imvd(C,MethSign,CallerInfo))),
	inheritance_sub(C,Super,CallerInfo), %% Optimization
	candidate_class_imvd(Super,MethSign,C,CallerInfo),
	inheritance_imvd_eql(Super,M,V,CallerInfo),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_imvd(C,MethSign,CallerInfo))),
	FLORA_TNOT(multiple_class_imvd(Super,MethSign,C,CallerInfo)).


WRAP_IMVDDEF(C,M,CallerInfo) :-
	FLTRAILERPREFIX(WRAP_IMVDDEF_EQL)(C,M,CallerInfo).

WRAP_IMVDDEF(C,M,CallerInfo) :-
	var(M),
	!,
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_imvd(C,MethSign,CallerInfo))),
	inheritance_sub(C,Super,CallerInfo),
	inheritance_imvddef_eql(Super,M,CallerInfo),
	flora_funct_arity(M,MethSign),
	candidate_class_imvd(Super,MethSign,C,CallerInfo),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_imvd(C,MethSign,CallerInfo))),
	FLORA_TNOT(multiple_class_imvd(Super,MethSign,C,CallerInfo)).

WRAP_IMVDDEF(C,M,CallerInfo) :-
	nonvar(M),  % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_imvd(C,MethSign,CallerInfo))),
	inheritance_sub(C,Super,CallerInfo), %% Optimization
	candidate_class_imvd(Super,MethSign,C,CallerInfo),
	inheritance_imvddef_eql(Super,M,CallerInfo),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_imvd(C,MethSign,CallerInfo))),
	FLORA_TNOT(multiple_class_imvd(Super,MethSign,C,CallerInfo)).

WRAP_IMVDDEF(C,M,CallerInfo) :-
	WRAP_IMVD(C,M,_V,CallerInfo).
	%% Should have a cut here when XSB will allow


/*****************************************************************************
  nonmonotonic multiple inheritance of multivalued attributes
  from superclasses to instances/members
*****************************************************************************/
WRAP_MVD(O,M,V,CallerInfo) :-
	FLTRAILERPREFIX(WRAP_MVD_EQL)(O,M,V,CallerInfo).

WRAP_MVD(O,M,V,CallerInfo) :-
	var(M),
	!,
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_mvd(O,MethSign,CallerInfo))),
	inheritance_isa(O,Super,CallerInfo),
	inheritance_imvd_eql(Super,M,V,CallerInfo),
	flora_funct_arity(M,MethSign),
	candidate_object_imvd(Super,MethSign,O,CallerInfo),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_mvd(O,MethSign,CallerInfo))),
	FLORA_TNOT(multiple_object_imvd(Super,MethSign,O,CallerInfo)).

WRAP_MVD(O,M,V,CallerInfo) :-
	nonvar(M),  % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_mvd(O,MethSign,CallerInfo))),
	%% DON'T uncomment: causes infinite loop in pps.flr/dyn_pps.flr
	%%(nonvar(O) -> inheritance_isa(O,Super,CallerInfo) ; true),
	candidate_object_imvd(Super,MethSign,O,CallerInfo),
	inheritance_imvd_eql(Super,M,V,CallerInfo),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_mvd(O,MethSign,CallerInfo))),
	FLORA_TNOT(multiple_object_imvd(Super,MethSign,O,CallerInfo)).


WRAP_MVDDEF(O,M,CallerInfo) :-
	FLTRAILERPREFIX(WRAP_MVDDEF_EQL)(O,M,CallerInfo).

WRAP_MVDDEF(O,M,CallerInfo) :-
	var(M),
	!,
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_mvd(O,MethSign,CallerInfo))),
	inheritance_isa(O,Super,CallerInfo),
	inheritance_imvddef_eql(Super,M,CallerInfo),
	flora_funct_arity(M,MethSign),
	candidate_object_imvd(Super,MethSign,O,CallerInfo),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_mvd(O,MethSign,CallerInfo))),
	FLORA_TNOT(multiple_object_imvd(Super,MethSign,O,CallerInfo)).

WRAP_MVDDEF(O,M,CallerInfo) :-
	nonvar(M),  % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_mvd(O,MethSign,CallerInfo))),
	%% DON'T uncomment: causes infinite loop in pps.flr/dyn_pps.flr
	%%(nonvar(O) -> inheritance_isa(O,Super,CallerInfo) ; true),
	candidate_object_imvd(Super,MethSign,O,CallerInfo),
	inheritance_imvddef_eql(Super,M,CallerInfo),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_mvd(O,MethSign,CallerInfo))),
	FLORA_TNOT(multiple_object_imvd(Super,MethSign,O,CallerInfo)).

WRAP_MVDDEF(O,M,CallerInfo) :-
	nonvar(M),  % the cut above might not work under local scheduling
	WRAP_MVD(O,M,_V,CallerInfo).
	%% Should have a cut here when XSB will allow


/*****************************************************************************
  monotonic inheritance of binary attributes (tabled methods)
*****************************************************************************/
WRAP_METH(O,M,CallerInfo) :-
	FLTRAILERPREFIX(WRAP_METH_EQL)(O,M,CallerInfo).

/*
WRAP_METH(O,M,CallerInfo) :-
	WRAP_ISA(O,C,CallerInfo),
	WRAP_IMETH(C,M,CallerInfo).
*/

WRAP_METH(O,M,CallerInfo) :-
	var(M),
	!,
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_meth(O,MethSign,CallerInfo))),
	inheritance_isa(O,Super,CallerInfo),
	inheritance_imeth_eql(Super,M,CallerInfo),
	flora_funct_arity(M,MethSign),
	candidate_object_imeth(Super,MethSign,O,CallerInfo),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_meth(O,MethSign,CallerInfo))),
	FLORA_TNOT(multiple_object_imeth(Super,MethSign,O,CallerInfo)).

WRAP_METH(O,M,CallerInfo) :-
	nonvar(M),  % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_meth(O,MethSign,CallerInfo))),
	%% DON'T uncomment: causes infinite loop in pps.flr/dyn_pps.flr
	%%(nonvar(O) -> inheritance_isa(O,Super,CallerInfo) ; true),
	candidate_object_imeth(Super,MethSign,O,CallerInfo),
	inheritance_imeth_eql(Super,M,CallerInfo),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_meth(O,MethSign,CallerInfo))),  /* was local_fd, typo?*/
	FLORA_TNOT(multiple_object_imeth(Super,MethSign,O,CallerInfo)).

%% WRAP_IMETH/3
WRAP_IMETH(C,M,CallerInfo) :-
	FLTRAILERPREFIX(WRAP_IMETH_EQL)(C,M,CallerInfo).

/*
WRAP_IMETH(C,M,CallerInfo) :-
	inheritance_sub(C,S,CallerInfo),
	WRAP_IMETH(S,M,CallerInfo).
*/

WRAP_IMETH(C,M,CallerInfo) :-
	var(M),
	!,
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_imeth(C,MethSign,CallerInfo))),
	inheritance_sub(C,Super,CallerInfo),
	inheritance_imeth_eql(Super,M,CallerInfo),
	flora_funct_arity(M,MethSign),
	candidate_class_imeth(Super,MethSign,C,CallerInfo),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_imeth(C,MethSign,CallerInfo))),
	FLORA_TNOT(multiple_class_imeth(Super,MethSign,C,CallerInfo)).

WRAP_IMETH(C,M,CallerInfo) :-
	nonvar(M),  % the cut above might not work under local scheduling
	flora_funct_arity(M,MethSign),
	IF_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_imeth(C,MethSign,CallerInfo))),
	inheritance_sub(C,Super,CallerInfo), %% Optimization
	candidate_class_imeth(Super,MethSign,C,CallerInfo),
	inheritance_imeth_eql(Super,M,CallerInfo),
	IF_NO_LOCAL_OVERRIDE_OPTIMIZATION(FLORA_TNOT(local_imeth(C,MethSign,CallerInfo))),
	FLORA_TNOT(multiple_class_imeth(Super,MethSign,C,CallerInfo)).



/*****************************************************************************
  nontabled methods (transactions)
*****************************************************************************/
WRAP_TRAN(O,T,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(T,TX,CallerInfo),
	FLTRAILERPREFIX(WRAP_TRAN)(OX,TX,CallerInfo).

/*****************************************************************************
  monotonic inheritance of signatures
*****************************************************************************/
%% WRAP_MVDSIG/4
WRAP_MVDSIG(O,M,R,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(M,MX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(R,RX,CallerInfo),
	FLTRAILERPREFIX(WRAP_MVDSIG)(OX,MX,RX,CallerInfo).

WRAP_MVDSIG(O,M,R,CallerInfo) :-
	WRAP_ISA(O,C,CallerInfo),
	WRAP_IMVDSIG(C,M,R,CallerInfo).


%% WRAP_MVDCONDEF/5 
WRAP_MVDCONDEF(O,M,L,H,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(M,MX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(H,HX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(L,LX,CallerInfo),
	FLTRAILERPREFIX(WRAP_MVDCONDEF)(OX,MX,LX,HX,CallerInfo).

WRAP_MVDCONDEF(O,M,L,H,CallerInfo) :-
	WRAP_ISA(O,C,CallerInfo),
	WRAP_IMVDCONDEF(C,M,L,H,CallerInfo).


%% WRAP_MVDSIGDEF/3
WRAP_MVDSIGDEF(O,M,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(M,MX,CallerInfo),
	FLTRAILERPREFIX(WRAP_MVDSIGDEF)(OX,MX,CallerInfo).

WRAP_MVDSIGDEF(O,M,CallerInfo) :-
	WRAP_ISA(O,C,CallerInfo),
	WRAP_IMVDSIGDEF(C,M,CallerInfo).

WRAP_MVDSIGDEF(O,M,CallerInfo) :-
	WRAP_MVDSIG(O,M,_V,CallerInfo).
	%% Should have a cut here when XSB will allow


%% WRAP_IMVDSIG/4
WRAP_IMVDSIG(C,M,R,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(C,CX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(M,MX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(R,RX,CallerInfo),
	FLTRAILERPREFIX(WRAP_IMVDSIG)(CX,MX,RX,CallerInfo).

WRAP_IMVDSIG(C,M,R,CallerInfo) :-
	inheritance_sub(C,S,CallerInfo),
	WRAP_IMVDSIG(S,M,R,CallerInfo).


%% WRAP_IMVDCONDEF/5 
WRAP_IMVDCONDEF(O,M,L,H,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(M,MX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(H,HX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(L,LX,CallerInfo),
	FLTRAILERPREFIX(WRAP_IMVDCONDEF)(OX,MX,LX,HX,CallerInfo).

WRAP_IMVDCONDEF(C1,M,L,H,CallerInfo) :-
	inheritance_sub(C1,C2,CallerInfo),
	WRAP_IMVDCONDEF(C2,M,L,H,CallerInfo).


%% WRAP_IMVDSIGDEF/3
WRAP_IMVDSIGDEF(C,M,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(C,CX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(M,MX,CallerInfo),
	FLTRAILERPREFIX(WRAP_IMVDSIGDEF)(CX,MX,CallerInfo).

WRAP_IMVDSIGDEF(C,M,CallerInfo) :-
	inheritance_sub(C,S,CallerInfo),
	WRAP_IMVDSIGDEF(S,M,CallerInfo).

WRAP_IMVDSIGDEF(C,M,CallerInfo) :-
	WRAP_IMVDSIG(C,M,_V,CallerInfo).
	%% Should have a cut here when XSB will allow


%% WRAP_BOOLSIG/3
WRAP_BOOLSIG(O,M,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(M,MX,CallerInfo),
	FLTRAILERPREFIX(WRAP_BOOLSIG)(OX,MX,CallerInfo).

WRAP_BOOLSIG(O,M,CallerInfo) :-
	WRAP_ISA(O,C,CallerInfo),
	WRAP_IBOOLSIG(C,M,CallerInfo).


%% WRAP_IBOOLSIG/3
WRAP_IBOOLSIG(C,M,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(C,CX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(M,MX,CallerInfo),
	FLTRAILERPREFIX(WRAP_IBOOLSIG)(CX,MX,CallerInfo).

WRAP_IBOOLSIG(C,M,CallerInfo) :-
	inheritance_sub(C,S,CallerInfo),
	WRAP_IBOOLSIG(S,M,CallerInfo).


%% WRAP_TRANSIG/3
WRAP_TRANSIG(O,M,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(O,OX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(M,MX,CallerInfo),
	FLTRAILERPREFIX(WRAP_TRANSIG)(OX,MX,CallerInfo).

WRAP_TRANSIG(O,M,CallerInfo) :-
	WRAP_ISA(O,C,CallerInfo),
	WRAP_ITRANSIG(C,M,CallerInfo).


%% WRAP_ITRANSIG/3
WRAP_ITRANSIG(C,M,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(C,CX,CallerInfo),
	WRAP_DIFFOBJEQL_AUX(M,MX,CallerInfo),
	FLTRAILERPREFIX(WRAP_ITRANSIG)(CX,MX,CallerInfo).

WRAP_ITRANSIG(C,M,CallerInfo) :-
	inheritance_sub(C,S,CallerInfo),
	WRAP_ITRANSIG(S,M,CallerInfo).


/*****************************************************************************
  object existence
*****************************************************************************/
WRAP_EXISTS(X,CallerInfo) :-
	WRAP_DIFFOBJEQL_AUX(X,OX,CallerInfo),
	FLTRAILERPREFIX(WRAP_EXISTS)(OX,CallerInfo).

