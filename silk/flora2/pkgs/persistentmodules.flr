/* File:      pkgs/persistentmodules.flr
**
** Author(s): Michael Kifer
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2008.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/



?- consult(flrpm)@_plg(consult).

:- export
	?[%attach(?,?,?,?)],
	?[%attachNew(?,?,?,?)],
	?[%detach],
	?[%loadDB].


// Module to an existing database
?Module[%attach(?DSN,?DB,?User,?Password)] :-
	checkModule(?Module,'Cannot attach database to module'),
	fllibpm_connect(?DSN,?DB,?User,?Password,?Module)@_plg(flrpm).

// create a new DB and attach Module to it
?Module[%attachNew(?DSN,?DB,?User,?Password)] :-
	fllibpm_create_db(?DSN,?DB,?User,?Password)@_plg(flrpm),
	fllibpm_connect(?DSN,?DB,?User,?Password,?Module)@_plg(flrpm).

?Module[%detach] :-
	checkModule(?Module,'Cannot dettach database from module'),
	fllibpm_disconnect(?Module)@_plg(flrpm).

?Module[%loadDB] :-
	checkModule(?Module,'Cannot load database facts for module'),
	fllibpm_db_to_memory(?Module)@_plg(flrpm).


checkModule(?Module,?ErrMsg) :-
	(\+ atom(?Module) ; ?Module = []),
	flora_abort([?ErrMsg, ': invalid module name ', ?Module])@_plg(flrutils).
checkModule(?Module,?ErrMsg) :-
	\+ flora_module_registry(?Module)@_plg(flrregistry),
	flora_abort([?ErrMsg, ': module ', ?Module, ' is not loaded'])@_plg(flrutils).

checkModule(?_Module,?_ErrMsg) :- true.
