/* File:      include/flrbasetype_iri.flh
**
** Author(s): Michael Kifer
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2008.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/


:- export
	?[_scheme->?],
	?[_user->?],
	?[_host->?],
	?[_port->?],
	?[_path->?],
	?[_query->?],
	?[_fragment->?].

// fixup for _iri plain atom representation
?D[_toString->?V] :-
    (atom(?D) ; is_charlist(?D)@_prolog),
    flora_make_datatype(_iri,(?D),?IRI)@_prolog(flrdatatype_parse),
    flora_printable_type_representation(?IRI,[?_TName,?V])@_prolog(flrdatatype),
    !.

// uri
?D^^_uri[_scheme->?V] :- scheme(?D,?V)@_prolog(flrdatatype), !.
?D^^_uri[_user->?V] :- user(?D,?V)@_prolog(flrdatatype), !.
?D^^_uri[_host->?V] :- host(?D,?V)@_prolog(flrdatatype), !.
?D^^_uri[_port->?V] :- port(?D,?V)@_prolog(flrdatatype), !.
?D^^_uri[_path->?V] :- path(?D,?V)@_prolog(flrdatatype), !.
?D^^_uri[_query->?V] :- query(?D,?V)@_prolog(flrdatatype), !.
?D^^_uri[_fragment->?V] :- fragment(?D,?V)@_prolog(flrdatatype), !.
_uri[_isTypeOf(?_V^^_uri)] :- !.


?D[_scheme->?V] :-
    (atom(?D) ; is_charlist(?D)@_prolog),
    flora_make_datatype(_iri,(?D),?iri)@_prolog(flrdatatype_parse),
    scheme(?iri,?V)@_prolog(flrdatatype), !.
?D[_user->?V] :-
    (atom(?D) ; is_charlist(?D)@_prolog),
    flora_make_datatype(_iri,(?D),?iri)@_prolog(flrdatatype_parse),
    user(?iri,?V)@_prolog(flrdatatype), !.
?D[_host->?V] :-
    (atom(?D) ; is_charlist(?D)@_prolog),
    flora_make_datatype(_iri,(?D),?iri)@_prolog(flrdatatype_parse),
    host(?iri,?V)@_prolog(flrdatatype), !.
?D[_port->?V] :-
    (atom(?D) ; is_charlist(?D)@_prolog),
    flora_make_datatype(_iri,(?D),?iri)@_prolog(flrdatatype_parse),
    port(?iri,?V)@_prolog(flrdatatype), !.
?D[_path->?V] :-
    (atom(?D) ; is_charlist(?D)@_prolog),
    flora_make_datatype(_iri,(?D),?iri)@_prolog(flrdatatype_parse),
    path(?iri,?V)@_prolog(flrdatatype), !.
?D[_query->?V] :-
    (atom(?D) ; is_charlist(?D)@_prolog),
    flora_make_datatype(_iri,(?D),?iri)@_prolog(flrdatatype_parse),
    query(?iri,?V)@_prolog(flrdatatype), !.
?D[_fragment->?V] :-
    (atom(?D) ; is_charlist(?D)@_prolog),
    flora_make_datatype(_iri,(?D),?iri)@_prolog(flrdatatype_parse),
    fragment(?iri,?V)@_prolog(flrdatatype), !.
