/* File:      include/flrbasetype_symbol.flh
**
** Author(s): Michael Kifer
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 2012-2013;
**      and Vulcan, Inc. 2012-2013.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**      http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**
*/

FL_SYMBOL[_concat([]) -> ''] :- !.
FL_SYMBOL[_concat([?Item|?List]) -> ?Result] :-
	!,
    	?Item[_toSymbol->?ItemSym],
	FL_SYMBOL[_concat(?List) -> ?ListSym],
    	flora_concat_atoms([?ItemSym,?ListSym],?Result)@_prolog(flrporting).

// DEPRECATED: this is for backward compatibility; will be removed in the future
:- export ?[_toString->?].
?D[_toString->?VA] :- ?D[_toSymbol->?VA].
    	
// _toSymbol returns symbols - not good, but this is what we do for now
// we need to change all this so that they won't be tabled.
// general
?D[_toSymbol->?VA] :-
	flora_printable_type_representation(?D,[?_T,?V])@_prolog(flrdatatype),
	!,
	('->'(number(?V)@_plg,
	      (number_codes(?V,?VC)@_plg, atom_codes(?VA,?VC)@_plg))@_plg
        ; ?VA = ?V
        ).
?D[_toSymbol->?V] :-
	flora_datatype_name(?D,?TN)@_prolog(flrdatatype),
	(?TN == FL_CHARLIST ; ?TN == FL_SYMBOL),
	!,
	flora_datatype_raw_value(?D,?V)@_prolog(flrdatatype).
/*
?D[_toSymbol->?V] :-
	flora_datatype_name(?D,?TN)@_prolog(flrdatatype),
	?TN \== FL_LISTTYPE,
	!,
	_string[_toType(?D)->?V].
*/
?D[_toSymbol->?V] :-
	flora_decode_oid_as_atom_substitute_vars(?D,?V)@_prolog(flrdecode).

