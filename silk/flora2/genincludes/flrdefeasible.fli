/*******************************************************************************
  file: genincludes/flrdefeasible.fli - A template for generating the include
  				      	file for supporting defeasible
  					reasoning.
  					The use of this file permits us to
  					avoid the use of FLORA-2's
  					meta-features, which speeds up hard
  					cases of defeasible reasoning by 2x.
					Included from ../includes/flrtrailer.flh
  Author(s): Michael Kifer

  Copyright (C) by
       The Research Foundation of the State University of New York, 2008, 2009;
       and Vulcan, Inc., 2008, 2009.

  All rights reserved.

  For information about licensing terms, please see
  http://silk.projects.semwebcentral.org/flora2-license.html

*******************************************************************************/

%%#define USE_HILOG_FOR_OPPOSES_OVERRIDES_CANCEL 1

#include "flora_wspredicates.flh"
:- WRAP_COPY_UNQUOTED 'FLORA_THIS_MODULE_NAME'.
:- WRAP_COPY_UNQUOTED 'FLORA_THIS_WORKSPACE(FL_OPPOSES_UNQUOTED)'.
:- WRAP_COPY_UNQUOTED 'FLORA_THIS_WORKSPACE(FL_OVERRIDES_UNQUOTED)'.
:- WRAP_COPY_UNQUOTED 'FLORA_THIS_WORKSPACE(FL_CANCEL_UNQUOTED)'.

#ifndef USE_HILOG_FOR_OPPOSES_OVERRIDES_CANCEL
:- import flora_predicate_is_defined_lowlevel/1 from flrporting.
#endif

/*
  The following rules connect Prolog predicates
  FL_OPPOSES_AUX/5 and FL_OVERRIDES_AUX/5,
  which are used by defeasible theories, such as flrgclp.flr,
  to user-modules HiLog predicates
  FL_OPPOSES/2, FL_OPPOSES/2 and FL_OPPOSES/4, FL_OPPOSES/4.
*/

/*
   MK: For some reason it is faster to use flrtrim:flora_generalize_last/2,
       when there are many calls to _opposes. Strangely, FLLIBMODOBJ/5 is
       even faster, but is not always correct (cannot take nontabled HiLog as
       argument).

       Also, using WRAP_TABLED_HILOG is faster than
       FLBodyPREFIX(WRAP_TABLED_HILOG).
       Probably because WRAP_TABLED_HILOG is tabled.
*/


%% Base data: p opposes neg p.
%% We do a trick with FL_OPPOSES_AUX/6 to avoid tabling FL_OPPOSES_AUX/5.
?- assert((FL_OPPOSES_AUX('FLORA_THIS_MODULE_NAME',_,H1,_,H2,1) :-
    	    FL_OPPOSES_BASE('FLORA_THIS_MODULE_NAME',H1,H2))).
%% Commutativity of FL_OPPOSES
?- \+clause(FL_OPPOSES_AUX(Mod,_,_,_,_),_),
   assert((FL_OPPOSES_AUX(Mod,T2,H2,T1,H1,2) :- FL_OPPOSES_AUX(Mod,T1,H1,T2,H2,1))),
   assert((FL_OPPOSES_AUX(Mod,T1,H1,T2,H2) :- FL_OPPOSES_AUX(Mod,T1,H1,T2,H2,_))).

%% Interaction of defeat with cancellation:
%% Cancellation rule is disqualified if the rule being canceled has higher
%% priority than the cancellation rule itself
#ifdef USE_HILOG_FOR_OPPOSES_OVERRIDES_CANCEL
FL_DISQUALIFIED_AUX(Tag1,FLBodyPREFIX(WRAP_TABLED_HILOG)(FL_CANCEL,Tag2,_),
	            'FLORA_THIS_MODULE_NAME') :-
    	            FL_OVERRIDES_AUX('FLORA_THIS_MODULE_NAME',
	                             Tag2,_,
			             Tag1,FLBodyPREFIX(WRAP_TABLED_HILOG)(FL_CANCEL,Tag2,_)).
FL_DISQUALIFIED_AUX(Tag1,FLBodyPREFIX(WRAP_TABLED_HILOG)(FL_CANCEL,Tag2,H,_),
	            'FLORA_THIS_MODULE_NAME') :-
    	            FL_OVERRIDES_AUX('FLORA_THIS_MODULE_NAME',
	                             Tag2,H,
			             Tag1,FLBodyPREFIX(WRAP_TABLED_HILOG)(FL_CANCEL,Tag2,H,_)).
#else
FL_DISQUALIFIED_AUX(Tag1,FL_CANCEL(Tag2,_), 'FLORA_THIS_MODULE_NAME') :-
    	            FL_OVERRIDES_AUX('FLORA_THIS_MODULE_NAME',
	                             Tag2,_,
			             Tag1,FL_CANCEL(Tag2,_)).
FL_DISQUALIFIED_AUX(Tag1,FL_CANCEL(Tag2,H,_), 'FLORA_THIS_MODULE_NAME') :-
    	            FL_OVERRIDES_AUX('FLORA_THIS_MODULE_NAME',
	                             Tag2,H,
			             Tag1,FL_CANCEL(Tag2,H,_)).
#endif


%% Connect FL_OPPOSES_AUX, FL_OVERRIDES_AUX, and FL_CANCEL_AUX with
%% user-level %% predicates:
%% FL_OPPOSES/2+4, FL_OVERRIDES/2+4, FL_CANCEL/1+2
?- assert((FL_OPPOSES_AUX('FLORA_THIS_MODULE_NAME',Tag1,H1,Tag2,H2,1) :-
	    flrtrim:flora_generalize_last(H1,HH1),
	    flrtrim:flora_generalize_last(H2,HH2),
            (
#ifdef USE_HILOG_FOR_OPPOSES_OVERRIDES_CANCEL
	       %% top case used when _opposes is HiLog; bottom when it is Prolog
	       WRAP_TABLED_HILOG(FL_OPPOSES,HH1,HH2,_)
#else
	       flora_predicate_is_defined_lowlevel('FLORA_THIS_WORKSPACE(FL_OPPOSES_UNQUOTED)'(_,_,_)),
	       'FLORA_THIS_WORKSPACE(FL_OPPOSES_UNQUOTED)'(HH1,HH2,_Caller)
#endif
	    ;
#ifdef USE_HILOG_FOR_OPPOSES_OVERRIDES_CANCEL
	       %% top case used when _opposes is HiLog; bottom when it is Prolog
	       WRAP_TABLED_HILOG(FL_OPPOSES,Tag1,HH1,Tag2,HH2,_)
#else
	       flora_predicate_is_defined_lowlevel('FLORA_THIS_WORKSPACE(FL_OPPOSES_UNQUOTED)'(_,_,_,_,_)),
	       'FLORA_THIS_WORKSPACE(FL_OPPOSES_UNQUOTED)'(Tag1,HH1,Tag2,HH2,_Caller)
#endif
	    ),
	    flrcanon:show_rule_signature(Tag1,_,_,HH1,_,_,_,_,_),
	    flrcanon:show_rule_signature(Tag2,_,_,HH2,_,_,_,_,_)
	  )).

%% These two are trying to make _opposes to have the same stuff as
%% FL_OPPOSES_AUX. But it does not work.
%% ****** The second rule, in particular, is problematic:
%%        Tag1,Tag2 can be variables, and then they might unify with random
%%        rule tags/heads.
/*
WRAP_TABLED_HILOG(FL_OPPOSES,H1,H2,_) :-
	    flrtrim:flora_generalize_last(H1,HH1),
	    flrtrim:flora_generalize_last(H2,HH2),
	    FL_OPPOSES_AUX('FLORA_THIS_MODULE_NAME',Tag1,HH1,Tag2,HH2),
	    flrcanon:show_rule_signature(Tag1,_,_,HH1,_,_,_,_,_),
	    flrcanon:show_rule_signature(Tag2,_,_,HH2,_,_,_,_,_).
WRAP_TABLED_HILOG(FL_OPPOSES,Tag1,H1,Tag2,H2,_) :-
	    flrtrim:flora_generalize_last(H1,HH1),
	    flrtrim:flora_generalize_last(H2,HH2),
	    FL_OPPOSES_AUX('FLORA_THIS_MODULE_NAME',Tag1,HH1,Tag2,HH2),
	    flrcanon:show_rule_signature(Tag1,_,_,HH1,_,_,_,_,_),
	    flrcanon:show_rule_signature(Tag2,_,_,HH2,_,_,_,_,_).
*/


?- assert((FL_OVERRIDES_AUX('FLORA_THIS_MODULE_NAME',Tag1,H1,Tag2,H2) :-
            %% ???Why not use flrtrim:flora_generalize_last(H1,HH1) here???
            (
#ifdef USE_HILOG_FOR_OPPOSES_OVERRIDES_CANCEL
	       %% top case for when _overrides is HiLog; bottom when it's Prolog
	       WRAP_TABLED_HILOG(FL_OVERRIDES,Tag1,Tag2,_)
#else
	       flora_predicate_is_defined_lowlevel('FLORA_THIS_WORKSPACE(FL_OVERRIDES_UNQUOTED)'(_,_,_)),
	       'FLORA_THIS_WORKSPACE(FL_OVERRIDES_UNQUOTED)'(Tag1,Tag2,_Caller)
#endif
	    ;
#ifdef USE_HILOG_FOR_OPPOSES_OVERRIDES_CANCEL
	       %% top case for when _overrides is HiLog; bottom when it's Prolog
	       WRAP_TABLED_HILOG(FL_OVERRIDES,Tag1,H1,Tag2,H2,_)
#else
	       flora_predicate_is_defined_lowlevel('FLORA_THIS_WORKSPACE(FL_OVERRIDES_UNQUOTED)'(_,_,_,_,_)),
	       'FLORA_THIS_WORKSPACE(FL_OVERRIDES_UNQUOTED)'(Tag1,H1,Tag2,H2,_Caller)
#endif
	    ),
	    flrcanon:show_rule_signature(Tag1,_,_,H1,_,_,_,_,_),
	    flrcanon:show_rule_signature(Tag2,_,_,H2,_,_,_,_,_)
	 )).


?- assert((FL_CANCEL_AUX('FLORA_THIS_MODULE_NAME',Tag,H) :-
	    flrtrim:flora_generalize_last(H,HH),
            (
#ifdef USE_HILOG_FOR_OPPOSES_OVERRIDES_CANCEL
	       %% top case for when _cancel is HiLog; bottom when it's Prolog
	       WRAP_TABLED_HILOG(FL_CANCEL,Tag,_)
#else
	       flora_predicate_is_defined_lowlevel('FLORA_THIS_WORKSPACE(FL_CANCEL_UNQUOTED)'(_,_)),
	       'FLORA_THIS_WORKSPACE(FL_CANCEL_UNQUOTED)'(Tag,_Caller)
#endif
	    ;
#ifdef USE_HILOG_FOR_OPPOSES_OVERRIDES_CANCEL
	       %% top case for when _cancel is HiLog; bottom when it's Prolog
	       WRAP_TABLED_HILOG(FL_CANCEL,Tag,HH,_)
#else
	       flora_predicate_is_defined_lowlevel('FLORA_THIS_WORKSPACE(FL_CANCEL_UNQUOTED)'(_,_,_)),
	       'FLORA_THIS_WORKSPACE(FL_CANCEL_UNQUOTED)'(Tag,HH,_Caller)
#endif
	    ),
	    flrcanon:show_rule_signature(Tag,_,_,HH,_,_,_,_,_)
	 )).

