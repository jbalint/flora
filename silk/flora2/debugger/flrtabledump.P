/* File:      flrtabledump.P
**
** Author(s): Michael Kifer
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 2011;
**      and Vulcan, Inc., 2011.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/

:- compiler_options([xpp_on]).

#include "flora_terms.flh"

:- ensure_loaded('flrtruthvalue.P').

:- import table_dump/2 from dump_table.
:- import member/2 from basics.
:- import flora_unwrap_truthvalued_call/2 from usermod.

:- import flora_unwrap_negation/2 from flrnegation.
:- import
	%%convert_to_body_literal/2,
	convert_to_head_literal/2
   from flrcanon.
:- import
	flora_generalize_last/2
   from flrtrim.
:- import
	flora_abort/1,
	flora_file_op/2 
   from flrporting.

:- import
	flora_write_oid/1,
	flora_decode_oid_as_atom/2
   from flrdecode.

/*
:- import
	flora_hide_this_show/1,
	flora_hide_this_hide/1
   from usermod.
*/

:- export
	flora_dump_tables/2,
	flora_dump_tables/3.


flora_dump_tables(File,AtomicGoal) :-
	flora_dump_tables(File,AtomicGoal,[summary]).
%% Options: details/summary. Details trumps summary
flora_dump_tables(File,AtomicGoal,Options) :-
	atom(File),
	!,
	flora_file_op(tmpfilename,TmpFile),
	(member(details,Options) -> Options1 = [details(true)]
	; Options1 = [summary(true)]
	),
	/*
	(member(details,Options) -> Options1 = [output(true),details(true)]
	; Options1 = [output(true),summary(true)]
	),
	*/
	convert_to_head_literal(AtomicGoal,AtomicGoalH),
	flora_generalize_last(AtomicGoalH,FinalGoal),
	tell(TmpFile),
	dump_all(FinalGoal,Options1),
	told,
	see(TmpFile),
	tell(File),
	convert_to_flora,
	told,
	seen,
	flora_file_op(rm,TmpFile).
	%%true.
flora_dump_tables(_File,_AtomicGoal,_Options) :-
	flora_abort('flora_dump_tables: the first argument must be a file name or userout (for standard output)').

convert_to_flora :-
	repeat,
	read(Term),
	(Term == end_of_file, !
	;
	    nonvar(Term),
	    (Term = (summary = Goal - subgoals(NSG) - total_times_called(NC) - total_answers(R)), NSG =\= 0
	    ;
		Term = (details - Goal - subgoals(NSG) - details(AnsList)), NSG =\= 0
	    ),

	    \+ irrelevant_goal(Goal),

	    /*
	    %% This hides too much. Better do it on a case-by-case basis
	    %% hide whatever the debugger hides
	    convert_to_body_literal(Goal,GoalB),
	    functor(GoalB,FunctorB,_Arity),
	    \+ hide_debug_goal(FunctorB,_Arity),
	    */

	    flora_decode_oid_as_atom(Goal,FloraGoal),
	    write(FloraGoal),
	    write('[total_subgoals->'),
	    write(NSG),
	    write(', '),
	    (nonvar(R)
	    -> write('total_subgoal_answers->'), write(R),
		write(', total_times_called->'), write(NC)
	    ;
		write('subgoal_details->{'),
		write_answers_for_subgoals(AnsList),
		write('}')
	    ),
	    writeln('].'),
	    fail
	),
	!.
convert_to_flora.

dump_all(AtomicGoal,Options) :-
	table_dump(AtomicGoal,Options),
	fail.
dump_all(_,_).

write_answers_for_subgoals([]) :- !.
write_answers_for_subgoals([First|Rest]) :-
	First = Subgoal - calls_to(Calls) - answers(Answers) - AnsList,
	flora_write_oid(Subgoal),
	write('[total_answers->'),
	write(Answers),
	write(', total_calls->'),
	write(Calls),
	write(', answer_list->'),
	flora_write_oid(AnsList),
	write(']'),
	(Rest == [] -> true
	;
	    write(', '),
	    write_answers_for_subgoals(Rest)
	).


/*
%% Hiding rules taken from the debugger
hide_debug_goal(X,Y) :-
	flora_hide_this_hide(pref(X1/Y)), atom(X),atom(X1), str_sub(X1,X,0), !
	;
	flora_hide_this_hide(match(X1/Y)), atom(X),atom(X1), str_sub(X1,X), !.

hide_debug_goal(X,Y) :-
	flora_hide_this_show(pref(X1/Y)), atom(X),atom(X1), str_sub(X1,X,0), !
	;
	flora_hide_this_show(match(X1/Y)), atom(X),atom(X1), str_sub(X1,X), !
	;
	flora_hide_this_show(propermatch(X1/Y)), atom(X),atom(X1), str_sub(X1,X), X1 \= X, !.
*/

irrelevant_goal(Goal) :-
	    %% Hide FLLIBMODOBJ/5
	    Goal = FLLIBMODOBJ(_,_,_,_,_),
	    !.
irrelevant_goal(Goal) :-
	    functor(Goal,Functor,_Arity),
	    (
	      %% not a flora predicate
	      \+ str_sub(FLORA_MODULE_PREFIX,Functor), !
	    ;
	      %% a truth-checking call
	      flora_unwrap_truthvalued_call(Goal,_), !
	    ;
	      %% a negation FL_TABLED_UNNUMBER_CALL.
	      %% These calls are duplicated by positive calls.
	      %% We ignore FL_TABLED_UNNUMBER_CALL because it is
	      %% too confusing to show that to the user.
	      flora_unwrap_negation(Goal,Unwrapped), Goal \== Unwrapped, !
	    ).
