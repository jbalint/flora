/* File:      flrprolog.P -- Flora Prolog definitions
**
** Author(s): Guizhen Yang
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2008.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"


/****************************************************************************
  Flora built-in operators
****************************************************************************/
flora_prlg(FL_IMPLYOP,2) :- !.
flora_prlg(FL_IMPLYOP,1) :- !.
flora_prlg(FL_QUERYOP,1) :- !.

flora_prlg(FL_UNIVEQ,2) :- !.
flora_prlg(FL_UNIVNOTEQ,2) :- !.
flora_prlg(FL_EQ,2) :- !.
flora_prlg(FL_NOTEQ,2) :- !.
flora_prlg(FL_TRYEQ,2) :- !.
flora_prlg(FL_ORDERLT,2) :- !.
flora_prlg(FL_ORDEREQLT,2) :- !.
flora_prlg(FL_ORDERGT,2) :- !.
flora_prlg(FL_ORDEREQGT,2) :- !.
flora_prlg(FL_IS,2) :- !.
flora_prlg(FL_MATHEQ,2) :- !.
flora_prlg(FL_MATHNOTEQ,2) :- !.
flora_prlg(FL_LT,2) :- !.
flora_prlg(FL_EQLT,2) :- !.
flora_prlg(FL_GT,2) :- !.
flora_prlg(FL_EQGT,2) :- !.

flora_prlg(FL_RIGHTTO,2) :- !.
flora_prlg(FL_LEFTTO,2) :- !.

flora_prlg(FL_COMMA,2) :- !.
flora_prlg(FL_SEMICOLON,2) :- !.
flora_prlg(FL_AND,2) :- !.
flora_prlg(FL_OR,2) :- !.

flora_prlg(FL_NOT,1) :- !.
flora_prlg(FL_NEG,1) :- !.

flora_prlg(FL_PLUS,2) :- !.
flora_prlg(FL_MINUS,2) :- !.
flora_prlg(FL_SYMOR,2) :- !.

flora_prlg(FL_EXP,2) :- !.
flora_prlg(FL_EXP,1) :- !.
flora_prlg(FL_LOG,1) :- !.

flora_prlg(FL_FLOOR,1) :- !.
flora_prlg(FL_ROUND,1) :- !.
flora_prlg(FL_ABS,1) :- !.
flora_prlg(FL_FLOATFUNC,1) :- !.

flora_prlg(FL_STAR,2) :- !.
flora_prlg(FL_DBLSTAR,2) :- !.
flora_prlg(FL_SLASH,2) :- !.
flora_prlg(FL_MOD,2) :- !.
flora_prlg(FL_SYMAND,2) :- !.

flora_prlg(FL_PLUS,1) :- !.
flora_prlg(FL_MINUS,1) :- !.

flora_prlg(flora_abort,0) :- !.
flora_prlg(flora_abort,1) :- !.


/****************************************************************************
  XSB predicates that are also useful in FLORA
****************************************************************************/
flora_prlg(abolish_all_tables,0) :- !.
flora_prlg(call,1) :- !.
flora_prlg(compile,1) :- !.
flora_prlg(FL_FALSE,0) :- !.
flora_prlg(FL_FAIL,0) :- !.
flora_prlg(FL_TRUE,0) :- !.
flora_prlg(var,1) :- !.
flora_prlg(nonvar,1) :- !.
flora_prlg(atom,1) :- !.
flora_prlg(is_list,1) :- !.
flora_prlg(is_charlist,1) :- !.
flora_prlg(number,1) :- !.


/****************************************************************************
  FLORA shell commands and commands used to control FLORA from Prolog
****************************************************************************/
flora_prlg('_isloaded',1) :- !.
flora_prlg('_help',0) :- !.
flora_prlg('_all',0) :- !.
flora_prlg('_one',0) :- !.
flora_prlg('_end',0) :- !.
flora_prlg('_halt',0) :- !.
flora_prlg('_demo',1) :- !.
flora_prlg('_warnings',1) :- !.
flora_prlg('_isbasefact',1) :- !.
flora_prlg(FL_COMPILE,1) :- !.
flora_prlg(FL_LOAD,1) :- !.
flora_prlg(FL_COMPILE_ADD,1) :- !.
flora_prlg(FL_ADD,1) :- !.
flora_prlg(FL_SAVE,1) :- !.
flora_prlg(FL_DUMP,1) :- !.
flora_prlg('_trace',0) :- !.
flora_prlg('_trace',1) :- !.
flora_prlg('_notrace',0) :- !.
flora_prlg('_tracelow',0) :- !.
flora_prlg('_tracelow',1) :- !.
flora_prlg('_notracelow',0) :- !.
flora_prlg('_chatter',0) :- !.
flora_prlg('_nochatter',0) :- !.


/****************************************************************************
  FLORA optimization directives
****************************************************************************/
flora_prlg('_optimize',1) :- !.
flora_prlg('_optimize',2) :- !.
flora_prlg('_resetoptimization',1) :- !.
flora_prlg('_resetoptimization',2) :- !.

/****************************************************************************
   After-query hook used to clean up tables in defeasible theories
****************************************************************************/
flora_prlg(FL_DEFEASIBLE_CLEANUP,2) :- !.

flora_prlg(FL_OVERRIDES_AUX,3) :- !.
flora_prlg(FL_OPPOSES_AUX,3) :- !.
flora_prlg(FL_CANCEL_AUX,2) :- !.
flora_prlg(FL_DISQUALIFIED_AUX,2) :- !.

/*
%% If we make FL_UNDEFEATED into Prolog, change bind_head_in_defeat_condition/2
%% in flrcanon.P
flora_prlg(FL_UNDEFEATED,3) :- !.

flora_prlg(FL_CONFLICTS,3) :- !.
flora_prlg(FL_CANDIDATE,2) :- !.
flora_prlg(FL_TRANS_DEFEATS,3) :- !.
flora_prlg(FL_DEFEATED,2) :- !.
flora_prlg(FL_DEFEATS,3) :- !.
flora_prlg(FL_REFUTES,3) :- !.
flora_prlg(FL_REBUTS,3) :- !.
flora_prlg(FL_COMPROMISED,2) :- !.
flora_prlg(FL_DISQUALIFIED,2) :- !.
*/


/* Mathematic functions in is/2 and inequalities */
flora_prlg(FL_MIN,2).
flora_prlg(FL_MAX,2).
flora_prlg(ceiling,1).
flora_prlg(rem,2).
flora_prlg(sqrt,1).
flora_prlg(truncate,1).
flora_prlg(sign,1).

flora_prlg(cos,1).
flora_prlg(sin,1).
flora_prlg(tan,1).
flora_prlg(acos,1).
flora_prlg(asin,1).
flora_prlg(atan,1).
flora_prlg(log10,1).


/****************************************************************************
  definitions
****************************************************************************/
flora_prlgdef(X,Y) :-
	flora_prlg(X,Y),
	!.

flora_prlgdef(X,Y) :-
	(
	%%  flora_get_counter(flora_shell_mode,1) ->
	%%    flora_shprlg(X,Y)
	%%;
	  %% NOTE: flora_dynprlg exists only because of the way import
	  %% is handled in foo@_prolog(mod). In this case, FLORA inserts
	  %% a dynamic declaration which tells that foo is a Prolog predicate.
	  flora_dynprlg(X,Y)
	).


/****************************************************************************
  flora_reset_prolog/0
****************************************************************************/
flora_reset_prolog :- retractall(flora_dynprlg(_,_)).


/****************************************************************************
  flora_define_prolog(+Op,+Arity)
****************************************************************************/
flora_define_prolog(Op,Arity) :-
	(var(Op); var(Arity)),
	!,
	assert(flora_dynprlg(Op,Arity)).

flora_define_prolog(Op,Arity) :-
	( flora_prlg(Op,Arity) ->
	    true
	;
	  assert(flora_dynprlg(Op,Arity))
	).


/****************************************************************************
  flora_shreset_prolog/0
****************************************************************************/
%%flora_shreset_prolog :- retractall(flora_shprlg(_,_)).


/****************************************************************************
  flora_shdefine_prolog(+Op,+Arity)
****************************************************************************/
%%flora_shdefine_prolog(Op,Arity) :-
%%	(var(Op); var(Arity)),
%%	!,
%%	assert(flora_shprlg(Op,Arity)).
%%
%%flora_shdefine_prolog(Op,Arity) :-
%%	( flora_prlg(Op,Arity) ->
%%	    true
%%	;
%%	  assert(flora_shprlg(Op,Arity))
%%	).
