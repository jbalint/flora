/* File:      flrdatatype_parse.P  -- Parser for builtin data types
**
** Author(s): Michael Kifer
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2008.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/


:- compiler_options([xpp_on]).
#include "flora_characters.flh"
#include "flora_terms.flh"
#include "flora_errors.flh"

:- import
	%% is_digit/1,
	is_alpha_or_underscore/1
   from flrlexer.

:- import
	flora_read_parse_compile_build_term/4,
	flora_abort/1
   from flrutils.

:- import
	flora_second_repr/2,
	flora_cut_off_trailing_zeros/2
   from flrdatatype_utils.

:- import
	is_flora_datatypelitlist/1,
	flora_datatypelitlist/2,
	flora_canonical_type_name/2
   from flrdatatype.

:- import
	flora_atom_to_number/2,
	flora_dt_maxDayInMonthFor/3,
	flora_dt_add_duration_to_datetime/3
   from flrtime_arith.

:- import flora_concat_strings/2 from flrporting.

:- import parsing_error/3 from flrparser.

:- export
	flora_parse_datatype/4,
	flora_make_datatype/3.


flora_parse_datatype(DATATYPE(FL_TIME,LitChars),Idx,ParsedDT,Status) :-
	!,
	(LitChars=VARIABLE(VarName)
	-> ParsedDT = FL_TIME(FLVAR(VarName,Idx)), Status=[]
	;
	    parse_time(LitChars,Idx,ERROR_TIME_LITERAL,
		       Hr,Min,Sec,ZSign,ZH,ZM,Status),
	    (Status==[]
	    -> make_datatype(FL_TIME,(Hr,Min,Sec,ZSign,ZH,ZM),ParsedDT)
	    ; true
	    )
	;  parsing_error(Idx,ERROR_TIME_LITERAL,Status)
	).

flora_parse_datatype(DATATYPE(FL_DATE,LitChars),Idx,ParsedDT,Status) :-
	!,
	(LitChars=VARIABLE(VarName)
	-> ParsedDT = FL_DATE(FLVAR(VarName,Idx)), Status=[]
	;
	    parse_date(LitChars,Idx,ERROR_DATE_LITERAL,
		       DSign,Yr,Mo,D,ZSign,ZH,ZM,Status),
	    (Status==[]
	    -> make_datatype(FL_DATE,(DSign,Yr,Mo,D,ZSign,ZH,ZM),ParsedDT)
	    ; true
	    )
	;  parsing_error(Idx,ERROR_DATE_LITERAL,Status)
	).

flora_parse_datatype(DATATYPE(FL_DATETIME,LitChars),Idx,ParsedDT,Status) :-
	!,
	(LitChars=VARIABLE(VarName)
	-> ParsedDT = FL_DATETIME(FLVAR(VarName,Idx)), Status=[]
	;
	    parse_datetime(LitChars,Idx,DSign,Yr,Mo,D,Hr,Min,Sec,ZSign,ZH,ZM,Status),
	    (Status==[]
	    -> make_datatype(FL_DATETIME,
			     (DSign,Yr,Mo,D,Hr,Min,Sec,ZSign,ZH,ZM),
			     ParsedDT)
	    ; true
	    )
	).


flora_parse_datatype(DATATYPE(FL_DURATION,LitChars),Idx,ParsedDT,Status) :-
	!,
	(LitChars=VARIABLE(VarName)
	-> ParsedDT = FL_DURATION(FLVAR(VarName,Idx)), Status=[]
	;
	    parse_duration(LitChars,Idx,DSign,Yr,Mo,D,Hr,Min,Sec,Status),
	    (Status==[]
	    -> make_datatype(FL_DURATION,
			     (DSign,Yr,Mo,D,Hr,Min,Sec),
			     ParsedDT)
	    ; true
	    )
	).


%% Add prefix, localName
flora_parse_datatype(DATATYPE(FL_IRI,LitChars),Idx,ParsedDT,Status) :-
	!,
	(LitChars=VARIABLE(VarName)
	-> ParsedDT = FL_IRI(FLVAR(VarName,Idx)), Status=[]
	;
	    parse_iri(LitChars,Idx,Scheme,Separator,User,Host,Port,Path,Query,Fragm,Status),
	    (Status==[]
	    -> make_datatype(FL_IRI,
			     (Scheme,Separator,User,Host,Port,Path,Query,Fragm),
			     ParsedDT)
	    ; true
	    )
	).

flora_parse_datatype(DATATYPE(FL_LONG,LitChars),Idx,ParsedDT,Status) :-
	!,
	(LitChars=VARIABLE(VarName)
	-> ParsedDT = FL_LONG(FLVAR(VarName,Idx)), Status=[]
	;
	    parse_long(LitChars,Idx,Value,Status),
	    (Status==[]
	    -> make_datatype(FL_LONG,(Value),ParsedDT)
	    ; true
	    )
	).

flora_parse_datatype(DATATYPE(FL_DOUBLE,LitChars),Idx,ParsedDT,Status) :-
	!,
	(LitChars=VARIABLE(VarName)
	-> ParsedDT = FL_DOUBLE(FLVAR(VarName,Idx)), Status=[]
	;
	    parse_double(LitChars,Idx,Value,Status),
	    (Status==[]
	    -> make_datatype(FL_DOUBLE,(Value),ParsedDT)
	    ; true
	    )
	).

flora_parse_datatype(DATATYPE(FL_STRING,LitChars),Idx,ParsedDT,Status) :-
	!,
	(LitChars=VARIABLE(VarName)
	-> ParsedDT = FL_STRING(FLVAR(VarName,Idx)), Status=[]
	;
	    parse_string(LitChars,Idx,Value,Status),
	    (Status==[]
	    -> make_datatype(FL_STRING,(Value),ParsedDT)
	    ; true
	    )
	).

flora_parse_datatype(DATATYPE(FL_CHARLIST,LitChars),Idx,ParsedDT,Status) :-
	!,
	(LitChars=VARIABLE(VarName)
	-> ParsedDT = FL_CHARLIST(FLVAR(VarName,Idx)), Status=[]
	;
	    parse_charlist(LitChars,Idx,Value,Status),
	    (Status==[]
	    -> make_datatype(FL_CHARLIST,(Value),ParsedDT)
	    ; true
	    )
	).


flora_parse_datatype(DATATYPE(FL_LISTTYPE,LitChars),Idx,ParsedDT,Status) :-
	!,
	(LitChars=VARIABLE(VarName)
	-> ParsedDT = FL_LISTTYPE(FLVAR(VarName,Idx)), Status=[]
	;
	    parse_list(LitChars,Idx,Value,Status),
	    (Status==[]
	    -> make_datatype(FL_LISTTYPE,(Value),ParsedDT)
	    ; true
	    )
	).

flora_parse_datatype(DATATYPE(FL_BOOL,LitChars),Idx,ParsedDT,Status) :-
	!,
	(LitChars=VARIABLE(VarName)
	-> ParsedDT = FL_BOOL(FLVAR(VarName,Idx)), Status=[]
	;
	    parse_bool(LitChars,Idx,Value,Status),
	    (Status==[]
	    -> make_datatype(FL_BOOL,(Value),ParsedDT)
	    ; true
	    )
	).

%% Catchall
flora_parse_datatype(DATATYPE(TypeName,DTLiteral),Idx,ParsedDT,Status) :-
	(DTLiteral=VARIABLE(VarName)
	-> ParsedDT = FL_DATATYPE(TypeName, FLVAR(VarName,Idx)),
	    Status = []
	; is_charlist(DTLiteral)
	->
	    make_datatype(TypeName,(DTLiteral),ParsedDT),
	    Status = []
	; is_flora_datatypelitlist(DTLiteral)
	->
	    datatype_litlist_value(DTLiteral,LitListVal),
	    make_datatype(TypeName,LitListVal,ParsedDT),
	    Status = []
	).


%% We leave SecChars in the list form to avoid having floats in the internal
%% representation of the data types. The same float can be a different number
%% depending on the time etc., and having them as internal things is undesirable
parse_time(LitChars,Idx,ErrorMsg,H,M,SecAtm,ZSign,ZH,ZM,Status) :-
	(get_part(LitChars,":",HrChars,LitChars1),
	    get_part(LitChars1,":",MinChars,Rest),
	    (get_part(Rest,"-", SecChars1,ZoneChars)
	    -> ZSign = -1
	    ; get_part(Rest,"+", SecChars1,ZoneChars)
	    -> ZSign = 1
	    ; %% Rest must be the second part: ss.sss or empty ss
		SecChars1 = Rest,
		ZoneChars="",  ZSign=1
	    ),
	    flora_cut_off_trailing_zeros(SecChars1,SecChars),
	    atom_codes(SecAtm,SecChars),
	    (ZoneChars == ""
	    -> ZHChars = "0", ZMChars = "0"
	    ; get_part(ZoneChars,":",ZHChars,ZMChars)
	    )
	-> Status1 = []
	; parsing_error(Idx,ErrorMsg,Status1)
	),
	(Status1 == [] %% check time zone, Hr, Min, etc.
	-> (number_codes(H,HrChars), number_codes(M,MinChars),
	       number_codes(S,SecChars),
	       number_codes(ZH, ZHChars), number_codes(ZM, ZMChars),
	       H < 24, M < 60, H >= 0, M >= 0,
	       0 =< S, S < 60,
	       ZH < 24, ZM < 60, 0 =< ZH, 0 =< ZM
	   -> Status = []
	   ; parsing_error(Idx,ErrorMsg,Status)
	   )
	; Status = Status1
	),
	!.

parse_date(LitChars,Idx,ErrorMsg,DSign,Yr,Mo,D, ZSign, ZH, ZM, Status) :-
	(LitChars = [CH_MINUS|LitChars1]
	-> DSign = -1
	; LitChars = [CH_PLUS|LitChars1]
	-> DSign = 1
	;  DSign = 1, LitChars1 = LitChars
	),
	(get_part(LitChars1,"-",YrChars,LitChars2),
	    get_part(LitChars2,"-",MonChars,LitChars3),
	    (get_part(LitChars3,"-",DayChars,ZoneChars) -> ZSign = -1
	    ; get_part(LitChars3,"+",DayChars,ZoneChars) -> ZSign = 1
	    ; LitChars3 = DayChars, ZSign = 1, ZoneChars = ""
	    ),
	    (ZoneChars == ""
	    -> ZHChars = "0", ZMChars = "0"
	    ; get_part(ZoneChars,":",ZHChars,ZMChars)
	    )
	-> Status1 = []
	; parsing_error(Idx,ErrorMsg,Status1)
	),
	(Status1 == [] %% check time zone, Month, Day, etc.
	->  (number_codes(Mo,MonChars), number_codes(D,DayChars),
		number_codes(Yr,YrChars),
		number_codes(ZH,ZHChars), number_codes(ZM,ZMChars),
		ZH < 24, ZM < 60, Mo < 13,
		0 =< ZH, 0 =< ZM, 0 < Mo,
		0 =< Yr,
		flora_dt_maxDayInMonthFor(Yr,Mo,MaxDay),
		0 < D, D =< MaxDay
	    -> Status = []
	    ;  parsing_error(Idx,ErrorMsg,Status)
	    )
	; Status = Status1
	),
	!.

parse_datetime(LitChars,Idx,
	       DSign,Yr,Mo,D,Hr,Min,Sec,ZSign,ZH,ZM, Status) :-
	( get_part(LitChars,"T",DatePart,TimePart)
	-> parse_date(DatePart,Idx,ERROR_DATETIME_LITERAL,
		      DSign,Yr,Mo,D, _ZSign, _ZH, _ZM, DStatus),
	    (DStatus==[]
	    -> parse_time(TimePart,Idx,ERROR_DATETIME_LITERAL,
			  Hr,Min,Sec,ZSign,ZH,ZM,Status)
	    ; Status=DStatus
	    )
	; parse_date(LitChars,Idx,ERROR_DATETIME_LITERAL,
		      DSign,Yr,Mo,D, ZSign, ZH, ZM,Status),
	    Hr=0, Min=0, Sec=''
	-> true
	;  parsing_error(Idx,ERROR_DATETIME_LITERAL,Status)
	),
	!.

parse_duration(LitChars,_Idx,DSign,Yr,Mo,D,Hr,Min,SecAtm,[]) :-
	(LitChars = [CH_MINUS,CH_P|LitChars1] -> DSign = -1
	; LitChars = [CH_PLUS,CH_P|LitChars1] -> DSign = 1
	;  DSign = 1, LitChars = [CH_P|LitChars1]
	),
	(get_part(LitChars1,"T",DateChars,TimeChars) -> true
	; TimeChars="", DateChars=LitChars1
	),
	(get_part(DateChars,"Y",YrChars,DateChars1), YrChars \== ""
	-> number_codes(Yr,YrChars)
	; Yr=0, DateChars1 = DateChars
	),
	(get_part(DateChars1,"M",MoChars,DateChars2), MoChars \== ""
	 -> number_codes(Mo,MoChars)
	; Mo=0, DateChars2 = DateChars1
	),
	(get_part(DateChars2,"D",DChars,DateChars3), DChars \== ""
	-> number_codes(D,DChars)
	; D=0, DateChars3 = DateChars2
	),
	(get_part(TimeChars,"H",HrChars,TimeChars1), HrChars \== ""
	-> number_codes(Hr,HrChars)
	; Hr=0, TimeChars1 = TimeChars
	),
	(get_part(TimeChars1,"M",MinChars,TimeChars2), MinChars \== ""
	 -> number_codes(Min,MinChars)
	; Min=0, TimeChars2 = TimeChars1
	),
	(get_part(TimeChars2,"S",SecChars1,""), SecChars1 \== ""
	-> number_codes(Sec,SecChars1), Sec >= 0
	; SecChars1 = ""
	),
	flora_cut_off_trailing_zeros(SecChars1,SecChars),
	atom_codes(SecAtm,SecChars).

parse_duration(_LitChars,Idx,_DSign,_Yr,_Mo,_D,_Hr,_Min,_Sec,Status) :-
	parsing_error(Idx,ERROR_DURATION_LITERAL,Status).


%% scheme://user@host:port/path?query#fragm
parse_iri(LitChars,_Idx,Scheme,Separator,User,Host,Port,Path,Query,Fragm,[]) :-
	get_part(LitChars,":",SchemeChars,Rest),
	(SchemeChars=="urn"
	-> parse_urn_uri(Rest,SeparatorChars,UserChars,HostChars,PortChars,
			 PathChars,QueryChars,FragmChars)
	; SchemeChars=="mailto"
	-> parse_mailto_uri(Rest,SeparatorChars,UserChars,HostChars,PortChars,
			    PathChars,QueryChars,FragmChars)
	;  parse_default_uri(Rest,SeparatorChars,UserChars,HostChars,PortChars,
			     PathChars,QueryChars,FragmChars)
	),
	atom_codes(Scheme,SchemeChars),
	atom_codes(Separator,SeparatorChars),
	atom_codes(User,UserChars),
	atom_codes(Host,HostChars),
	atom_codes(Port,PortChars),
	atom_codes(Path,PathChars),
	atom_codes(Query,QueryChars),
	atom_codes(Fragm,FragmChars),
	!.
parse_iri(_Lits,Idx,_Scheme,_Separator,_User,_Host,_Port,_Path,_Query,_Fragm,Status) :-
	parsing_error(Idx,ERROR_IRI,Status).

parse_urn_uri(LitChars,Separator,User,Host,Port,Path,Query,Fragm) :-
	LitChars = [Char|_],
	is_alpha_or_underscore(Char),
	Separator=":", User=[], Host=[], Port=[], Path=LitChars,
	Query=[], Fragm=[].

parse_mailto_uri(LitChars,Separator,User,Host,Port,Path,Query,Fragm) :-
	LitChars = [Char|_],
	is_alpha_or_underscore(Char),
	get_part(LitChars,"@",User,Host),
	User \== [], Host \== [],
	Separator=":", Port=[], Path=[], Query=[], Fragm=[].

parse_default_uri(LitChars,Separator,User,Host,Port,Path,Query,Fragm) :-
	( get_part(LitChars,"//",[],Rest1) -> Separator="://"
	; Rest1 = LitChars, Separator=":"
	),
	(get_part(Rest1,"@",User,Rest2), !
	; User = [], Rest2 = Rest1
	),
	(get_part(Rest2,":",Host,Rest3) 
	-> ( get_part(Rest3,"/",Port,Rest4) -> true
	   ; Port = Rest3, Rest4 = []
	   )
	; get_part(Rest2,"/",Host,Rest4) -> Port=[]
	; Host=Rest2, Port = [], Rest4 = []  %% no path
	),
	(Rest4 == [] -> Rest5 = []
	; Rest5 = [CH_SLASH|Rest4]
	),
	(get_part(Rest5,"?",Path,Rest6),
	get_part(Rest6,"#",Query,Fragm)
	-> true
	; get_part(Rest5,"?",Path,Query)
	-> Fragm=[]
	; get_part(Rest5,"#",Path,Fragm)
	-> Query=[]
	; Rest5 = Path, Query=[], Fragm=[]
	),
	!.

parse_string(LitChars,_Idx,Value,[]) :-
	atom_codes(Value,LitChars),
	!.
parse_string(_LitChars,Idx,_Value,Status) :-
	parsing_error(Idx,ERROR_STRING,Status).

parse_long(LitChars,_Idx,Value,[]) :-
	number_codes(Value,LitChars),
	integer(Value),
	!.
parse_long(_LitChars,Idx,_Value,Status) :-
	parsing_error(Idx,ERROR_INTEGER,Status).

parse_double(LitChars,_Idx,Value,[]) :-
	number_codes(Value,LitChars),
	real(Value),
	!.
parse_double(_LitChars,Idx,_Value,Status) :-
	parsing_error(Idx,ERROR_REAL,Status).

parse_bool(LitChars,_Idx,Value,[]) :-
	atom_codes(Value,LitChars),
	(Value==true; Value=false),
	!.
parse_bool(_LitChars,Idx,_Value,Status) :-
	parsing_error(Idx,ERROR_BOOLEAN,Status).

parse_charlist(LitChars,_Idx,LitChars,[]) :-
	is_charlist(LitChars),
	!.
parse_charlist(_LitChars,Idx,_Value,Status) :-
	parsing_error(Idx,ERROR_CHARLIST,Status).

parse_list(LitChars,Idx,Value,Status) :-
	is_charlist(LitChars),
	!,
	flora_concat_strings([LitChars,'.'],LitStr),
	(flora_read_parse_compile_build_term(atom(LitStr),Value,_M,LStat)
	-> (LStat = [ok,_] -> Status=[]
	   ; parsing_error(Idx,ERROR_LISTTYPE,Status)
	   )
	; %% cannot fail unless bug
	    parsing_error(Idx,ERROR_LISTTYPE,Status)
	).
parse_list(_LitChars,Idx,_Value,Status) :-
	    parsing_error(Idx,ERROR_LISTTYPE,Status).


/******************************************************************************
       flora_make_datatype(+TypeName,+Args,-TypeObject)

       The difference between this and make_datatype is that the arguments
       here have the type that the user uses, not charlists produced by parsing.
       Since user parameters might be incorrect, we need to check them.
******************************************************************************/

flora_make_datatype(TypeName,Args,TypeObject) :-
	flora_canonical_type_name(TypeName,CanTypeName),
	convert_dt_arguments_if_necessary(CanTypeName,Args,ArgsNew),
	check_and_make_datatype(CanTypeName,ArgsNew,TypePreObject),
	TypeObject = FL_DATATYPE(TypePreObject,TypeName).

check_and_make_datatype(FL_DATE,Args,TypeObject) :-
	!,
	( Args = (DSign,Yr,Mo,D,ZSign,ZH,ZM),
	    (DSign == 1 ; DSign == -1),
	    integer(Yr), 0 < Mo, Mo < 13, 0 < D,
	    flora_dt_maxDayInMonthFor(Yr,Mo,MaxDay),
	    D =< MaxDay,
	    (ZSign == 1; ZSign == -1),
	    0=<ZH, ZH<24, 0=<ZM, ZM<60
	->  make_datatype(FL_DATE,Args,TypeObject)
	;  (atom(Args)->atom_codes(Args,ArgsChars) ; ArgsChars=Args)
	-> flora_parse_datatype(DATATYPE(FL_DATE,ArgsChars),NO_INDEX,TypeObject,Status),
	    (Status == [], ! ; Status = [error(_,Msg)|_], flora_abort(Msg))
	;
	    flora_abort([FL_DATE,'[toType(...) -> ...]: invalid parameters to method'])
	).

check_and_make_datatype(FL_TIME,Args,TypeObject) :-
	!,
	( Args = (Hr,Min,SecAtm,ZSign,ZH,ZM),
	    0=<Hr, Hr<24, 0=<Min, Min<60,
	    flora_atom_to_number(SecAtm,Sec), 0=<Sec, Sec<60,
	    (ZSign == 1; ZSign == -1),
	    0=<ZH, ZH<24, 0=<ZM, ZM<60
	-> make_datatype(FL_TIME,Args,TypeObject)
	; (atom(Args)->atom_codes(Args,ArgsChars) ; ArgsChars=Args)
	-> flora_parse_datatype(DATATYPE(FL_TIME,ArgsChars),NO_INDEX,TypeObject,Status),
	    (Status == [], ! ; Status = [error(_,Msg)|_], flora_abort(Msg))
	;
	    flora_abort([FL_TIME,'[toType(...) -> ...]: invalid parameters to method'])
	).

check_and_make_datatype(FL_DATETIME,Args,TypeObject) :-
	!,
	( Args = (DSign,Yr,Mo,D,Hr,Min,SecAtm,ZSign,ZH,ZM),
	    (DSign == 1 ; DSign == -1),
	    integer(Yr), 0 < Mo, Mo < 13, 0 < D,
	    flora_dt_maxDayInMonthFor(Yr,Mo,MaxDay),
	    D =< MaxDay,
	    0=<Hr, Hr<24, 0=<Min, Min<60,
	    flora_atom_to_number(SecAtm,Sec), 0=<Sec, Sec<60,
	    (ZSign == 1; ZSign == -1),
	    0=<ZH, ZH<24, 0=<ZM, ZM<60
	-> make_datatype(FL_DATETIME,Args,TypeObject)
	;  (atom(Args)->atom_codes(Args,ArgsChars) ; ArgsChars=Args)
	-> flora_parse_datatype(DATATYPE(FL_DATETIME,ArgsChars),NO_INDEX,TypeObject,Status),
	    (Status == [], ! ; Status = [error(_,Msg)|_], flora_abort(Msg))
	;
	    flora_abort([FL_DATETIME,'[toType(...) -> ...]: invalid parameters to method'])
	).

check_and_make_datatype(FL_DURATION,Args,TypeObject) :-
	!,
	( Args = (DSign,Yr,Mo,D,Hr,Min,SecAtm),
	    (DSign == 1 ; DSign == -1),
	    integer(Yr), integer(Mo), integer(D),
	    integer(Hr), integer(Min),
	    flora_atom_to_number(SecAtm,Sec),
	    0 =< Yr, 0 =< Mo, 0 =< D, 0=<Hr, 0=<Min, 0=<Sec
	-> make_datatype(FL_DURATION,Args,TypeObject)
	;  (atom(Args)->atom_codes(Args,ArgsChars) ; ArgsChars=Args)
	-> flora_parse_datatype(DATATYPE(FL_DURATION,ArgsChars),NO_INDEX,TypeObject,Status),
	    (Status == [], ! ; Status = [error(_,Msg)|_], flora_abort(Msg))
	;
	    flora_abort([FL_DURATION,'[toType(...) -> ...]: invalid parameters to method'])
	).

check_and_make_datatype(FL_IRI,Args,TypeObject) :-
	!,
	( Args = (Scheme,User,Host,Port,Path,Query,Fragm),
	    OutArgs = (Scheme,':',User,Host,Port,Path,Query,Fragm),
	    atom(Scheme), atom(User), atom(Host),
	    atom(Port), atom(Path), atom(Query), atom(Fragm)
	-> make_datatype(FL_IRI,OutArgs,TypeObject)
	;  (atom(Args)->atom_codes(Args,ArgsChars) ; ArgsChars=Args)
	-> flora_parse_datatype(DATATYPE(FL_IRI,ArgsChars),NO_INDEX,TypeObject,Status),
	    (Status == [], ! ; Status = [error(_,Msg)|_], flora_abort(Msg))
	;
	    flora_abort([FL_IRI,'[toType(...) -> ...]: invalid parameters to method'])
	).

check_and_make_datatype(FL_LONG,(Value),TypeObject) :-
	!,
	( integer(Value)
	-> make_datatype(FL_LONG,(Value),TypeObject)
	;
	    flora_abort([FL_LONG,'[toType(...) -> ...]: invalid parameters to method'])
	).


check_and_make_datatype(FL_DOUBLE,(Value),TypeObject) :-
	!,
	( float(Value)
	-> make_datatype(FL_DOUBLE,(Value),TypeObject)
	;
	    flora_abort([FL_DOUBLE,'[toType(...) -> ...]: invalid parameters to method'])
	).

check_and_make_datatype(FL_STRING,(Value),TypeObject) :-
	!,
	( atom(Value)
	-> make_datatype(FL_STRING,(Value),TypeObject)
	;
	    flora_abort([FL_STRING,'[toType(...) -> ...]: invalid parameters to method'])
	).

check_and_make_datatype(FL_CHARLIST,(Value),TypeObject) :-
	!,
	( is_charlist(Value)
	-> make_datatype(FL_CHARLIST,(Value),TypeObject)
	;
	    flora_abort([FL_CHARLIST,'[toType(...) -> ...]: invalid parameters to method'])
	).

check_and_make_datatype(FL_BOOL,(Value),TypeObject) :-
	!,
	( (Value == FL_TRUECONST; Value == FL_FALSECONST)
	-> make_datatype(FL_BOOL,(Value),TypeObject)
	;
	    flora_abort([FL_BOOL,'[toType(...) -> ...]: invalid parameters to method'])
	).

check_and_make_datatype(FL_LISTTYPE,(Value),TypeObject) :-
	!,
	( is_list(Value)
	-> make_datatype(FL_LISTTYPE,(Value),TypeObject)
	;
	    flora_abort([FL_LISTTYPE,'[toType(...) -> ...]: invalid parameters to method'])
	).

check_and_make_datatype(Type,Args,TypeObject) :-
	flora_canonical_type_name(Type,CanTypeName),
	Type \= CanTypeName,
	!,
	make_datatype(CanTypeName,Args,TypeObject).

%% Rest: foo"bar"^^foo represented as _datatype(_datatype(foo,[98,97,114]),foo)
check_and_make_datatype(Type,Args,TypeObject) :-
	Args = (Arg),
	atomic(Arg),
	!,
	make_datatype(Type,Args,TypeObject).

%% error: if the number of args is > 1 and type is unknown
check_and_make_datatype(Type,_Args,_TypeObject) :-
	flora_abort([Type,'[toType(...) -> ...]: for the ', Type, ' datatype, toType(...) takes only 1 argument']).


%%%%%%%%%%%%%%%%%%%% Utils


%% gets the part of charlist that precedes Pattern.
%% Returns Part and the remainder of Chars after the pattern
%% Fails if pattern not found
get_part(Chars,Pattern,Part,Rest) :-
	get_part_aux(Chars,Pattern,Part1,Rest),
	(Part1==[] -> Part = []
	; Part = Part1
	).
get_part_aux(Chars,Pattern,[],Rest) :-
	startsWith_list(Pattern,Chars,Rest),
	!.
get_part_aux([C|Chars],Pattern,[C|Part],Rest) :-
	get_part_aux(Chars,Pattern,Part,Rest).

startsWith_list([],List,List) :- !.
startsWith_list([C|Pattern],[C|Chars],Rest) :-
	startsWith_list(Pattern,Chars,Rest).



/*************************************************************************
    make_datatype(+TypeName,+Args,-TypeObject)

    This is an internal predicate that takes whatever parsing produces
    and creates the corresponding data type.
    The external predicate is flora_make_datatype/3
*************************************************************************/

make_datatype(FL_TIME,
	      (Hr,Min,Sec,ZSign,ZH,ZM),
	      FL_TIME(Hr,Min,Sec,ZSign,ZH,ZM,NumValue)) :-
	complex_type_numeric_value(FL_TIME,(Hr,Min,Sec,ZSign,ZH,ZM),NumValue),
	!.

make_datatype(FL_DATE,
	      (DSign,Yr,Mo,D,ZSign,ZH,ZM),
	      FL_DATE(DSign,Yr,Mo,D,ZSign,ZH,ZM,NumValue)) :-
	complex_type_numeric_value(FL_DATE,(DSign,Yr,Mo,D,ZSign,ZH,ZM),NumValue),
	!.

make_datatype(FL_DATETIME,
	      (DSign,Yr,Mo,D,Hr,Min,Sec,ZSign,ZH,ZM),
	      FL_DATETIME(DSign,Yr,Mo,D,Hr,Min,Sec,ZSign,ZH,ZM,
			  NumValue)) :-
	complex_type_numeric_value(FL_DATETIME,
				   (DSign,Yr,Mo,D,Hr,Min,Sec,ZSign,ZH,ZM),
				   NumValue),
	!.

make_datatype(FL_DURATION,
	      (DSign,Yr,Mo,D,Hr,Min,Sec),
	      FL_DURATION(DSign,Yr,Mo,D,Hr,Min,Sec,
			  (DNumVal,MinValue,SecValue))) :-
	%% Reuse FL_DATE and FL_TIME with zone info = 0:0
	complex_type_numeric_value(FL_DATE,(DSign,Yr,Mo,D,1,0,0),(DNumVal,_)),
	complex_type_numeric_value(FL_TIME,(Hr,Min,Sec,1,0,0),(MinValue,SecValue)),
	!.

make_datatype(FL_IRI,
	      (Scheme,Separator,User,Host,Port,Path,Query,Fragm),
	      FL_IRI(Scheme,Separator,User,Host,Port,Path,Query,Fragm)) :-
	!.

make_datatype(FL_LONG,(Value),FL_LONG(Value)) :- !.
make_datatype(FL_DOUBLE,(Value),FL_DOUBLE(Value)) :- !.
make_datatype(FL_STRING,(Value),FL_STRING(Value)) :- !.
make_datatype(FL_CHARLIST,(Value),FL_CHARLIST(Value)) :- !.
make_datatype(FL_BOOL,(Value),FL_BOOL(Value)) :- !.
make_datatype(FL_LISTTYPE,(Value),FL_LISTTYPE(Value)) :- !.
make_datatype(TypeName,(LitChars),FL_DATATYPE(TypeName,LitChars)) :- !.


/*****************************************************************************
          complex_type_numeric_value(+TypeName,+Args,-NumericValue)

   Compute the numeric value of a complex data type.
   Used for comparison with _lessThan
*****************************************************************************/

complex_type_numeric_value(FL_TIME,
			   (H,M,SAtm,ZSign,ZH,ZM),
			   NumericValue) :-
	NumericTM is M + 60 * H,  %% # of mins in time
	NumericValueTZ is 60*ZH + ZM, %% # of mins in TZ
	NumericT is NumericTM - ZSign*NumericValueTZ,
	NumericValue = (NumericT, SAtm),
	!.

complex_type_numeric_value(FL_DATE,
			   (DSign,Y,Mo,D,ZSign,ZH,ZM),
			   NumericValue) :-
	NumericD is DSign * (D + 31 * (Mo + 12 * Y)),
	NumericValueTZ is DSign * ZSign * 60 * ZH + ZM,
	NumericValue = (NumericD, NumericValueTZ),
	!.

complex_type_numeric_value(FL_DATETIME,
			   (DSign,Yr,Month,Day,Hr,Min,Sec,ZSign,ZH,ZM),
			   NumericValue) :-
	(
	  ZoneOp is -ZSign,
	  %% first adjust the date for its timezone
	  flora_dt_add_duration_to_datetime((DSign,Yr,Month,Day,Hr,Min,Sec,1,0,0),
					    (ZoneOp,0,0,0,ZH,ZM,''),
					    (DSign1,Yr1,Month1,Day1,Hr1,Min1,Sec1,ZSign1,ZH1,ZM1)),
	  complex_type_numeric_value(FL_DATE,
				     (DSign1,Yr1,Month1,Day1,1,0,0),
				     (DNumValue,_)),
	  complex_type_numeric_value(FL_TIME,
				     (Hr1,Min1,Sec1,ZSign1,ZH1,ZM1),
				     (MinValue,SecValue))
	-> NumericValue = (DNumValue,MinValue,SecValue)
	; NumericValue = 0
	),
	!.

%% Convert arguments when needed. For instance, Second numbers must be
%% converted into atoms, because this is what is expected
convert_dt_arguments_if_necessary(FL_DATETIME,
				  (DSign,Yr,Month,Day,Hr,Min,Sec,ZSign,ZH,ZM),
				  ArgsNew) :-
	!,
	(atom(Sec) -> SecAtm=Sec
	; flora_second_repr(Sec,SecAtm)
	),
	ArgsNew = (DSign,Yr,Month,Day,Hr,Min,SecAtm,ZSign,ZH,ZM).
	
convert_dt_arguments_if_necessary(FL_TIME,
				  (H,M,Sec,ZSign,ZH,ZM),
				  ArgsNew) :-
	!,
	(atom(Sec) -> SecAtm=Sec
	; flora_second_repr(Sec,SecAtm)
	),
	ArgsNew = (H,M,SecAtm,ZSign,ZH,ZM).
	
convert_dt_arguments_if_necessary(FL_DURATION,
				  (DSign,Yr,Mo,D,Hr,Min,Sec),
				  ArgsNew) :-
	!,
	(atom(Sec) -> SecAtm=Sec
	; flora_second_repr(Sec,SecAtm)
	),
	ArgsNew = (DSign,Yr,Mo,D,Hr,Min,SecAtm).
	

convert_dt_arguments_if_necessary(_Type,Args,Args).


datatype_litlist_value(LitListDT,FL_DATATYPELIST(LitList)) :-
	flora_datatypelitlist(LitListDT,LitList).
