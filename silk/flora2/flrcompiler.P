/* File:      flrcompiler.P  -- The Flora Compiler
**
** Author(s): Guizhen Yang, Michael Kifer
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2008;
**      and Vulcan, Inc., 2008.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/


:- compiler_options([xpp_on]).

#include "flora_errors.flh"
#include "flora_terms.flh"
#include "flora_porting.flh"
#include "flora_exceptions.flh"
#include "flora_characters.flh"

#define NEWVAR	        	newvar
#define NEWPREDICATE        	newpredicate
#define NEWOID                  FL_NEWOID_SYM
#define RULE_NUM                rule_num
#define NEWOID_COUNT        	FL_NEWOID_PREFIX
#define TMPDIRECT        	tmpdirect
#define TMPOPTION	        tmpoption
#define PERMAOPTION	        permaoption
#define COMPILATION_CONTEXT	compcontext
#define DYNRULE_VARLIST         dynrule_varlist

#define  BODYLITERAL     1
#define  HEADLITERAL     2

%% ruleoid is used for numbered anonymous oid generation
:- dynamic ruleoid(_,_,_).
:- dynamic TMPDIRECT(_).
:- dynamic TMPOPTION(_,_).
:- dynamic PERMAOPTION(_).
:- dynamic COMPILATION_CONTEXT(_).
:- dynamic DYNRULE_VARLIST(_,_).

:- index(TMPOPTION/2,trie).


/****************************************************************************
  utilities
****************************************************************************/
is_flrule(FLRULE(Head,Body),Head,Body).
is_flfact(FLFACT(Head),Head).
is_flquery(FLQUERY(Body),Body).
is_fldirective(FLDIRECTIVE(DirectList,I),DirectList,I).
is_fllabeled_construct(FLLABELEDCONSTRUCT(Label,Contents),Label,Contents).

is_fllabel(FLLABEL(Id,Meta,Index),Id,Meta,Index).

is_flexport_list(FLEXPORT_LIST(Term),Term).
is_flexport(FLEXPORT(Term,Modules,IsUpdatable),Term,Modules,IsUpdatable).
is_flexport(FLEXPORT(DynamicModule,Term,Modules,IsUpdatable),DynamicModule,Term,Modules,IsUpdatable).

is_fldynrule(FLDYNRULE(Head,Body,Label),Head,Body,Label).

%% For postprocessing dynrules that were stuch inside insert{...} or delete{...}
is_prdynrule(PRDYNRULE(Head,Body,HVars,BVars,Label),Head,Body,HVars,BVars,Label).

is_flopdef(FLOPDEF(P,A,O),P,A,O).
is_flindex(FLINDEX(A,P),A,P).
is_flsemantics(FLSEMANTICS(A),A).
is_flsetsemantics(FLSETSEMANTICS(A),A).
is_flcmpopt(FLCMPOPT(OptList),OptList).

is_defeasible(FLDEFEASIBLE(Module),Module).

is_verbatim(FLVERBATIM(Instruction),Instruction).

is_flprefixdef(FLPREFIXDEF(PrefixName,PrefixStr),PrefixName,PrefixStr).

is_importmodule(FLIMPORTMOD(Module),Module).

is_flignoredep(FLIGNOREDEP(PredList),PredList).

is_flconjunct(FLCONJUNCT(L,R),L,R).
is_fldisjunct(FLDISJUNCT(L,R),L,R).

is_flnaf(FLNAF(Goal),Goal).
is_flnot(FLNOT(Goal),Goal).
is_flneg(FLNEG(Goal,Idx),Goal,Idx).

is_flload(FLLOAD(LoadList),LoadList).

is_flconstraint(FLCONSTRAINT(ConstrBody),ConstrBody).

is_flemptyterm(FLEMPTYTERM(_Index)).

%% @module
is_flworkspace(FLWORKSPACE(P,WS),P,WS).
%% (dynrule)@module
is_flruleworkspace(FLRULEWORKSPACE(R,WS),R,WS).
%% P@_M
is_flfloralib(FLFLORALIB(P,M),P,M).
%% _M - the workspace itself
is_flfloralib(FLFLORALIB(Mod), Mod).

%% @_prolog(M) and @_prolog
is_flplib(FLPLIB(P,M),P,M).
is_flplib(FLPLIB(P),P).
%% @_prologall and @_prologall(module)
%% Make sure the coder translates P2H_PREDICATE/4 as prolog
is_flpliball(FLPLIBALL(P),P) :-
	flora_define_prolog(P2H_PREDICATE,4).
is_flpliball(FLPLIBALL(P,M),P,M) :-
	flora_define_prolog(P2H_PREDICATE,4).

is_flifthenelse(FLIFTHENELSE(Cond,Then,Else),Cond,Then,Else).
is_flifthen(FLIFTHEN(Cond,Then),Cond,Then).

%% Meta ~
is_fluniveqform(FLUNIVEQFORM(Left,Right),Left,Right).
%% Meta =..
is_flmetauniv(FLMETAUNIV(Left,Right),Left,Right).

is_reifyop(FLREIFYOP(Formula),Formula).

%% Control constructs while-do, while-loop, loop-until, do-until,unless-do
is_flcontrolconstruct(FLWHILEDO(Cond,Action),FLLIBWHILEDO,Cond,Action).
is_flcontrolconstruct(FLWHILELOOP(Cond,Action),FLLIBWHILELOOP,Cond,Action).
is_flcontrolconstruct(FLDOUNTIL(Cond,Action),FLLIBDOUNTIL,Cond,Action).
is_flcontrolconstruct(FLLOOPUNTIL(Cond,Action),FLLIBLOOPUNTIL,Cond,Action).
is_flcontrolconstruct(FLUNLESSDO(Cond,Action),FLLIBUNLESSDO,Cond,Action).

is_flterm(FLTERM(Funct,Arity,Args),Funct,Arity,Args).
is_fltransactionalterm(FLTRANSACTIONALTERM(Funct,Arity,Args),Funct,Arity,Args).
is_flinsert(FLINSERT(Op,List,Cond),Op,List,Cond).
is_flinsert(FLINSERT(Op,List),Op,List).
is_fldelete(FLDELETE(Op,List,Cond),Op,List,Cond).
is_fldelete(FLDELETE(Op,List),Op,List).

is_fltablerefresh(FLREFRESH(List),List).

is_fltruthvalue(FLTRUTHVALUE(Formula,Op),Formula,Op).

is_flclause(FLCLAUSE(Head,Body),Head,Body).
is_flclause(FLCLAUSE(Mode,Head,Body),Mode,Head,Body).
is_fllabeledclause(FLLABELEDCLAUSE(Label,Head,Body),Label,Head,Body).
is_fllabeledclause(FLLABELEDCLAUSE(Label,Mode,Head,Body),Label,Mode,Head,Body).

is_flcatch(FLCATCH(Goal,Error,Handler),Goal,Error,Handler).
is_flthrow(FLTHROW(Error),Error).
is_flp2h(FLP2H(Prolog,Hilog),Prolog,Hilog).

is_flnewoidop(FLNEWOIDOP(Var),Var).

%% Op is needed for newmodule only because of its position information 
is_flcallermodule(FLCALLERMODULE(Op,Var),Op,Var).
%% Op needed for newmodule/erasemodule only because of its position information 
is_flnewmodule(FLNEWMODULE(Op,Module),Op,Module).
is_flerasemodule(FLERASEMODULE(Op,Module),Op,Module).
is_flupdaterule(FLUPDATERULE(Op,RuleList),Op,RuleList).

is_flaggregate(FLAGGREGATE(Op,V,GV,Goal),Op,V,GV,Goal).

%% Binary relationship, like : or ::
is_flbirelate(FLBIRELATE(Obj1,RelType,Obj2),Obj1,RelType,Obj2).
is_flobjspec(FLOBJSPEC(Obj,Spec),Obj,Spec).
%% Represents object reference: O.M, O!M. RefType is ->, ->>, ...
is_flobjref(FLOBJREF(Obj,RefType,Att),Obj,RefType,Att).

%% RefType represents the arrow type: ->, *->, ->, =>>, ...
is_flmvdattspec(FLMVDATTSPEC(Att,RefType,Val),Att,RefType,Val).
is_flsigattspec(FLSIGATTSPEC(Att,RefType,Val),Att,RefType,Val).
is_flsigattconspec(FLSIGATTCONSPEC(Att,Constr,RefType,Val),Att,Constr,RefType,Val).
is_flsigconstr(FLSIGCONSTR(Lower,Upper),Lower,Upper).
is_flincattspec(FLINCATTSPEC(Att,RefType,Val),Att,RefType,Val).
is_fltolistattspec(FLTOLISTATTSPEC(Att,RefType,Val),Att,RefType,Val).
is_flboolsig(FLBOOLSIG(Att,RefType),Att,RefType).
is_fliboolsig(FLIBOOLSIG(Att,RefType),Att,RefType).
is_fltransig(FLTRANSIG(Att,RefType),Att,RefType).
is_flitransig(FLITRANSIG(Att,RefType),Att,RefType).
is_flmethspec(FLMETHSPEC(Meth),Meth).
is_flimethspec(FLIMETHSPEC(IMeth),IMeth).
is_fltranspec(FLTRANSPEC(Tran),Tran).

is_flobjeql(FLOBJEQL(O1,O2),O1,O2).
is_flcut(FLCUT(I),I).

%% constructs like O[X=Y], O[X>Y], O[!], O[true], O[false], are compiled as
%% X=Y, !, true, etc.
is_flpassthru(FLPASSTRU(O),O).

%% basic building blocks
is_flatom(FLATOM(Atom,_I),Atom).
is_flatom(FLATOM(Atom,Index),Atom,Index).
is_fltransactionalatom(FLTRANSACTIONALATOM(Atom,_I),Atom).
is_flnumber(FLNUMBER(Number,_I),Number).
%% transactional numbers are used only in :- index %arity-argument
is_fltransactionalnumber(FLTRANSACTIONALNUMBER(Number,_I),Number).
is_flstring(FLSTRING(String,_I),String).
is_fltransactionalstring(FLTRANSACTIONALSTRING(String,_I),String).
is_fltoken(FLTOKEN(Token,I),Token,I).
is_fltoken(FLTOKEN(Token,Num,I),Token,Num,I).
is_flurisq(FLURISQ(Prefix,Localname),Prefix,Localname).

is_fldatatype(FLDATATYPE(Sort,Literal,Index),Sort,Literal,Index).

is_flbuiltin_identifier(FLBUILTIN_IDENTIFIER(Builtin,_I),Builtin).
is_flbuiltin_identifier(FLBUILTIN_IDENTIFIER(Builtin,I),Builtin,I).

is_flvar(FLVAR(Name,Index),Name,Index).
is_fltransactionalvar(FLTRANSACTIONALVAR(Name,Index),Name,Index).
is_fllist(FLLIST(L,T,I),L,T,I).

is_isaspecop(FL_ISA).
is_subspecop(FL_SUB).
is_mvdrefop(FL_MVD).
is_imvdrefop(FL_INHERIMVD).
is_mvdspecop(FL_MVDARROW).
is_imvdspecop(FL_INMVDARROW).
is_mvdsigspecop(FL_MVDSIGARROW).
is_mvdincspecop(FL_ALLINARROW).
is_imvdincspecop(FL_INALLINARROW).
is_mvdtolistspecop(FL_TOLISTARROW).
is_imvdtolistspecop(FL_INTOLISTARROW).
is_imvdsigspecop(FL_INMVDSIGARR).


/****************************************************************************
  approximate_index(+ParserTerm,-Index)

  It takes a term output from the parser and returns the main index. This
  routine is called when an oid reference is compiled. Since a new variable
  needs to be generated, this main index will represent the textual information
  that corresponds to this new variable.

  Ideally, this procedure should always succeed with a meaningful index,
  since the input is a structure from the parser and corresponds to a
  piece of text in the program file.

  This procedure should be called for a syntax in an oid position.
****************************************************************************/
approximate_index(FLATOM(_Atom,I),I)              :- !.
approximate_index(FLBUILTIN_IDENTIFIER(_Id,I),I)  :- !.
approximate_index(FLDATATYPE(_Type,_Sort,I),I)    :- !.
approximate_index(FLNUMBER(_Number,I),I)      :- !.
approximate_index(FLSTRING(_String,I),I)      :- !.
approximate_index(FLTOKEN(_Token,I),I)        :- !.
approximate_index(FLTOKEN(_Token,_Num,I),I)   :- !.
approximate_index(FLVAR(_Name,I),I)           :- !.
approximate_index(FLLIST(_List,_T,I),I)       :- !.
approximate_index(FLTERM(F,_A,_Args),I)       :- !, approximate_index(F,I).
approximate_index(FLBIRELATE(Obj1,_Rel,_O),I) :- !, approximate_index(Obj1,I).
approximate_index(FLOBJSPEC(Obj,_Spec),I)     :- !, approximate_index(Obj,I).
approximate_index(FLOBJREF(Obj,_Ref,_Att),I)  :- !, approximate_index(Obj,I).
approximate_index(FLURISQ(Prefix,_Local),I)   :- !, approximate_index(Prefix,I).
approximate_index(FLAGGREGATE(Op,_V,_GV,_Goal),I) :- !, approximate_index(Op,I).
approximate_index(FLPLIB(P,_M),I)                 :- !, approximate_index(P,I).
approximate_index(FLPLIB(P),I)                    :- !, approximate_index(P,I).
approximate_index(FLFLORALIB(P,_M),I)             :- !, approximate_index(P,I).
approximate_index(FLWORKSPACE(P,_WS),I)           :- !, approximate_index(P,I).
approximate_index(FLINSERT(Op,_List,_Cond),I)     :- !, approximate_index(Op,I).
approximate_index(FLINSERT(Op,_List),I)           :- !, approximate_index(Op,I).
approximate_index(FLDELETE(Op,_List,_Cond),I)     :- !, approximate_index(Op,I).
approximate_index(FLDELETE(Op,_List),I)           :- !, approximate_index(Op,I).


/****************************************************************************
  encoding utilities
****************************************************************************/
rule_struct(Head,Body,PRRULE(Head,Body)).
fact_struct(Head,PRFACT(Head)).
query_struct(Goal,PRQUERY(Goal)).
directive_struct(Direct,PRDIRECTIVE(Direct)).

%% Label is a tripple: (LblCode,MetaCode,DefeatConditionCode)
dynrule_struct(Head,Body,HVars,BVars,Label,PRDYNRULE(Head,Body,HVars,BVars,Label)) :-
	report_option(FLSYSLIB(FLLIBINSERTRULE_A),NO_INDEX).

reify_struct(Formula,PRREIFY(Formula)) :-
	report_option(FLSYSLIB(FLLIBUNIVEQFORM),NO_INDEX).

%% We use this import directive support mechanism for @_prolog(module)
import_struct(F,N,M,PRIMPORT(F,N,M)).
cmpopt_struct(OptList,PRCMPOPT(OptList)).
ignoredep_struct(SpecList,PRIGNOREDEP(SpecList)).
prefixdef_struct(PrefixName,PrefixStr,PRPREFIXDEF(PrefixName,PrefixStr)).

%%empty module list, all modules allowed
export_struct(TermList,Code) :-
	florasyslib_struct(_Index,FLLIBEXPORT,_N,[TermList],Code).

%% :- importmodule foo.
importmodule_struct(Module,PRIMPORTMOD(Module)).

defeasible_struct(Module,PRDEFEASIBLE(Module)).

verbatim_struct(Instruction,PRVERBATIM(Instruction)).


/****************************************************************************
  conjunct_struct(+Goal1,+Goal2,-Code)
  disjunct_struct(+Goal1,+Goal2,-Code)
  naf_struct(+Goal,-Code)
  not_struct(+Goal,-Code)
  neg_struct(+Goal,+Idx,-Code,-Status)
  head_neg_struct(+Goal,+Idx,-Code,-Status)
****************************************************************************/
conjunct_struct(Goal1,Goal2,Goal2) :- %% only left-conjuncted NULL is ignored
	Goal1 == NULL,
	!.
conjunct_struct(Goal1,Goal2,PRAND(Goal1,Goal2)).

disjunct_struct(Goal1,Goal2,PROR(Goal1,Goal2)).

naf_struct(Goal,PRNAF(Goal)).
not_struct(Goal,PRNOT(Goal)).

%% unlike not/naf, neg can appear in the head
neg_struct(PRAND(Goal1,Goal2),Idx,PROR(Struct1,Struct2),Status) :-
	neg_struct(Goal1,Idx,Struct1,S),
	(S == []
	-> neg_struct(Goal2,Idx,Struct2,Status)
	;  Status = S
	).
neg_struct(PROR(Goal1,Goal2),Idx,PRAND(Struct1,Struct2),Status) :-
	neg_struct(Goal1,Idx,Struct1,S),
	(S == []
	-> neg_struct(Goal2,Idx,Struct2,Status)
	;  Status = S
	).
%% double negation
neg_struct(PRNEG(Goal),_Idx,Goal,[]) :- !.

/*
neg_struct(Goal,Idx,_,[Err]) :-
	is_unimplemented_neg_negatable_literal(Goal),
	!,
	compiling_error(Idx,UNIMPLEMENTED_NEG,Err).
*/
neg_struct(Goal,Idx,_,[Err]) :-
	\+is_body_neg_negatable_literal(Goal),
	!,
	compiling_error(Idx,ILLEGAL_NEG,Err).

neg_struct(Goal,_Idx,Code,[]) :-
	(workspace_struct(PRNEG(L),WS,Goal)
	-> workspace_struct(L,WS,Code) % double negation
	;  workspace_struct(L,WS,Goal)
	-> workspace_struct(PRNEG(L),WS,Code)
	; is_florasyslib_struct(Goal,Idx,FLLIBMODLIT,N,Args)
	-> florasyslib_struct(Idx,FLNEGLIBMODLIT,N,Args,Code)
	; is_florasyslib_struct(Goal,Idx,FLLIBMODOBJ,N,Args)
	-> florasyslib_struct(Idx,FLNEGLIBMODOBJ,N,Args,Code)
	; is_prvariable(Goal,_VarName,Idx),
	    has_compilation_context(goal_reification)
	-> % When variable is negated under ~, as in ?X ~ neg ?Y.
	    thismodule_struct(ThisModule),
	    callerargsterm_struct(ThisModule,CallerInfo),
	    atomobj_struct(FL_INVALIDMODULE,Mod),
	    florasyslib_struct(Idx,FLNEGLIBMODLIT,3,[Goal,Mod,CallerInfo],Code)
	;   Code = PRNEG(Goal)
	).

%% double negation
head_neg_struct(PRNEG(Goal),_Idx,Goal,[]) :- !.

head_neg_struct(Goal,Idx,Code,Status) :-
	%% Normally Goal is a single literal. It can also be a conjunction
	%% where the second conjunct is a cardinality constraint in a signature.
	%% In the latter case, the constraint is ignored.
	%% Any other conjunction is an error.
	conjunct_struct(Goal1,Goal2,Goal),
	ignorable_negated_head_conjunct(Goal2),
	!,
	head_neg_struct(Goal1,Idx,Code,Status).
	
head_neg_struct(Goal,Idx,Code,Status) :-
	workspace_struct(L,WS,Goal),
	!,
	head_neg_struct(L,Idx,Code1,Status),
	(Status==[] -> workspace_struct(Code1,WS,Code)
	; true
	).

head_neg_struct(Goal,_Idx,PRNEG(Goal),[]) :-
	is_head_neg_negatable_literal(Goal),
	!.

head_neg_struct(_Goal,Idx,_Code,[Err]) :-
	compiling_error(Idx,ILLEGAL_NEG,Err).


ignorable_negated_head_conjunct(Goal) :-
	(is_prmvdcondef(Goal) ; is_primvdcondef(Goal)),
	!.
ignorable_negated_head_conjunct(Goal) :-
	workspace_struct(L,_WS,Goal),
	ignorable_negated_head_conjunct(L).


/****************************************************************************
  conjunct_code(+GoalList,-Code)

  Takes a list of goals and constructs a conjunct:
        prand(G1, prand(G2, G3))
  Discards NULLs
  If all are NULLs, returns NULL.
****************************************************************************/
conjunct_code([Goal],Goal).

conjunct_code([NULL|GList],ConjGoal) :- !, conjunct_code(GList,ConjGoal).

conjunct_code([Goal|GList],ConjGoal) :-
	conjunct_code(GList,ConjGoalTail),
	( ConjGoalTail == NULL ->
	    ConjGoal=Goal
	;
	  conjunct_struct(Goal,ConjGoalTail,ConjGoal)
	).


/****************************************************************************
  encoding routines

  Note: Only primitive structures (atoms, variables, numbers, strings, lists,
        newoids, and cuts) encode the index to the corresponding textual
        information. The compiler directives do not encode any textual
        information. However, not all primitive structures have a meaningful
        index, for instance, new variables that are generated for an oid
        reference. In this case, an index is approximated. In some other
        cases, an atom is generated to encode an internal structure. So there
        is no meaningful index. Then the macro NO_INDEX is encoded as a
        place holder. No textual information should be inferred from the
        NO_INDEX value.
****************************************************************************/
%% basic structures
atomobj_struct(FLATOM(Atom,I),PRATOM(Atom,I)) :- !.
atomobj_struct(Atom,PRATOM(Atom,NO_INDEX)) :- atomic(Atom).
atomobj_struct(Atom,Index,PRATOM(Atom,Index)).

transactionalatomobj_struct(FLTRANSACTIONALATOM(Atom,I),PRATOM(Atom,I)) :- !.


atomlit_struct(_Context,FLATOM(Atom,I),Code) :-
	flora_prlgdef(Atom,0),
	!,
	atomobj_struct(FLATOM(Atom,I),AtomCode),
	prologterm_struct(AtomCode,0,[],Code).
atomlit_struct(_Context,FLBUILTIN_IDENTIFIER(Atom,I),Code) :-
	flora_prlgdef(Atom,0),
	!,
	builtin_identifier_struct(FLBUILTIN_IDENTIFIER(Atom,I),AtomCode),
	prologterm_struct(AtomCode,0,[],Code).
atomlit_struct(Context,FLATOM(Atom,I),PRATOMLIT([Atom,Caller],I)) :-
	determine_caller_info(Context,Caller).
atomlit_struct(Context,FLBUILTIN_IDENTIFIER(Atom,I),PRATOMLIT([Atom,Caller],I)) :-
	determine_caller_info(Context,Caller).

transactionalatomlit_struct(Context,FLTRANSACTIONALATOM(Atom,I),PRTRANSACTIONALATOMLIT([Atom,Caller],I)) :-
	determine_caller_info(Context,Caller).

numobj_struct(FLNUMBER(Number,I),PRNUMBER(Number,I)).
%% transactional numbers are used only in :- index %arity-argument
transactionalnumobj_struct(FLTRANSACTIONALNUMBER(Number,I),PRTRANSACTIONALNUMBER(Number,I)).

varobj_struct(FLVAR(Name,Index),PRVARIABLE(Name,Index)).
varobj_struct(Name,Index,PRVARIABLE(Name,Index)).
varobj_struct(Name,PRVARIABLE(Name,NO_INDEX)).

transactionalvarobj_struct(Name,Index,PRVARIABLE(Name,Index)).
transactionalvar_struct(Name,Index,PRTRANSACTIONALVARIABLE(Name,Index)).

strobj_struct(FLSTRING(String,I),PRSTRING(String,I)).
transactionalstrobj_struct(FLTRANSACTIONALSTRING(String,I),PRSTRING(String,I)).

datatypeobj_struct(FLDATATYPE(Sort,Lit,Idx),
		   PRDATATYPE(SortCode,LitCode,OutIdx),
		   Status) :-
	compile_pathexp(Sort,SortCode,_,_,_),
	(is_flvar(Lit,VarName,VarIdx)
	->  add_underscore(VarName,InDataTypeVarName),
	    varobj_struct(InDataTypeVarName,VarIdx,LitCode),
	    OutIdx = VarIdx, Status = []
	; datatype_list_value(Lit,ListOfLits)
	-> compile_datatype_list(ListOfLits,LitCode0,Status),
	    datatype_listvalue_struct(LitCode0,LitCode),
	    OutIdx=Idx
	;
	    LitCode = Lit, OutIdx=Idx, Status = []
	).


builtin_identifier_struct(FLBUILTIN_IDENTIFIER(Builtin,I),
			  PRBUILTIN_IDENTIFIER(Builtin,I)).

urisqobj_struct(FLURISQ(Prefix,Localname),PRURISQ(PrefixAtom,LocalnameStr)) :-
	atomobj_struct(Prefix,PrefixAtom),
	strobj_struct(Localname,LocalnameStr).

urisqobj_struct(FLURISQ(Prefix,Localname),PRURISQ(PrefixPR,LocalnamePR)) :-
	atomobj_struct(Prefix,PrefixPR),
	atomobj_struct(Localname,LocalnamePR).

newoid_struct(Oid,Index,PRNEWOID(Oid,Index)).
cut_struct(Index,PRCUT(Index)).

list_struct(List,Term,Index,PRLIST(List,Term,Index)).
list_struct(List,Term,PRLIST(List,Term,NO_INDEX)).

workspace_struct(P,WS,PRWORKSPACE(P,WS)).
newpredicate_struct(Name,N,Args,PRNEWPRED(Name,N,Args)).
thismodule_struct(PRTHISMODULE(PRTHISMODULE)).

callerargsterm_struct(Caller,CallerInfo) :-
	(has_compilation_context(literal_workspace(WS))
	-> 
	  compile_workspace_term(WS,ArgsCode)
	; has_compilation_context(goal_reification)
	-> thismodule_struct(ArgsCode)
	; has_compilation_context(rule_reification)
	-> ArgsCode = PRDYNCALLERARGSVAR(PRDYNCALLERARGSVAR)
	; %% non-workspace literal in the body
	  thismodule_struct(ArgsCode)
	),
	list_struct([Caller,PRCALLERARGSTERM(ArgsCode)],[],CallerInfo).

workspaceterm_struct(WS,PRWORKSPACETERM(WSTerm)) :-
	compile_workspace_term(WS,WSTerm).

%% Compiles both user and system workspace terms
compile_workspace_term(WS, CompiledWS) :-
	(is_flatom(WS,_Atom,_I) -> atomobj_struct(WS,CompiledWS)
	; is_flvar(WS,_Var,_I) -> varobj_struct(WS,CompiledWS)
	; is_fltoken(WS,FL_THISMODULE,_) -> thismodule_struct(CompiledWS)
	; is_flfloralib(WS,Mod) -> 
	    compile_workspace_term(Mod,WS1),
	    floralib_struct(WS1, CompiledWS) 
	; %% WS may come already compiled as a system workspace or as a var
	    (floralib_struct(_, WS) ; is_varobj_struct(WS))
	-> WS = CompiledWS
	; flora_error_line('[Compiler] bug: Invalid workspace term, ~w', [WS]),
	    throw(FLORA_TOP_LEVEL)
	).

%% For dynamic rules - workspace of the rule: (rule)@WS
%% Otherwise - current module.
context_module_struct(CallerInfo) :-
	has_compilation_context(dynruleworkspace(WSTerm)),
	!,
	callerargsterm_struct(WSTerm,CallerInfo).
context_module_struct(CallerInfo) :-
	has_compilation_context(goal_reification),
	\+ has_compilation_context(rule_reification),
	!,
	flora_new_varobj(NO_INDEX,WSTerm),
	%% with this reification in the head doesn't unify with the body
	%%thismodule_struct(WSTerm), 
	callerargsterm_struct(WSTerm,CallerInfo).
context_module_struct(CallerInfo) :-
	thismodule_struct(WSTerm),
	!,
	callerargsterm_struct(WSTerm,CallerInfo).

%% Represents the special variable, which appears in the rule head, that is
%% bound to the caller name 
callermod_info_structure(Caller) :-
	%% In the head of dynamic rules
	has_compilation_context(compiling_dynrule),
	!,
	list_struct([PRDYNCALLERVAR(PRDYNCALLERVAR),
		     PRDYNCALLERARGSVAR(PRDYNCALLERARGSVAR)],
		    [], Caller).
%% In the head of static rules
callermod_info_structure(Caller) :-
	list_struct([PRCALLERVAR(PRCALLERVAR),PRCALLERARGSVAR(PRCALLERARGSVAR)],
		    [], Caller).

callermod_var_structure(PRDYNCALLERVAR(PRDYNCALLERVAR)) :-
	%% In the head of dynamic rules
	has_compilation_context(compiling_dynrule),
	!.
%% In the head of static rules
callermod_var_structure(PRCALLERVAR(PRCALLERVAR)).

thisstorage_struct(fdb,PRTHISFDBSTORAGE(PRTHISFDBSTORAGE)).
%% support for checking undefinedness
thisstorage_struct(fld,PRTHISFLDSTORAGE(PRTHISFLDSTORAGE)).

floralib_struct(WS,PRFLORALIB(WS)).
storage_struct(WS,PRFDBSTORAGE(WS)).

determine_caller_info(Context,Caller) :-
	(Context==BODYLITERAL -> context_module_struct(Caller)
	; Context==HEADLITERAL -> callermod_info_structure(Caller)
	%% debug
	; flora_error_line('[Compiler] bug: No caller for this context, ~w', [Context]),
	    throw(FLORA_TOP_LEVEL)
	).
splice_in_caller_argument(Context,Args,NewArgs) :-
	determine_caller_info(Context,Caller),
	flatten([Args,Caller],NewArgs).

termlit_struct(_Context,FObj,N,ObjList,Code) :-
	(is_atomobj_struct(FObj,AtomName)
	; is_builtin_identifier_struct(FObj,AtomName)
	),
	flora_prlgdef(AtomName,N),
	!,
	prologterm_struct(FObj,N,ObjList,Code).
termlit_struct(Context,FObj,N,ObjList,PRTERMLIT(FObj,N1,Args)) :-
	splice_in_caller_argument(Context,ObjList,Args),
	length(Args,N1),
	%% integrity check - debug
	(N1 is N+1, !
	; flora_error_line('[Compiler] bug: Assertion N=N1 failed in termlit structure: Obj=~w, Arity=~w, Args=~w, Context=~w',
			   [FObj,N,ObjList,Context]),
	    throw(FLORA_TOP_LEVEL)
	).

transactionaltermlit_struct(Context,FObj,N,ObjList,PRTRANSACTIONALTERMLIT(FObj,N1,Args)) :-
	splice_in_caller_argument(Context,ObjList,Args),
	length(Args,N1),
	%% integrity check - debug
	(N1 is N+1, !
	; flora_error_line('[Compiler] bug: Assertion N=N1 failed in transactionaltermlit structure: Obj=~w, Arity=~w, Args=~w, Context=~w',
			   [FObj,N,ObjList,Context]),
	    throw(FLORA_TOP_LEVEL)
	).

caller_binding_code(Binding,Code) :-
	callermod_var_structure(CallerVar),
	atomobj_struct(FL_SILENT_EQUAL,EqCode),
	prologterm_struct(EqCode,2,[CallerVar,Binding],Code).

is_prtransactionallit(PRTRANSACTIONALTERMLIT(Obj,_,_),I) :-
	probject_index(Obj,I).
is_prtransactionallit(PRTRANSACTIONALATOMLIT(_,I),I).
is_prtransactionallit(PRTRAN(_,Obj,_),I) :- probject_index(Obj,I).

has_prtransactionallit([],_) :- !, fail.
has_prtransactionallit([H|_],Idx) :-
	is_prtransactionallit(H,Idx),
	!.
has_prtransactionallit([_|Rest],Idx) :-
	has_prtransactionallit(Rest,Idx).

probject_index(PRATOM(_,I),I).
probject_index(PRNUMBER(_,I),I).
probject_index(PRSTRING(_,I),I).
probject_index(PRVARIABLE(_,I),I).

/*
   attach_workspace(+WS,+Generator,-GeneratorCode,-WSCode)

   Attaches workspace code to the code produced by Generator
   Generator is a predicate, that produces code for a flora syntactic construct.
   GeneratorCode must be the variable where Generator deposits the code
   it produces.
   WSCode is a var where the final code is produced.
*/
attach_workspace(WS,Generator,GeneratorCode,WSCode) :- 
	set_context(literal_workspace(WS)),
	call(Generator),
	(is_prologterm(GeneratorCode)
	->
	    %% If prolog term occurs under the scope of a FLORA-2 module, 
	    %% ignore the module
	    WSCode = GeneratorCode
	;
	    workspacelit_struct(GeneratorCode,WS,WSCode),
	    clear_context(literal_workspace(WS))
	).

workspacelit_struct(P,WS,Code) :-
	thismodule_struct(ThisModuleName),
	(is_flvar(WS,WSVarName,Index)
	->
	    varobj_struct(WSVarName,Index,WSVarCode),
	    callerargsterm_struct(ThisModuleName,CallerInfo),
	    %% a call to a Flora user module
	    florasyslib_struct(Index,FLLIBMODLIT,3,[P,WSVarCode,CallerInfo],Code)

	%% X@module or X@_module
        %% or %X@module or %X@_module
	; (is_varobj_struct(P,_,Index); is_transactionalvar_struct(P,_,Index))
	->
	    compile_workspace_term(WS,WSCode),
	    set_context(literal_workspace(WS)),
	    callerargsterm_struct(ThisModuleName,CallerInfo),
	    clear_context(literal_workspace(WS)),
	    %% a call to a module
	    florasyslib_struct(Index,FLLIBMODLIT,3,[P,WSCode,CallerInfo],Code)

	; is_flatom(WS,WSAtom,Index) ->
	    atomobj_struct(WSAtom,Index,WSCode),
	    workspace_struct(P,WSCode,Code)

	; is_fltoken(WS,FL_THISMODULE,_) ->
	    thismodule_struct(WSCode),
	    workspace_struct(P,WSCode,Code)
	;
	    %% a Flora system module
	    workspace_struct(P,WS,Code)
	).

%% This is used in situations where a workspace
%% term appears inside a predicate or a molecule,
%% e.g., p(foo@?Mod) or a[b->foo@?Mod] or ?X = aaa#bbb@?Mod
%% or ?Pred@ws or ?Pred@?Mod
workspaceobj_struct(P,WS,Object,Code) :-
	thismodule_struct(ThisModuleName),
	(is_flvar(WS,WSVarName,Index) ->
	    varobj_struct(WSVarName,Index,WSVarCode),
	    flora_new_varobj(Index,Object),
	    callerargsterm_struct(ThisModuleName,CallerInfo),
	    %% code to construct the object for foo@X in arg position,
	    %% i.e., p(foo@X)
	    florasyslib_struct(Index,FLLIBMODOBJ,4,[P,WSVarCode,CallerInfo,Object],Code)

	; is_varobj_struct(P,_,Index)
	->
	    compile_workspace_term(WS,WSCode),
	    flora_new_varobj(Index,Object),
	    callerargsterm_struct(ThisModuleName,CallerInfo),
	    %% code to construct the object for X@... in arg position,
	    %% i.e., p(X@...)
	    florasyslib_struct(Index,FLLIBMODOBJ,4,[P,WSCode,CallerInfo,Object],Code)

	; is_flatom(WS,WSAtom,Index) ->
	    atomobj_struct(WSAtom,Index,WSCode),
	    workspace_struct(P,WSCode,Object),
	    Code=NULL

	; is_fltoken(WS,FL_THISMODULE,_) ->
	    thismodule_struct(WSCode),
	    workspace_struct(P,WSCode,Object),
	    Code=NULL
	;
	  %% a Flora system module
	  Code=NULL,
	  workspace_struct(P,WS,Object)
	).

prologterm_struct(F,N,Args,PROLOGTERM(F,N,Args)).
%% This is used for prolog terms like goo(...)@_prolog(module)
%% when we encode them as module:goo. This is in addition to 
%% :- import goo from module. When XSB allows the notation foo:bar
%% in assert/retract, the :- module feature will be deprecated.
prologterm_struct(F,N,Args,Module,PROLOGTERM(F,N,Args,Module)).

prologliblit_struct(PrologTerm,PROLOGLIBLIT(PrologTerm)).
is_prologterm(PROLOGTERM(_F,_N,_Args)).
is_prologterm(PROLOGTERM(_F,_N,_Args,_Module)).

%% Not all Flora system libraries encode textual information. Only
%% the ones for aggregates and DB updates
florasyslib_struct(F,N,Args,FLORASYSLIB(NO_INDEX,F,N,Args)) :-
	report_option(FLSYSLIB(F),NO_INDEX).
florasyslib_struct(Index,F,N,Args,FLORASYSLIB(Index,F,N,Args)) :-
	report_option(FLSYSLIB(F),Index).

is_florasyslib_struct(FLORASYSLIB(I,F,N,Args), I,F,N,Args).

termobj_struct(FObj,N,ObjList,Code) :-
	(is_atomobj_struct(FObj,AtomName)
	; is_builtin_identifier_struct(FObj,AtomName)
	),
	flora_prlgdef(AtomName,N),
	!,
	prologterm_struct(FObj,N,ObjList,Code).
termobj_struct(FObj,N,ObjList,PRTERM(FObj,N,ObjList)).

%% catch{...,...,...}
catch_struct(Goal,Error,Handler,Code) :-
	florasyslib_struct(FLLIBCATCH,3,[Goal,Error,Handler],Code).

%% throw{...}
throw_struct(Error,Code) :-
	florasyslib_struct(FLLIBTHROW,1,[Error],Code).

%% true{...}, false{...}, unknown{...}
truthvalue_struct(Formula,Opname,Code) :-
	florasyslib_struct(FLLIBTRUTHVALUE,2,[Formula,Opname],Code).

%% p2h{...}
p2h_struct(Prolog,Hilog,Code) :-
	atomobj_struct(P2H_PREDICATE,P2HCode),
	prologterm_struct(P2HCode,4,[Prolog,Hilog,WRAP_HILOG,P2H_DONOT_UNIFY_VARS],Code).

%% newoid{...}
newoidop_struct(Var,Code) :-
	florasyslib_struct(FLLIBNEWOID,1,[Var],Code).

insert_struct(Op,List,Cond,Code) :-
	%% Index denotes the textual information for the insert
	%% operator and represents the textual information for the
	%% entire insert statement.
	is_flatom(Op,OpAtom,Index),
	insert_syslib(OpAtom,Lib),
	florasyslib_struct(Index,Lib,2,[List,Cond],Code).

insert_struct(Op,List,Code) :-
	%% Index denotes the textual information for the insert
	%% operator and represents the textual information for the
	%% entire insert statement.
	is_flatom(Op,OpAtom,Index),
	insert_syslib(OpAtom,Lib),
	florasyslib_struct(Index,Lib,1,[List],Code).

delete_struct(Op,List,Cond,Code) :-
	%% Index denotes the textual information for the delete
	%% operator and represents the textual information for the
	%% entire delete statement.
	is_flatom(Op,OpAtom,Index),
	delete_syslib(OpAtom,Lib),
	florasyslib_struct(Index,Lib,2,[List,Cond],Code).

delete_struct(Op,List,Code) :-
	%% Index denotes the textual information for the delete
	%% operator and represents the textual information for the
	%% entire delete statement.
	is_flatom(Op,OpAtom,Index),
	delete_syslib(OpAtom,Lib),
	florasyslib_struct(Index,Lib,1,[List],Code).

table_refresh_struct(List,Code) :-
	florasyslib_struct(FLLIBREFRESH,1,[List],Code).

clause_struct(Id,Meta,Mode,HeadList,Body,Code) :-
	report_option(FLSYSLIB(FLLIBUNIVEQFORM),NO_INDEX),
	florasyslib_struct(FLLIBCLAUSE,5,[Id,Meta,Mode,HeadList,Body],Code).

insert_rulesig_struct(HeadList,Body,(LblCode,MetaCode,DefeatCond),Newpred,Code) :-
	thismodule_struct(WS),
	florasyslib_struct(FLLIBINSRULESIG,7,[LblCode,WS,HeadList,Body,MetaCode,DefeatCond,Newpred],Code).

insert_syslib(FL_INSERT,FLLIBINSERT) :- !.
insert_syslib(FL_INSERTALL,FLLIBINSERTALL) :- !.

insert_syslib(FL_BTINSERT,FLLIBBTINSERT) :- !.
insert_syslib(FL_BTINSERTALL,FLLIBBTINSERTALL) :- !.

delete_syslib(FL_DELETE,FLLIBDELETE) :-
	report_option(FLSYSLIB(FLLIBUNIVEQFORM),NO_INDEX),
	!.
delete_syslib(FL_DELETEALL,FLLIBDELETEALL) :-
	report_option(FLSYSLIB(FLLIBUNIVEQFORM),NO_INDEX),
	!.
delete_syslib(FL_ERASE,FLLIBERASE) :-
	report_option(FLSYSLIB(FLLIBUNIVEQFORM),NO_INDEX),
	!.
delete_syslib(FL_ERASEALL,FLLIBERASEALL) :-
	report_option(FLSYSLIB(FLLIBUNIVEQFORM),NO_INDEX),
	!.

delete_syslib(FL_BTDELETE,FLLIBBTDELETE) :- !.
delete_syslib(FL_BTDELETEALL,FLLIBBTDELETEALL) :- !.
delete_syslib(FL_BTERASE,FLLIBBTERASE) :- !.
delete_syslib(FL_BTERASEALL,FLLIBBTERASEALL) :- !.

updaterule_syslib(FL_INSERTRULE,FLLIBINSERTRULE_Z) :- 
        !.
updaterule_syslib(FL_INSERTRULE_A,FLLIBINSERTRULE_A) :- 
        !.
updaterule_syslib(FL_INSERTRULE_Z,FLLIBINSERTRULE_Z) :- 
        !.
updaterule_syslib(FL_DELETERULE_A,FLLIBDELETERULE_A) :- 
	report_option(FLSYSLIB(FLLIBUNIVEQFORM),NO_INDEX),
        !.
updaterule_syslib(FL_DELETERULE_Z,FLLIBDELETERULE_Z) :- 
	report_option(FLSYSLIB(FLLIBUNIVEQFORM),NO_INDEX),
        !.
updaterule_syslib(FL_DELETERULE,FLLIBDELETERULE) :- 
	report_option(FLSYSLIB(FLLIBUNIVEQFORM),NO_INDEX),
        !.

is_fldeleteruleop(FL_DELETERULE_A) :- !.
is_fldeleteruleop(FL_DELETERULE_Z) :- !.
is_fldeleteruleop(FL_DELETERULE) :- !.

aggregate_struct(Op,V,GV,B,Object,Code) :-
	%% Index denotes the textual information for the aggregate
	%% operator and represents the textual information for the
	%% entire aggregate statement.
	is_flatom(Op,OpAtom,Index),
	aggregate_syslib(OpAtom,Lib),
	flora_new_varobj(Index,Object),
	( GV == [] ->
	    florasyslib_struct(Index,Lib,3,[V,B,Object],Code)
	;
	  florasyslib_struct(Index,Lib,4,[V,GV,B,Object],Code)
        ),
	!.

aggregate_syslib(FL_MIN,FLLIBMIN) :- !.
aggregate_syslib(FL_MAX,FLLIBMAX) :- !.
aggregate_syslib(FL_SUM,FLLIBSUM) :- !.
aggregate_syslib(FL_AVG,FLLIBAVG) :- !.
aggregate_syslib(FL_COUNT,FLLIBCOUNT) :- !.
aggregate_syslib(FL_COLLECTSET,FLLIBCOLLECTSET) :- !.
aggregate_syslib(FL_COLLECTBAG,FLLIBCOLLECTBAG) :- !.
aggregate_syslib(FL_SET,FLLIBCOLLECTSET) :- !.
aggregate_syslib(FL_BAG,FLLIBCOLLECTBAG) :- !.

objexists_struct(Context,Obj,PREXISTS(Obj,Caller)) :-
	determine_caller_info(Context,Caller).

birelate_struct(LiteralContext,Obj1,RelType,Obj2,Code) :-
	( is_isaspecop(RelType) ->
	    isaspec_struct(LiteralContext,Obj1,Obj2,Code)
	;
	  is_subspecop(RelType),
	  subspec_struct(LiteralContext,Obj1,Obj2,Code)
        ).

isaspec_struct(Context,Obj1,Obj2,PRISA(Obj1,Obj2,Caller)) :-
	determine_caller_info(Context,Caller).

subspec_struct(Context,Obj1,Obj2,PRSUB(Obj1,Obj2,Caller)) :-
	determine_caller_info(Context,Caller).


sigattspec_struct(LiteralContext,Object,AttObj,RefType,ValObj,Code) :-
	(
	  is_mvdsigspecop(RefType) ->
	    mvdsigspec_struct(LiteralContext,Object,AttObj,ValObj,Code)

	; is_imvdsigspecop(RefType) ->
	    imvdsigspec_struct(LiteralContext,Object,AttObj,ValObj,Code)

        ).


sigattconstr_struct(LiteralContext,Object,AttObj,LowerObj,UpperObj,RefType,Code) :-
	(
	is_mvdsigspecop(RefType) ->
	    mvdcon_struct(LiteralContext,Object,AttObj,LowerObj,UpperObj,Code) 

	; is_imvdsigspecop(RefType) ->
	    imvdcon_struct(LiteralContext,Object,AttObj,LowerObj,UpperObj,Code) 
	).


sigattcondef_struct(LiteralContext,Object,AttObj,LowerObj,UpperObj,RefType,Code) :-
	(
	is_mvdsigspecop(RefType) ->
	    mvdcondef_struct(LiteralContext,Object,AttObj,LowerObj,UpperObj,Code) 

	; is_imvdsigspecop(RefType) ->
	    imvdcondef_struct(LiteralContext,Object,AttObj,LowerObj,UpperObj,Code) 
	).

mvdsigspec_struct(Context,Object,AttObj,ValObj,PRMVDSIG(Object,AttObj,ValObj,Caller)) :-
	determine_caller_info(Context,Caller).
imvdsigspec_struct(Context,Object,AttObj,ValObj,PRIMVDSIG(Object,AttObj,ValObj,Caller)) :-
	determine_caller_info(Context,Caller).

mvdcon_struct(Context,Object,AttObj,LowerObj,UpperObj,PRMVDCON(Object,AttObj,LowerObj,UpperObj,Caller)) :-
	determine_caller_info(Context,Caller).
imvdcon_struct(Context,Object,AttObj,LowerObj,UpperObj,PRIMVDCON(Object,AttObj,LowerObj,UpperObj,Caller)) :-
	determine_caller_info(Context,Caller).

mvdcondef_struct(Context,Object,AttObj,LowerObj,UpperObj,PRMVDCONDEF(Object,AttObj,LowerObj,UpperObj,Caller)) :-
	determine_caller_info(Context,Caller).
imvdcondef_struct(Context,Object,AttObj,LowerObj,UpperObj,PRIMVDCONDEF(Object,AttObj,LowerObj,UpperObj,Caller)) :-
	determine_caller_info(Context,Caller).

is_prmvdcondef(PRMVDCONDEF(_Object,_AttObj,_LowerObj,_UpperObj,_Caller)).
is_primvdcondef(PRIMVDCONDEF(_Object,_AttObj,_LowerObj,_UpperObj,_Caller)).

boolsig_struct(Context,Object,AttObj,PRBOOLSIG(Object,AttObj,Caller)):-
	determine_caller_info(Context,Caller).
iboolsig_struct(Context,Object,AttObj,PRIBOOLSIG(Object,AttObj,Caller)):-
	determine_caller_info(Context,Caller).

transig_struct(Context,Object,AttObj,PRTRANSIG(Object,AttObj,Caller)):-
	determine_caller_info(Context,Caller).
itransig_struct(Context,Object,AttObj,PRITRANSIG(Object,AttObj,Caller)):-
	determine_caller_info(Context,Caller).

/*
%% This predicate is defunct now. It was a mistake, which translated
%% a.b[]@ws into a[b->{}]@ws, i.e., MVDDEF and IMVDDEF.
%% But a.b is defined as the object ?X such that a[b->?X], so
%% a.b[] should mean the existence of such an ?X, not that the value of
%% a.b is a possibly empty set. The translation into a[b->{}]@ws makes
%% the semantics of a.b non-uniform, so we abandon it.
%% Furthermore, there was inconsistency because a.b[] was being translated into
%% a[b->?X], but a.b[]@ws was translated into a[b->{}]@ws.
objattdef_struct(LiteralContext,Obj,RefType,Att,Code) :-
	( is_mvdrefop(RefType) ->
	    mvddef_struct(LiteralContext,Obj,Att,Code)
	;
	  is_imvdrefop(RefType),
	  imvddef_struct(LiteralContext,Obj,Att,Code)
        ).
*/

%% This is for ->, *-> when the attribute is defined,
%% but its value is empty set
mvdattdef_struct(LiteralContext,Object,AttObj,RefType,Code) :-
	( is_mvdspecop(RefType) ->
	    mvddef_struct(LiteralContext,Object,AttObj,Code)
	;
	  is_imvdspecop(RefType),
	    imvddef_struct(LiteralContext,Object,AttObj,Code)
        ).

%% This is for =>, *=>, when the attribute is defined,
%% but its value is empty set
sigattdef_struct(LiteralContext,Object,AttObj,RefType,Code) :-
	( 
	  is_mvdsigspecop(RefType) ->
	    mvdsigdef_struct(LiteralContext,Object,AttObj,Code)

	; is_imvdsigspecop(RefType) ->
	    imvdsigdef_struct(LiteralContext,Object,AttObj,Code)

        ).


mvddef_struct(Context,Object,AttObj,PRMVDDEF(Object,AttObj,Caller)) :-
		determine_caller_info(Context,Caller).
imvddef_struct(Context,Object,AttObj,PRIMVDDEF(Object,AttObj,Caller)) :-
		determine_caller_info(Context,Caller).
mvdsigdef_struct(Context,Object,AttObj,PRMVDSIGDEF(Object,AttObj,Caller)) :-
		determine_caller_info(Context,Caller).
imvdsigdef_struct(Context,Object,AttObj,PRIMVDSIGDEF(Object,AttObj,Caller)) :-
		determine_caller_info(Context,Caller).

mvdattspec_struct(LiteralContext,Object,AttObj,RefType,ValObj,Code) :-
	(
	  is_mvdspecop(RefType) ->
	    mvdspec_struct(LiteralContext,Object,AttObj,ValObj,Code)

	; is_imvdspecop(RefType) ->
	    imvdspec_struct(LiteralContext,Object,AttObj,ValObj,Code)
        ).

mvdspec_struct(Context,Object,AttObj,ValObj,PRMVD(Object,AttObj,ValObj,Caller)) :-
		determine_caller_info(Context,Caller).
imvdspec_struct(Context,Object,AttObj,ValObj,PRIMVD(Object,AttObj,ValObj,Caller)) :-
		determine_caller_info(Context,Caller).

%% for +>> and *+>>
%% appears only in the rule body
incattspec_struct(Object,AttObj,RefType,ValObj,Code) :-
	( is_mvdincspecop(RefType) ->
	    mvdincspec_struct(Object,AttObj,ValObj,Code)
	;
	  is_imvdincspecop(RefType),
	  imvdincspec_struct(Object,AttObj,ValObj,Code)
        ).

%% +>>
%% appears only in the rule body
mvdincspec_struct(Object,AttObj,ValObj,PRMVDINC(Object,AttObj,ValObj,CallerInfo)) :-
	thismodule_struct(ThisModule),
	callerargsterm_struct(ThisModule,CallerInfo).
%% *+>>
%% appears only in the rule body
imvdincspec_struct(Object,AttObj,ValObj,PRIMVDINC(Object,AttObj,ValObj,CallerInfo)) :-
	thismodule_struct(ThisModule),
	callerargsterm_struct(ThisModule,CallerInfo).

%% ->->, *->->
%% appears only in the rule body
tolistattspec_struct(Object,AttObj,RefType,ValObj,Code) :-
	( is_mvdtolistspecop(RefType) ->
	    mvdtolistspec_struct(Object,AttObj,ValObj,Code)
	;
	  is_imvdtolistspecop(RefType),
	  imvdtolistspec_struct(Object,AttObj,ValObj,Code)
        ).

mvdtolistspec_struct(Object,AttObj,ValObj,PRMVDTOLIST(Object,AttObj,ValObj,CallerInfo)) :-
	thismodule_struct(ThisModule),
	callerargsterm_struct(ThisModule,CallerInfo).
imvdtolistspec_struct(Object,AttObj,ValObj,PRIMVDTOLIST(Object,AttObj,ValObj,CallerInfo)) :-
	thismodule_struct(ThisModule),
	callerargsterm_struct(ThisModule,CallerInfo).

%% This is called when someting like a.b[] is compiled.
body_objref_struct(Obj,RefType,Att,Index,Val,Code) :-
	%% Index is the approximate textual information
	%% for the new variable that represents an oid.
	flora_new_varobj(Index,Val),
	( is_mvdrefop(RefType) ->
	    mvdspec_struct(BODYLITERAL,Obj,Att,Val,Code)
	;
	  is_imvdrefop(RefType),
	  imvdspec_struct(BODYLITERAL,Obj,Att,Val,Code)
        ).

%% if it is the same with body_objref_struct, combine them later
head_objref_struct(Obj,RefType,Att,Index,Val,Code) :-
	flora_new_varobj(Index,Val), 
        ( is_mvdrefop(RefType) -> 	 
            mvdspec_struct(HEADLITERAL,Obj,Att,Val,Code) 	 
        ; 	 
          is_imvdrefop(RefType), 	 
          imvdspec_struct(HEADLITERAL,Obj,Att,Val,Code) 	 
        ). 	 
 	 

methspec_struct(Context,Obj,Meth,PRMETH(Obj,Meth,Caller)) :-
	determine_caller_info(Context,Caller).
imethspec_struct(Context,Obj,IMeth,PRIMETH(Obj,IMeth,Caller)) :-
	determine_caller_info(Context,Caller).
transpec_struct(Context,Obj,Tran,PRTRAN(Obj,Tran,Caller)) :-
	determine_caller_info(Context,Caller).

objeql_struct(Context,O1,O2,PROBJEQL(O1,O2,Caller)) :-
	determine_caller_info(Context,Caller).


ifthenelse_struct(Cond,Then,Else,Code) :-
	florasyslib_struct(FLLIBIFTHENELSE,3,[Cond,Then,Else],Code).

ifthen_struct(Cond,Then,Code) :-
	florasyslib_struct(FLLIBIFTHEN,2,[Cond,Then],Code).

univeqform_struct(Left,Right,Code) :-
	florasyslib_struct(FLLIBUNIVEQFORM,2,[Left,Right],Code).

%% This handles both ~.. and =..
%% These predicates are defined identically. The only difference is that
%% the LHS arg of ~.. is compiled as meta, while in =.. it is compiled as oid
metauniv_struct(Left,Right,Code) :-
	florasyslib_struct(FLLIBMETAUNIV,2,[Left,Right],Code).

%% encoding for control constructs
controlconstruct_struct(CondCode,ActionCode,Wrapper,Code) :-
	florasyslib_struct(Wrapper,2,[CondCode,ActionCode],Code).

constraint_struct(ConstrCode,PRCONSTRAINT(ConstrCode)).


/****************************************************************************
  reset_newpredicate/0
  new_predicate(-Name)
****************************************************************************/
reset_newpredicate :- flora_set_counter(NEWPREDICATE,1).

new_predicate(Name) :-
	flora_increment_counter(NEWPREDICATE,1,OldVal,_NewVal),
	number_codes(OldVal,OldValLst),
	atom_codes(OldValAtm,OldValLst),
	flora_concat_atoms([NEWPREDICATE,OldValAtm],Name).


/****************************************************************************
  flora_reset_newvar/0
  flora_new_varobj(-CompiledVarObj)
  flora_new_varobjlist(+Number,-List)
****************************************************************************/
flora_reset_newvar :- flora_set_counter(NEWVAR,1).

flora_new_varobj(Index,VarObj) :-
	flora_new_varobj(NEWVAR,Index,VarObj).

%% This is provided for other parts of the compiler, such as flrundefined.P,
%% which need to generate vars. VarPrefix makes sure that names don't clash.
flora_new_varobj(VarPrefix,Index,VarObj) :-
	flora_increment_counter(NEWVAR,1,OldVal,_NewVal),
	number_codes(OldVal,OldValLst),
	atom_codes(OldValAtm,OldValLst),
	flora_concat_atoms([VarPrefix,OldValAtm],Name),
	varobj_struct(Name,Index,VarObj).

new_transactionalvarobj(Index,VarObj) :-
	flora_increment_counter(NEWVAR,1,OldVal,_NewVal),
	number_codes(OldVal,OldValLst),
	atom_codes(OldValAtm,OldValLst),
	flora_concat_atoms([NEWVAR,OldValAtm],Name),
	transactionalvarobj_struct(Name,Index,VarObj).

new_transactionalvar(Index,VarObj) :-
	flora_increment_counter(NEWVAR,1,OldVal,_NewVal),
	number_codes(OldVal,OldValLst),
	atom_codes(OldValAtm,OldValLst),
	flora_concat_atoms([NEWVAR,OldValAtm],Name),
	transactionalvar_struct(Name,Index,VarObj).


new_varobjlist(0,[]) :- !.

new_varobjlist(N,[VarObj|L]) :-
	flora_new_varobj(NO_INDEX,VarObj),
	M is N-1,
	new_varobjlist(M,L).


/****************************************************************************
  reset_newoid/0
  new_oidobj(+Index,-OidObject)
****************************************************************************/
reset_newoid :- flora_set_counter(NEWOID_COUNT,1).

new_oidobj(Index,OidObject) :-
	flora_increment_counter(NEWOID_COUNT,1,OldVal,_NewVal),
	number_codes(OldVal,OldValLst),
	atom_codes(OldValAtm,OldValLst),
	flora_concat_atoms([NEWOID,OldValAtm],Name),
	newoid_struct(Name,Index,OidObject).

/*************************************************************************
  new_oidobj(+RuleNum,+OidNumStr,+Index,-OidObject) :-
*************************************************************************/
new_oidobj(RuleNum,OidNumStr,Index,OidObject) :-
	( ruleoid(OidNumStr,_,Count)
	-> Count_new is Count+1,
	  retract(ruleoid(OidNumStr,_,Count)),
	  assert(ruleoid(OidNumStr,Index,Count_new))
	;  assert(ruleoid(OidNumStr,Index,1))
	), 
	number_codes(RuleNum,RuleNumLst),
	atom_codes(RuleNumAtm,RuleNumLst),
        flora_concat_atoms([NEWOID,RuleNumAtm,'|',OidNumStr],Name),
	newoid_struct(Name,Index,OidObject).


/****************************************************************************
  reset_rulenum

****************************************************************************/
reset_rulenum :- flora_set_counter(RULE_NUM,1).

is_atomobj_struct(PRATOM(Atom,_I),Atom).
is_numobj_struct(PRNUMBER(_Number,_I)).
is_varobj_struct(PRVARIABLE(_Name,_I)).
is_varobj_struct(PRVARIABLE(Name,Index),Name,Index).
is_strobj_struct(PRSTRING(_String,_I)).

is_builtin_identifier_struct(PRBUILTIN_IDENTIFIER(Builtin,_I),Builtin).
is_datatypeobj_struct(PRDATATYPE(Sort,Lit,I),Sort,Lit,I).
is_urisqobj_struct(PRURISQ(_Prefix,_Localname)).

is_transactionalvar_struct(PRTRANSACTIONALVARIABLE(Name,Index),Name,Index).


/****************************************************************************
  allvars(+CompilerTerm,-Vars)
  collects all variables in a term (or a list of terms) into the list Vars.

  allvars(+CompilerTerm,-Vars,-TailVars)
****************************************************************************/
allvars(Term,Vars) :-
	allvars(Term,Vs,[]),
	sort(Vs,Vars).


allvars(Term,Vars,Vars) :-
	(var(Term); atomic(Term)),
	!.

allvars([],Vars,Vars) :- !.

allvars([H|L],Vars,TVars) :-
	!,
	allvars(H,Vars,LVars),
	allvars(L,LVars,TVars).

allvars(Term,[Term|Vars],Vars) :-
	is_varobj_struct(Term),
	!.

allvars(Term,NewVars,Vars) :-
	is_datatypeobj_struct(Term,_Sort,Lit,_),
	!,
	(is_varobj_struct(Lit,_Name,_Indx)
	->
	    NewVars = [Lit|Vars]
	; is_list(Lit)
	-> allvars(Lit,AddlVars),
	    append(AddlVars,Vars,NewVars)
	; is_datatype_listvalue_struct(Lit,LitList)
	-> allvars(LitList,AddlVars),
	    append(AddlVars,Vars,NewVars)
	; NewVars=Vars
	).

allvars(Term,Vars,Vars) :-
	( is_atomobj_struct(Term,_);
	  is_numobj_struct(Term);
	  is_strobj_struct(Term);
	  is_builtin_identifier_struct(Term,_);
	  is_urisqobj_struct(Term)
        ),
	!.

allvars(Term,Vars,TVars) :-
	Term =.. [_F|L],
	allvars(L,Vars,TVars).


/****************************************************************************
  error and warning messages
****************************************************************************/
compiling_error(Index,Msg,error(Index,Msg)).

compiling_warning(Index,Msg,warning(Index,Msg)).


/****************************************************************************
  collect_vars(+ParserTermOrList,-Vars)
  collects all occurrences of variables in a parser term (or a list of parser
  terms) into the list Vars.

  collect_vars(+ParserTerm,-Vars,-TailVars)
****************************************************************************/
collect_vars(ParserTermOrList,Vars) :-
	collect_vars(ParserTermOrList,Vars,[]).

collect_vars(ParserTerm,Vars,Vars) :-
	(var(ParserTerm); atomic(ParserTerm)),
	!.

collect_vars([],Vars,Vars) :- !.

collect_vars([H|L],Vars,TVars) :-
	!,
	collect_vars(H,Vars,LVars),
	collect_vars(L,LVars,TVars).

collect_vars(ParserTerm,[ParserTerm|Vars],Vars) :-
	is_flvar(ParserTerm,_Name,_Index),
	!.

collect_vars(ParserTerm,[NewParserTerm|Vars],Vars) :-
	is_fltransactionalvar(ParserTerm,Name,Index),
	!,
        is_flvar(NewParserTerm,Name,Index).

collect_vars(ParserTerm,NewVars,Vars) :-
	is_fldatatype(ParserTerm,_Sort,Lit,_Index),
	!,
        (is_flvar(Lit,_Name,_Indx)
	-> NewVars = [Lit|Vars]
	; is_list(Lit)
	-> collect_vars(Lit,NewVars,Vars)
	; datatype_listvalue_struct(Lit,ListLit)
	-> collect_vars(ListLit,NewVars,Vars)
	;  NewVars=Vars
	).

collect_vars(ParserTerm,Vars,Vars) :-
	( is_flatom(ParserTerm,_Atom);
          is_fltransactionalatom(ParserTerm,_Atom);
	  is_flnumber(ParserTerm,_Number);
	  is_fltransactionalnumber(ParserTerm,_Number);
	  is_flstring(ParserTerm,_String);
	  is_flbuiltin_identifier(ParserTerm,_Ident);
	  is_flurisq(ParserTerm,_Prefix,_Localname);
	  is_fltransactionalstring(ParserTerm,_String);
	  is_fltoken(ParserTerm,_Token,_I);
	  is_fltoken(ParserTerm,_Token,_Num,_I) 
        ),
	!.

collect_vars(ParserTerm,Vars,TVars) :-
	ParserTerm =.. [_F|L],
	collect_vars(L,Vars,TVars).


/****************************************************************************
  collect_datatype_var_terms(+ParserTermOrList,-DTVarsCode)

  Collects all occurrences of datatype variable terms in a parser term 
  (or a list of parser terms) into the list Vars.
****************************************************************************/
collect_datatype_var_terms(CompilerTermOrList,Vars) :-
	collect_datatype_var_terms(CompilerTermOrList,VarsUnsorted,[]),
	sort(VarsUnsorted,Vars).

collect_datatype_var_terms([],Vars,Vars) :- !.

collect_datatype_var_terms([H|L],Vars,TVars) :-
	!,
	collect_datatype_var_terms(H,Vars,LVars),
	collect_datatype_var_terms(L,LVars,TVars).

%% If there is a variable in data type  ... ?Y^^type ... 
%% then create ?Y = FL_DATATYPE(Sort,?_Y) and collect all these
collect_datatype_var_terms(CompilerTermOrList,NewVars,Vars) :-
	is_prdatatype(CompilerTermOrList,SortCode,VarCode,_Index),
	!,
        (is_prvariable(VarCode,VarName,VarIdx)
	-> strip_underscore(VarName,UsrGivenVarName),
	    varobj_struct(UsrGivenVarName,VarIdx,UsrGivenVarCode),
	    is_datatypeobj_struct(DataTypeVarStruct,SortCode,VarCode,NO_INDEX),
	    atomobj_struct(FL_UNIVEQ,UnivEQCode),
	    prologterm_struct(UnivEQCode,2, [UsrGivenVarCode,DataTypeVarStruct],
			      DatatypeVarCode),
	    NewVars = [DatatypeVarCode|Vars]
	; is_list(VarCode)
	-> collect_datatype_var_terms(VarCode,AddlVars),
	    append(AddlVars,Vars,NewVars)
	; is_datatype_listvalue_struct(VarCode,ListOfLits)
	-> collect_datatype_var_terms(ListOfLits,AddlVars),
	    append(AddlVars,Vars,NewVars)
	;  NewVars=Vars
	).


collect_datatype_var_terms(CompilerTermOrList,Vars,TVars) :-
	CompilerTermOrList =.. [_F|L],
	collect_datatype_var_terms(L,Vars,TVars).


strip_underscore(Atom,NewAtom) :-
	atom_codes(Atom,[_|NewAtomChars]),
	atom_codes(NewAtom,NewAtomChars).

add_underscore(Atom,NewAtom) :-
	atom_codes(Atom,AtomChars),
	atom_codes(NewAtom,[CH_UNDERSCORE|AtomChars]).


/****************************************************************************
  collect_compiled_vars(+CompilerTermOrList,-Vars)
  collects all occurrences of variables in a compiled term (or a list of 
  compiled terms) into the list Vars.

  collect_compiled_vars(+CompilerTerm,-Vars,-TailVars)
****************************************************************************/
collect_compiled_vars(CompilerTermOrList,Vars) :-
	collect_compiled_vars(CompilerTermOrList,Vars,[]).

collect_compiled_vars(CompilerTerm,Vars,Vars) :-
	(var(CompilerTerm); atomic(CompilerTerm)),
	!.

collect_compiled_vars([],Vars,Vars) :- !.

collect_compiled_vars([H|L],Vars,TVars) :-
	!,
	collect_compiled_vars(H,Vars,LVars),
	collect_compiled_vars(L,LVars,TVars).

collect_compiled_vars(CompilerTerm,[CompilerTerm|Vars],Vars) :-
	is_prvariable(CompilerTerm,_Name,_Index),
	!.

collect_compiled_vars(CompilerTerm,[NewCompilerTerm|Vars],Vars) :-
	is_prtransactionalvariable(CompilerTerm,Name,Index),
	!,
        is_prvariable(NewCompilerTerm,Name,Index).

collect_compiled_vars(CompilerTerm,NewVars,Vars) :-
	is_prdatatype(CompilerTerm,_Sort,Lit,_),
	!,
	(is_prvariable(Lit,_,_)
	-> NewVars = [Lit|Vars]
	;  NewVars = Vars
	).

collect_compiled_vars(CompilerTerm,Vars,Vars) :-
	( is_pratom(CompilerTerm,_,_);
	  is_prnumber(CompilerTerm,_,_);
	  is_prtransactionalnumber(CompilerTerm,_,_);
	  is_prstring(CompilerTerm,_,_);
	  is_prbuiltin_identifier(CompilerTerm,_,_);
	  is_prurisq(CompilerTerm,_,_)
        ),
	!.

collect_compiled_vars(CompilerTerm,Vars,TVars) :-
	CompilerTerm =.. [_F|L],
	collect_compiled_vars(L,Vars,TVars).

/****************************************************************************
/****************************************************************************
  subtract_vars(+VarsList1,+VarsList2,-VarsList)
  subtracts the VarsList2 from VarsList1, both of which contain parser term.
  The result is a list of variables whose names do not appear in VarsList2.
  Anonymous variables are considered as distinct names.
****************************************************************************/
subtract_vars([],_,[]) :- !.

subtract_vars([H|T1],L,[H|T2]) :-
	(is_flvar(H,FL_UNDERSCORE,_I);is_fltransactionalvar(H,FL_UNDERSCORE,_I)),
	!,
	subtract_vars(T1,L,T2).

subtract_vars([H|T],L,V) :-
	(is_flvar(H,N,_I);is_fltransactionalvar(H,N,_I)),
	(is_flvar(X,N,_J);is_fltransactionalvar(X,N,_J)),
	member(X,L),
	!,
	subtract_vars(T,L,V).

subtract_vars([H|T1],L,[H|T2]) :-
	subtract_vars(T1,L,T2).


/****************************************************************************
  collect_namevars(+ParserTerm,-QueryVars)
  collects all the queryable variables (those that do not start with an
  underscore) in a parser term (or a list of parser terms) into a list
  of Name=Var constructs.

  indexvars(+SortedNameVars,-IndexVars)
  namevars(+SortedIndexVars,-QueryVars)
****************************************************************************/
collect_namevars(ParserTerm,QueryVars) :-
	collect_vars(ParserTerm,NameVs),
	sort(NameVs,SortedNameVs),
	indexvars(SortedNameVs,IndexVs),
	keysort(IndexVs,SortedIndexVs),
	namevars(SortedIndexVs,QueryVars).


indexvars([],[]) :- !.

indexvars([T|L],Vars) :-
	(is_flvar(T,Name,I);is_fltransactionalvar(T,Name,I)),
	( (is_flvar(T,Name,I),flora_match_substring(FL_UNDERSCORE,Name,0);is_fltransactionalvar(T,Name,I),flora_match_substring(FL_UNDERSCORE,Name,0)) ->
	    indexvars(L,Vars)
	;
          Vars=[I-Name|Vs],
	  remove_dupvars(L,Name,VL),
	  indexvars(VL,Vs)
        ).


namevars([],[]) :- !.

namevars([Index-Name|L],[NV|NVs]) :-
	varobj_struct(Name,Index,VCode),
	concat_atom(['?',Name],NewName),% to show '?' before variable names in answers to queries
	atomobj_struct(NewName,Index,NCode),
	atomobj_struct(FL_UNIVEQ,FCode),
	prologterm_struct(FCode,2,[NCode,VCode],NV),
	namevars(L,NVs).


/****************************************************************************
  singleton_vars(+SortedVarsList,-SingletonVars)
  collects all the singleton variables in SortedVarsList into SingletonVars.
  Singleton variables collected here exclude those
  beginning with a underscore and the anonymous.

  remove_dupvars(+SortedVarsList,+VarName,-Vars)
****************************************************************************/
singleton_vars([],[]) :- !.

singleton_vars([V|L],[V|Vs]) :-
	(is_flvar(V,FL_UNDERSCORE,_I);is_fltransactionalvar(V,FL_UNDERSCORE,_I)),
	!,
	singleton_vars(L,Vs).

singleton_vars([V],[V]) :- !.

singleton_vars([V1,V2|L],Vars) :-
	( (is_flvar(V1,Name,_I);is_fltransactionalvar(V1,Name,_I)), (is_flvar(V2,Name,_J);is_fltransactionalvar(V2,Name,_I)) ->
	    remove_dupvars(L,Name,Vs),
	    singleton_vars(Vs,Vars)
        ;
	  Vars=[V1|Vs],
	  singleton_vars([V2|L],Vs)
        ).


remove_dupvars([V|L],Name,Vars) :-
	(is_flvar(V,Name,_I);is_fltransactionalvar(V,Name,_I)),
	!,
	remove_dupvars(L,Name,Vars).

remove_dupvars(Vars,_Name,Vars).


/****************************************************************************
  singleton_warning(+VarList,-WarnList,-WarnTail)
  Warnings are not generated for variables beginning with an underscore.
****************************************************************************/
singleton_warning([],WarnList,WarnList).

singleton_warning([V|L],WarnList,WarnTail) :-
	(is_flvar(V,Name,I);is_fltransactionalvar(V,Name,I)),
	( (is_flvar(V,Name,I),flora_match_substring(FL_UNDERSCORE,Name,0);is_fltransactionalvar(V,Name,I),flora_match_substring(FL_UNDERSCORE,Name,0)) ->
	    singleton_warning(L,WarnList,WarnTail)
	;
	  compiling_warning(I,SINGLETON_VAR,W),
	  WarnList=[W|T],
	  singleton_warning(L,T,WarnTail)
        ).


/****************************************************************************
  unbound_warning(+VarList,-WarnList,-WarnTail)
  Warnings are not generated for variables beginning with an underscore.
****************************************************************************/
unbound_warning([],WarnList,WarnList).

unbound_warning([V|L],WarnList,WarnTail) :-
	(is_flvar(V,Name,I);is_fltransactionalvar(V,Name,I)),
	( (is_flvar(V,Name,I),flora_match_substring(FL_UNDERSCORE,Name,0);is_fltransactionalvar(V,Name,I),flora_match_substring(FL_UNDERSCORE,Name,0)) ->
	    unbound_warning(L,WarnList,WarnTail)
	;
	  compiling_warning(I,UNBOUND_VAR,W),
	  WarnList=[W|T],
	  unbound_warning(L,T,WarnTail)
        ).


/****************************************************************************
  check_vars(+HeadTermList,+BodyTerm,-Status)
****************************************************************************/
check_vars(HeadTermList,BodyTerm,Status) :-
	collect_vars(HeadTermList,HeadVars),
	collect_vars(BodyTerm,BodyVars),
	append(HeadVars,BodyVars,Vars),
	sort(Vars,SortedVars),
	singleton_vars(SortedVars,SingletonVars),
	singleton_warning(SingletonVars,Status,WarnTail),
	subtract_vars(HeadVars,BodyVars,UnboundVars),
	%% Don't issue the unbound var warning in the head warning for facts
	(BodyTerm \= [] ->
	    unbound_warning(UnboundVars,WarnTail,[])
	;
	    true
	).


/****************************************************************************
  clear_directive
  get_directive(-L)  
  report_directive(+Direct)
  clear_options
  get_options(-L)
  report_option(+Option,+Index)
  clear_dynrule_varlist
  report_dynrule_varlist(+Var,+Val)
  get_dynrule_varlist(-L)
  get_dynrule_varlist(+CompileVarList,-L)
****************************************************************************/
clear_directive :- retractall(TMPDIRECT(_)).
get_directive(L) :- findall(D,TMPDIRECT(D),L).
report_directive(Direct) :- assert(TMPDIRECT(Direct)).


clear_options :- retractall(TMPOPTION(_,_)).
get_options(L) :- findall((O,Idx),TMPOPTION(O,Idx),L).
report_option(Option,Idx) :-
	assert(TMPOPTION(Option,Idx)).

flora_clear_compilation_permaoptions :- retractall(PERMAOPTION(_)).
set_permaoption(X) :- assert(PERMAOPTION(X)).
has_permaoption(X) :- PERMAOPTION(X).

clear_context(X) :- retractall(COMPILATION_CONTEXT(X)).
set_context(X) :- assert(COMPILATION_CONTEXT(X)).
has_compilation_context(X) :- COMPILATION_CONTEXT(X).

clear_dynrule_varlist :- retractall(DYNRULE_VARLIST(_,_)).
report_dynrule_varlist(AttrVar,Val) :- assert(DYNRULE_VARLIST(AttrVar,Val)).
get_dynrule_varlist(L) :- findall((Var,Val),DYNRULE_VARLIST(Var,Val),L).
get_dynrule_varlist(VarList,L) :- findall((Var,Val),(DYNRULE_VARLIST(Var,Val),member(Var,VarList)),L).

%% Report options specified in the :- setsemantics{...} directive
%% Since the argument is a parser list (sans the FLLIST wrapper), we need 
%% to extract the actual values of terms in the list in order to pass
%% to report_options/2.
report_semantic_options([]).
report_semantic_options([H|T]) :-
	is_flplib(H,FlTerm),
	is_flterm(FlTerm,Funct,_N,[Arg|_]),
	is_flatom(Funct,FunctVal,Index),
	is_flatom(Arg,ArgVal),
	Option =.. [FunctVal,ArgVal],
	report_option(Option,Index),
	report_semantic_options(T).


/****************************************************************************
  initialize_work
****************************************************************************/
initialize_work :-
	flora_reset_newvar,
	clear_directive,
	clear_options,
	clear_context(_),
        clear_dynrule_varlist.

/****************************************************************************
  flora_reset_compiler/0
****************************************************************************/
flora_reset_compiler :-
	reset_newpredicate,
	reset_rulenum,
	reset_newoid.

/****************************************************************************
  flora_compile_add(+ParserTerm,-CodeDiffList,-OptionList,-Status)

  This is the top level predicate that is called to compile code for
  adding code to module.

  CodeDiffList is a difference list in the form of [...|T]-T. It is for
  the optimization of append.
****************************************************************************/
flora_compile_add(NULL,X-X,[],[]) :- !.
	
flora_compile_add(ParserTerm,CodeDiffList,OptionList,Status) :-
	flora_compile_add_internal(ParserTerm,(NULL,NULL),
				   CodeDiffList,OptionList,Status).
	
%% This rule is for debugging.
flora_compile_add(_ParserTerm,[],[],[error(UNKNOWN_ERROR)]).

flora_compile_add_internal(ParserTerm,LabelCode,CodeDiffList,OptionList,Status) :-
	%% extract the rule number
	flora_increment_counter(RULE_NUM,1,_,_),
	initialize_work,
	( is_flrule(ParserTerm,Head,Body) ->
	    compile_rule_add(Head,Body,LabelCode,CodeDiffList,Status)

	; is_flfact(ParserTerm,Head) ->
	    compile_fact(Head,CodeDiffList,Status)

	; is_flquery(ParserTerm,Body) ->
	    compile_query(Body,CodeDiffList,Status)

	; is_fldirective(ParserTerm,DirectList,DirctIdx) ->
	    compile_directive_add(DirectList,DirctIdx,CodeDiffList,Status)

	; is_fllabeled_construct(ParserTerm,Label,Contents) ->
	    compile_labeled_construct_add(Label,Contents,CodeDiffList,Status)
        ),
	!,
	get_options(OptionList),
	retractall(ruleoid(_,_,_)).

/****************************************************************************
  compile_rule_add(+Head,+Body,+LabelCode,-CodeDiffList,-Status)

  LabelCode has the form (LblCode, MetaCode). LblCode is NULL or an atom-object.
  MetaCode is a NULL or a list of codes.

  CodeDiffList is a difference list in the form of [...|T]-T.
  It is for the optimization of append.
****************************************************************************/
compile_rule_add(Head,Body,Label,CodeList-ListTail,Status):-
	%% Note: Label here is already compiled code of the form
	%% (LblCode,MetaCode). A special case in compile_label takes care
	%% of that. If FLDYNRULE(H,B,L) comes from the parser, then the
	%% label has the form FLLABEL(Id,Meta,Index).
	compile_flupdaterule(FLATOM(FL_INSERTRULE_Z,NO_INDEX),[FLDYNRULE(Head,Body,Label)],RCode,Status),
	get_dynrule_varlist(L),
	add_attrvar_code(L,RCode,RuleCode),
	get_directive(DirectCodeList),
	append(DirectCodeList,T,CodeList),
	query_struct(RuleCode,Code),
	append([Code],ListTail,T).

compile_directive_add([],_,T-T,[]) :- !.

compile_directive_add([D|L],DirIdx,CodeList-ListTail,Status) :-
	compile_direct_add(D,DirIdx,DCodeList,S),
	( S == [] ->
	    append(DCodeList,T,CodeList),
	    compile_directive_add(L,DirIdx,T-ListTail,Status)
	;
	  Status=S
        ).

compile_direct_add(DirectTerm,_DirIdx,[Code],S) :-
	is_flsetsemantics(DirectTerm,_OptionsList),
	!,
	compile_exec_directive([DirectTerm],NULL,Code1,S),
	query_struct(Code1,Code).

compile_direct_add(DirectTerm,DirIdx,DCodeList,S) :-
	compile_direct(DirectTerm,DirIdx,DCodeList,S).

compile_labeled_construct_add(Label,Contents,CodeList-ListTail,Status) :-
	compile_label(Label,LblCode,MetaCode,Status1),
	(Status1 == []
	-> 
	    flora_compile_add_internal(Contents,(LblCode,MetaCode),
				       CodeList1-[],_OptionList,Status),
	    append(CodeList1,ListTail,CodeList)
	;  Status = Status1
	).


/****************************************************************************
  flora_compile(+ParserTerm,-CodeDiffList,-OptionList,-Status)

  This is the top level procedure that is called to compile code.

  CodeDiffList is a difference list in the form of [...|T]-T. It is for
  the optimization of append.
****************************************************************************/
flora_compile(NULL,X-X,[],[]) :- !.

flora_compile(ParserTerm,CodeDiffList,OptionList,Status) :-
	flora_compile_internal(ParserTerm,(NULL,NULL),
			       CodeDiffList,OptionList,Status).
	
%% This rule is for debugging.
flora_compile(_ParserTerm,[],[],[error(UNKNOWN_ERROR)]).


%% This does the main work
%% LabelCode has the form (LblCode, MetaCode). LblCode is NULL or atom-object.
%% MetaCode is a NULL or a list of codes.
flora_compile_internal(ParserTerm,LabelCode,CodeDiffList,OptionList,Status) :-
	%% extract the rule number
	flora_increment_counter(RULE_NUM,1,_,_),
	initialize_work,
	( is_flrule(ParserTerm,Head,Body) ->
	    compile_rule(Head,Body,LabelCode,CodeDiffList,S),
	    %% check whether singleton numbered anon oid exists
	    (ruleoid(_,_,1) -> referenced_once(S,Status);  Status=S)

	; is_flfact(ParserTerm,Head) ->
	    compile_fact(Head,CodeDiffList,S),
	    (ruleoid(_,_,1) -> referenced_once(S,Status);  Status=S)

	; is_flquery(ParserTerm,Body) ->
	    compile_query(Body,CodeDiffList,Status)

	; is_fldirective(ParserTerm,DirectList,DirctIdx) ->
	    compile_directive(DirectList,DirctIdx,CodeDiffList,Status)

	; is_fllabeled_construct(ParserTerm,Label,Contents) ->
	    compile_labeled_construct(Label,Contents,CodeDiffList,Status)
        ),
	!,
	get_options(OptionList),
	retractall(ruleoid(_,_,_)).

/***************************************************************************
  referenced_once(+Status_rf,-Status)
  finds singleton numbered anon oid and puts warning message in Status
***************************************************************************/
referenced_once(Status_rf,Status) :-
	findall(Index,ruleoid(_,Index,1),IndexList),
	singleton_oid_warning(IndexList,WarnList,[]),
	append(Status_rf,WarnList,Status).


/*************************************************************************
singleton_oid_warning(+SingleOidList,-WarnList,-WarnTail)
***********************************************************************/
singleton_oid_warning([],WarnList,WarnList).

singleton_oid_warning([Index|L],WarnList,WarnTail) :-
	compiling_warning(Index,SINGLETON_OID,W),
	WarnList=[W|T],
	singleton_oid_warning(L,T,WarnTail).


/****************************************************************************
  compile_directive(+DirectList,+DirctIdx,-CodeDiffList,-Status)
  compile_direct(+DirectTerm,+DirctIdx,-CodeList,-Status)
****************************************************************************/
compile_directive([],_,T-T,[]) :- !.

compile_directive([D|L],DirIdx,CodeList-ListTail,Status) :-
	compile_direct(D,DirIdx,DCodeList,S),
	( S == [] ->
	    append(DCodeList,T,CodeList),
	    compile_directive(L,DirIdx,T-ListTail,Status)
	;
	  Status=S
        ).

compile_direct(DirectTerm,_DirIdx,[Code],[]) :-
	is_flexport_list(DirectTerm,Term),
	compile_export(Term,Direct),
	!,
	directive_struct(Direct,Code).

compile_direct(DirectTerm,DirIdx,[],[]) :-
	is_flindex(DirectTerm,A,P),
	!,
	report_option(FLINDEX(A,P),DirIdx).

compile_direct(DirectTerm,_DirIdx,[Code],[]) :-
	is_verbatim(DirectTerm,Instruction),
	!,
	atomobj_struct(Instruction,InstrCode),
	verbatim_struct(InstrCode,Direct),
	directive_struct(Direct,Code).

compile_direct(DirectTerm,DirIdx,[Code],[]) :-
	is_defeasible(DirectTerm,Module),
	!,
	is_flatom(Module,Name),
	set_permaoption(FLDEFEASIBLE(Name)),
	%% the next option is reported so that GCLP library would be included,
	%% if the default GCLP theory is used.
	(Name == FL_DEFAULT_DEFEASIBLE_THEORY
	->
	    report_option(FLSYSMOD(FL_DEFAULT_DEFEASIBLE_THEORY),DirIdx)
	; true
	),
	defeasible_struct(Name,Direct),
	directive_struct(Direct,Code).

	

%% Operator definition. Must also induce executable op definition,
%% to execute in the shell (restricted to "main" module)
compile_direct(DirectTerm,_DirIdx,[Code],Status) :-
	is_flopdef(DirectTerm,P,A,O),
	flora_define_operator(P,A,O),
	compile_exec_directive([FLOPDEF(P,A,O)],NULL,Code1,Status),
	query_struct(Code1,Code),
	!.

compile_direct(DirectTerm,_Idx,CodeList,[]) :-
	is_flsetsemantics(DirectTerm,OptionsList),
	!,
	is_fllist(OptionsList,L,_T,_I),
	report_semantic_options(L),
	CodeList = [],
	!.

compile_direct(DirectTerm,Idx,CodeList,Status) :-
	is_flprefixdef(DirectTerm,PrefixName,PrefixBody),
	compile_pathexplist([PrefixName,PrefixBody],[NameCode,BodyCode1],_,_,S),
	( is_prstring(BodyCode1,String,Index) ->
		atom_codes(Atom,String),
		atomobj_struct(Atom,Index,BodyCode)
		
	 ; BodyCode=BodyCode1
	),		% the body of prefix definition is stored as atom 
	( S==[] ->
	    prefixdef_struct(NameCode,BodyCode,Direct),
	    directive_struct(Direct,Code1),
	    fldirective_struct([DirectTerm],Idx,Term),
	    compile_query(Term,CodeList-[Code1],Status)

	; Status=S,
	  CodeList=[]
	),
	!.

%% :- compiler_options
compile_direct(DirectTerm,Idx,[Code],[]) :-
	is_flcmpopt(DirectTerm,OptList),
	( member(XSB_SPECREPR,OptList) ->
	    report_option(XSB_SPECREPR,Idx)
	;
	    true
	),
	cmpopt_struct(OptList,OCode),
	directive_struct(OCode,Code),	
	!.
	
%% :- ignore_depchk
compile_direct(DirectTerm,_Idx,[Code],Status) :-
	is_flignoredep(DirectTerm,SpecList),
        set_context(compile_with_var_module),
	compile_ignoredep_list(SpecList,SCode,Status),
        clear_context(compile_with_var_module),
        !,
        ( Status == [] ->
	    ignoredep_struct(SCode,ICode),
	    directive_struct(ICode,Code)
        ;   true
        ).

compile_direct(DirectTerm,_Idx,[Code],Status) :-
	is_importmodule(DirectTerm,Modspec) ->
	compile_pathexp(Modspec,Obj,_Oid,_Cd,Status),
	importmodule_struct(Obj,Code1),
	directive_struct(Code1,Code),
	!,
	(is_flbuiltin_identifier(Modspec,MName,Index),
	    flrlibman:flora_system_module(MName)
	-> report_option(FLSYSMOD(MName),Index)
	; true
	).


/****************************************************************************
  compile_ignoredep_list(+SpecList,-CodeList,-Status)
  compile a list of ignoredep sepcifications
****************************************************************************/
compile_ignoredep_list([],[],[]) :- !.
compile_ignoredep_list([H|L],[HCode|LCode],Status) :-
        compile_body(H,HCode,S),
        ( S == [] ->
            compile_ignoredep_list(L,LCode,Status)
        ;
            Status = S
        ).


/****************************************************************************
  compile_flatomvar(+T,-Code)

  T is a variable structure, or an atom structure, or a plain atomic.
****************************************************************************/
compile_flatomvar(T,Code) :-
	    ( is_flvar(T,TName,I) ->
		varobj_struct(TName,I,Code)
	    ; 
	      atomobj_struct(T,Code)
	    ).


/****************************************************************************
  compile_fact(+Head,-CodeDiffList,-Status)

  CodeDiffList is a difference list in the form of [...|T]-T. It is for
  the optimization of append.

  Note: a fact containing a path expression might cause this
        fact to become a rule. However, we strip labels from facts in
	the parser, so no need here to take rule labels/meta info into account.
****************************************************************************/
compile_fact(Head,CodeList-ListTail,Status) :-
	set_context(compiling_facts), 
	compile_head(Head,HeadCode,H2BCodeHead,H2BCodeTail,S),
	( S == [] ->
	    ( H2BCodeHead == NULL, H2BCodeTail == NULL ->
		compile_factlist(HeadCode,CodeList-ListTail),
		check_vars(Head,[],Status)
	     ;
	        compile_conjunct2list(HeadCode,HeadCodeList),
		get_dynrule_varlist(L),
		conjunct_code([H2BCodeHead,H2BCodeTail],H2BCode),
		add_attrvar_code(L,H2BCode,BodyCode),
		get_directive(DirectCodeList),
		append(DirectCodeList,T,CodeList),
		split_ruleheads_add_rulesig(HeadCodeList,BodyCode,(NULL,NULL),
					    T-ListTail,[]),
		check_vars(Head,[],Status)
	    )
        ;
	  Status=S
	),
	clear_context(compiling_facts).


/****************************************************************************
  compile_factlist(+Code,-CodeDifferenceList)

  This procedure takes a conjucntion of atoms and splits into a
  difference list.
****************************************************************************/
compile_factlist(NULL,CodeList-CodeList) :- !.

compile_factlist(ConjunctCode,CodeList-ListTail) :-
	conjunct_struct(F1,F2,ConjunctCode),
	!,
	compile_factlist(F1,CodeList-T),
	compile_factlist(F2,T-ListTail).

compile_factlist(F,[FCode|ListTail]-ListTail) :-
	!,
        collect_compiled_vars(F,FVars),
        get_dynrule_varlist(FVars,L),
        sort(L,NL),
        ( NL == [] ->
	    fact_struct(F,FCode)
        ;
            add_attrvar_code_for_fact(NL,F,AugmentedF),
            fact_struct(AugmentedF,FCode)
        ).

add_attrvar_code([],Code,Code) :- !.
add_attrvar_code([(Var,Val)|L],BCode,NewCode) :-
        atomobj_struct(put_attr,FCode),
        atomobj_struct(usermod,MCode),
	atomobj_struct(machine,MachCode),
        prologterm_struct(FCode,3,[Var,MCode,Val],MachCode,VCode),
        prologliblit_struct(VCode,Code),
        add_attrvar_code(L,BCode,LCode),
        conjunct_struct(Code,LCode,NewCode).

add_attrvar_code_for_fact([],Code,Code) :- !.
add_attrvar_code_for_fact([(Var,Val)|L],BCode,NewCode) :-
        atomobj_struct(var_val,FCode),
        prologterm_struct(FCode,2,[Var,Val],Code),
        add_attrvar_code_for_fact(L,BCode,LCode),
        conjunct_struct(Code,LCode,NewCode).

/****************************************************************************
  compile_query(+Body,-CodeDiffList,-Status)

  CodeDiffList is a difference list in the form of [...|T]-T. It is for
  the optimization of append.
****************************************************************************/
compile_query(Body,CodeList-ListTail,Status) :-
	compile_body(Body,BCode,Status),
	( Status == [] ->
	    collect_datatype_var_terms(BCode,DTVarsCode),
	    append(DTVarsCode,[BCode],BCode1),
	    conjunct_code(BCode1,BCode2),
            get_dynrule_varlist(L),
            add_attrvar_code(L,BCode2,BodyCode),
	    thismodule_struct(ThisMod),
	    caller_binding_code(ThisMod,CallerBindingCode),
	    conjunct_struct(CallerBindingCode,BodyCode,AugmentedBodyCode),
	    collect_namevars(Body,NV),
	    list_struct(NV,[],NVCode),
	    florasyslib_struct(FLLIBANSWER,2,[AugmentedBodyCode,NVCode],Goal),
	    query_struct(Goal,QueryCode),
            get_directive(DirectCodeList),
	    append(DirectCodeList,[QueryCode|ListTail],CodeList)
	;
	  true
	).


/****************************************************************************
  compile_labeled_construct(+Label,Contents,-CodeDiffList,-Status)

  CodeDiffList is a difference list in the form of [...|T]-T. It is for
  the optimization of append.
****************************************************************************/
compile_labeled_construct(Label,Contents,CodeList-ListTail,Status) :-
	compile_label(Label,LblCode,MetaCode,Status1),
	(Status1 == []
	-> 
	    flora_compile_internal(Contents,(LblCode,MetaCode),
				   CodeList1-[],_OptionList,Status),
	    append(CodeList1,ListTail,CodeList)
	;  Status = Status1
	).


%% LblCode is NULL or an atom object
%% MetaCode is NULL or a list of codes for meta frames
compile_label(NULL,NULL,NULL,[]) :- !.
compile_label(Label,NULL,NULL,[]) :-
	var(Label),
	!.
%% already compiled
compile_label((Id,Meta),Id,Meta,[]) :- !.

compile_label(Label,LblCode,MetaCode,Status) :-
	is_fllabel(Label,Id,Meta,Index),
	(is_flatom(Id,_A) ->
	    atomobj_struct(Id,LblCode)
	; is_fltoken(Id,FL_NEWOID,Index1) ->
	    new_oidobj(Index1,LblCode)
	; is_fltoken(Id,FL_NEWOID,Num,Index1) ->
	    flora_get_counter(RULE_NUM, Rule_num), 
	    new_oidobj(Rule_num,Num,Index1,LblCode),
	    %% Decrement RULE_NUM counter so that the label and the rule will
	    %% have the same counter: flora_compile_internal is called right
	    %% after compile_label, and this will increment the RULE_NUM
	    %% counter again
	    flora_increment_counter(RULE_NUM,-1,_,_)
	; is_flvar(Id,VarName,VarIdx) ->
            compile_flvar(VarName,VarIdx,LblCode)
	; LblCode = NULL
	),
	(Meta == NULL 
	-> Status = [],
	    MetaCode = NULL
	; compile_head(Meta,MetaCodeConjunct,NULL,NULL,Status1)
	-> 
	    (Status1 == []
	    -> Status = [],
		%% convert to list
		compile_conjunct2list(MetaCodeConjunct,MetaCode)
	    ;  compiling_error(Index,INVALID_META_IN_LABEL,Err),
		Status = [Err]
	    )
	;  compiling_error(Index,INVALID_META_IN_LABEL,Err),
	    Status = [Err]
	).



/***************************************************************************
  Compile the export directive
  The body can be a list of export terms, which are compiled individually.
***************************************************************************/
compile_export(BodyTerm,Code) :-
	compile_export_predicate_list(BodyTerm,BodyTermCode),
	list_struct(BodyTermCode,[],BodyTermCodeList),
	export_struct(BodyTermCodeList,Code).


/****************************************************************************
  compile_export_predicate_list(+List,-Code)
  To recursively compile a list of export predicates.
****************************************************************************/
compile_export_predicate_list([H|T],Code) :-
	compile_export_predicate(H,HCode,_Status),
	compile_export_predicate_list(T,TCode),
	append([HCode],TCode,Code).
	
compile_export_predicate_list([],[]) :- !.


/****************************************************************************
  compile_export_predicate(+ExportTerm,-Code,-Status)
****************************************************************************/
compile_export_predicate(ExportTerm,Code,Status) :-
	(
	  is_flexport(ExportTerm,BodyTerm,ModuleList,IsUpdatable)
	;
	  is_flexport(ExportTerm,WS,BodyTerm,ModuleList,IsUpdatable)
	),
	is_flfact(BodyTerm,ParseBodyTerm),
	%% compile_fact expects the argument to be a list.
	%% Hence the ParseBodyTerm is enclosed in a list.
	%%if they are uninitialized, they will be taken care at run-time.
	compile_fact([ParseBodyTerm],ListBodyTermCode,_StatusFact),
	compile_pathexp(ModuleList,ModuleListCode,_,_,_StatusModule),
	compile_pathexp(IsUpdatable,IsUpdatableCode,_,_,_Status),
	(
		var(WS) -> 
			true
		;
			compile_pathexp(WS,WSCode,_,_,Status)
	),
	%% It may be the case that the predicate itself is a comma separated list
	%% Convert ListBodyTermCode from a difference list to a normal list
	%% then wrap each element of the list in PREXPORT
	compile_export_list_convert(ListBodyTermCode,WSCode,ModuleListCode,IsUpdatableCode,Code).


/****************************************************************************
  compile_export_list_convert(+Args,-Code)
   Args is a difference list of the form : [H|_V] -_V.
   Ground _V to [] and convert the diff list to a list
   Then processes the list with compile_export_extract_facts
****************************************************************************/
compile_export_list_convert(ListBodyTermCode - T, WSCode, ModuleListCode,IsUpdatableCode,Code) :-
	T = [],
	%% ListBodyTermCode is a list of facts; process them
	compile_export_extract_facts(ListBodyTermCode,[],WSCode,ModuleListCode,IsUpdatableCode,Code).


/****************************************************************************
  compile_export_extract_facts(+Args,+InitialTerm,+WSCode,+ModuleListCode,+IsUpdatableCode,-Code)
  Encloses the individual predicates of the Args list in a PREXPORT struct. 
  Then the whole list is compiled as a list_struct.
****************************************************************************/
compile_export_extract_facts([H|T],InitTerm,WSCode,ModuleListCode,IsUpdatableCode,Code) :-
	is_prfact(H,HTermCode),
	construct_export_struct(HTermCode,WSCode,IsUpdatableCode,ModuleListCode,HCode),
	compile_export_extract_facts(T,[HCode|InitTerm],WSCode,ModuleListCode,IsUpdatableCode,Code).

compile_export_extract_facts([],InitTerm,_WSCode,_ModuleListCode,_IsUpdatableCode,Code) :-
	list_struct(InitTerm,[],Code).


/****************************************************************************
  construct_export_struct(+Term,+WSCode,+IsUpdatableCode,+ModuleListCode,-Code)
  Constructs an appropriate prexport struct.
****************************************************************************/
construct_export_struct(TermCode,WSCode,IsUpdatableCode,ModuleListCode,Code) :-
	thismodule_struct(ThisModule),
	atomobj_struct(FLEXPORT,FCode),
	( var(WSCode) ->
		prologterm_struct(FCode,4,[IsUpdatableCode,ThisModule,ModuleListCode,TermCode],Code)
	;
		prologterm_struct(FCode,5,[WSCode,IsUpdatableCode,ThisModule,ModuleListCode,TermCode],Code)
	).


/****************************************************************************
  compile_rule(+Head,+Body,+LabelCode,-CodeDiffList,-Status)

  LabelCode has the form (LblCode, MetaCode). LblCode is NULL or an atom-object.
  MetaCode is a NULL or a list of codes.

  CodeDiffList is a difference list in the form of [...|T]-T. It is for
  the optimization of append.
****************************************************************************/
compile_rule(Head,Body,(LblCode,MetaCode),CodeList-ListTail,Status) :-
	compile_head(Head,HeadCode,H2BCodeHead,H2BCodeTail,HS),
	compile_conjunct2list(HeadCode,HeadCodeList),
	( HS == [] ->
	    compile_body(Body,BCode1,BS),
	    collect_datatype_var_terms([HeadCodeList,BCode1],DTVarsCode),
	    append(DTVarsCode,[H2BCodeHead,BCode1,H2BCodeTail],BCodeList),
	    conjunct_code(BCodeList,BCode),
            get_dynrule_varlist(L),
            add_attrvar_code(L,BCode,BodyCode),
	    ( BS == [] ->
		get_directive(DirectCodeList),
		append(DirectCodeList,Tail,CodeList),
		split_ruleheads_add_rulesig(HeadCodeList,BodyCode,
					    (LblCode,MetaCode),
					    Tail-ListTail, Status1),
		(Status1 == []
		-> check_vars(Head,Body,Status)
		; Status = Status1
		)
	    ;
	        Status=BS
	    )
	;
	  Status=HS
        ).

/****************************************************************************
  split_ruleheads_add_rulesig(+HeadCodeList,+BodyCode,+LabelCode,-CodeDiffList,-Status)

  HeadCodeList is a list of atoms in the rule head. BodyCode is the formula
  in the rule body. This procedure splits the list of atoms in the rule
  head and generates a difference list.

  LabelCode has the form (LblCode, MetaCode). LblCode is NULL or an atom-object.
  MetaCode is a NULL or a list of codes.
****************************************************************************/

split_ruleheads_add_rulesig([H],Body,(LblCode,MetaCode),[InsSigCode,Code|T]-T,Status) :-
	!,
	%% Only a single atom appears in the rule head.
	(is_prtransactionallit(H,Index), LblCode \= NULL
	-> compiling_error(Index,LABELED_TRANSACTION_NOT_ALLOWED,Err),
	    Status = [Err]
	; construct_defeasible_condition(LblCode,DefeatCond),
	    insert_rule_signature_onehead(H,Body,(LblCode,MetaCode,DefeatCond),InsSigCode),
	    construct_defeasible_condition(H,LblCode,DefeatCondWithHead),
	    add_defeasible_condition_to_body(DefeatCondWithHead,Body,NewBody),
	    rule_struct(H,NewBody,Code),
	    Status=[]
	).

split_ruleheads_add_rulesig(HeadList,Body,(LblCode,MetaCode),[InsSigCode,Code|CodeList]-ListTail,Status) :-
	%% Multiple atoms appear in the rule head.
	%% Generate a temp rule.
	allvars(HeadList,HeadVars),
	length(HeadVars,N),
	new_predicate(Name),
	callermod_info_structure(CallerVarObj),
	append(HeadVars,[CallerVarObj],HeadVarsAndCaller),
	N1 is N+1,
	newpredicate_struct(Name,N1,HeadVarsAndCaller,Newpredicate),
        insert_rule_signature_multihead(HeadList,Body,(LblCode,MetaCode),Newpredicate,InsSigCode),
	rule_struct(Newpredicate,Body,Code),
	%% Split the head over this temp rule.
	rule_difflist(HeadList,Newpredicate,LblCode,CodeList-ListTail,Status).


rule_difflist([],_B,_LblCode,CodeList-CodeList,[]) :- !.

rule_difflist([H|L],B,LblCode,[HC|LC]-T,Status) :-
	(is_prtransactionallit(H,Index), LblCode \= NULL
	-> compiling_error(Index,LABELED_TRANSACTION_NOT_ALLOWED,Err),
	    Status = [Err]
	; construct_defeasible_condition(H,LblCode,DefeatCond),
	    add_defeasible_condition_to_body(DefeatCond,B,NewB),
	    rule_struct(H,NewB,HC),
	    rule_difflist(L,B,LblCode,LC-T,Status)
	).

%% If LblCode is NULL, inserts a unique Id
insert_rule_signature_onehead(Head,Body,(LblCode,MetaCode,DefeatCond),Code) :-
	make_real_label_id(LblCode,RealLblCode),
        insert_rulesig_struct(Head,Body,(RealLblCode,MetaCode,DefeatCond),NULL,CCode),
        query_struct(CCode,Code).

%% If LblCode is NULL, inserts a unique Id
insert_rule_signature_multihead(HeadList,Body,(LblCode,MetaCode),Newpred,Code) :-
        list_struct(HeadList,[],HeadListCode),
	construct_defeasible_condition(LblCode,DefeatCond),
	make_real_label_id(LblCode,RealLblCode),
        insert_rulesig_struct(HeadListCode,Body,(RealLblCode,MetaCode,DefeatCond),Newpred,CCode),
        query_struct(CCode,Code).

%% If ProposedId == NULL, invent a new Id
make_real_label_id(ProposedId,RealId) :-
	(ProposedId == NULL -> new_oidobj(NO_INDEX,RealId)
	; RealId = ProposedId
	).

%% add_defeasible_condition_to_body(+DefeatCondCode,+BodyCode,-NewBodyCode)
add_defeasible_condition_to_body(DefeatCondCode,BodyCode,NewBodyCode) :-
	(DefeatCondCode == NULL -> NewBodyCode = BodyCode
	; conjunct_struct(BodyCode,DefeatCondCode,NewBodyCode)
	).

%% DefeatCondCode = FL_UNDEFEATED(LblCode,NewVar,ThisModule)@LibModule
%% or NULL. This is encoded as
%% TABLED_HILOG_WRAPPER(FL_UNDEFEATED,LblCode,NewVar,ThisModule)
%% NewVar is used because this type of defeasible condition is used in rule
%% signatures and dynamic rules; NewVar is bound to the head at run time.
construct_defeasible_condition(LblCode,DefeatCondCode) :-
	(has_permaoption(FLDEFEASIBLE(LibModule)), LblCode \= NULL
	->
	    %% create FL_UNDEFEATED(LblCode,NewVar,ThisModule)
	    atomobj_struct(FL_UNDEFEATED,UnDefeatFuncCode),
	    thismodule_struct(ThisModule),
	    %% DummyVarObj is unified with Head in flora_record_rule_signature
	    %% flrcanon.P and flrdynrule.P
	    flora_new_varobj(NO_INDEX,DummyVarObj),
	    termlit_struct(BODYLITERAL,UnDefeatFuncCode,3,[LblCode,DummyVarObj,ThisModule],
			   UnDefeatLitCode),
	    %% Attach module: FL_UNDEFEATED(LblCode,NewVar,ThisModule)@LibModule
	    atomobj_struct(LibModule,LibModuleObj),
	    workspace_struct(UnDefeatLitCode,LibModuleObj,DefeatCondCode)
	;
	    DefeatCondCode = NULL
	).

%% DefeatCondCode = FL_UNDEFEATED(LblCode,HeadCode,ThisModule)@LibModule
%% or NULL. This is encoded as
%% TABLED_HILOG_WRAPPER(FL_UNDEFEATED,LblCode,HeadCode,ThisModule)
%% The difference is that instead of NewVar we insert head code at compile time.
construct_defeasible_condition(HeadCode,LblCode,DefeatCondCode) :-
	(has_permaoption(FLDEFEASIBLE(LibModule)), LblCode \= NULL
	->
	    %% create FL_UNDEFEATED(LblCode,NewVar,ThisModule)
	    atomobj_struct(FL_UNDEFEATED,UnDefeatFuncCode),
	    thismodule_struct(ThisModule),
	    termlit_struct(BODYLITERAL,UnDefeatFuncCode,3,[LblCode,HeadCode,ThisModule],
			   UnDefeatLitCode),
	    %% Attach module: FL_UNDEFEATED(LblCode,NewVar,ThisModule)@LibModule
	    atomobj_struct(LibModule,LibModuleObj),
	    workspace_struct(UnDefeatLitCode,LibModuleObj,DefeatCondCode)
	;
	    DefeatCondCode = NULL
	).


/****************************************************************************
  compile_conjunct2list(+ConjunctCode,-CodeList)
  compile_conjunct2list(+ConjunctCode,-CodeList,-ListTail)

  ConjunctCode may contain NULL.
****************************************************************************/
compile_conjunct2list(ConjunctCode,CodeList) :-
	compile_conjunct2list(ConjunctCode,CodeList,[]).

compile_conjunct2list(NULL,CodeList,CodeList) :- !.

compile_conjunct2list(ConjunctCode,CodeList,ListTail) :-
	conjunct_struct(C1,C2,ConjunctCode),
	!,
	compile_conjunct2list(C1,CodeList,T1),
	compile_conjunct2list(C2,T1,ListTail).

compile_conjunct2list(Code,[Code|ListTail],ListTail) :- !.


/****************************************************************************
  compile_head(+ParserTermList,-Code,-H2BCodeHead,-H2BCodeTail,-Status)
  H2BCodeHead - code passed from head to body, which is supposed to be
                prepended to the code of the body
  H2BCodeTail - code passed from head to body, which is supposed to be
                appended to the code of the body
****************************************************************************/
compile_head([],NULL,NULL,NULL,[]) :- !.

compile_head([ParserTerm|ParserTermList],Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_literal(ParserTerm,PCode,PH2BCodeHead,PH2BCodeTail,S),
	( S == [] ->
	    compile_head(ParserTermList,PLCode,PLH2BCodeHead,PLH2BCodeTail,Status),
	    (Status == [] ->
		    conjunct_struct(PCode,PLCode,Code),
		    conjunct_code([PH2BCodeHead,PLH2BCodeHead],H2BCodeHead),
		    conjunct_code([PH2BCodeTail,PLH2BCodeTail],H2BCodeTail)
	     ;
	     true)
	;
	  Status=S
        ).


/****************************************************************************
  compile_head_literal(+ParserTerm,-Code,-H2BCodeHead,-H2BCodeTail,-Status)

  Code is conjunction of atoms, which should be split into a list later.
  H2BCodeHead - code passed from head to body, which is supposed to be
                prepended to the code of the body
  H2BCodeTail - code passed from head to body, which is supposed to be
                appended to the code of the body
****************************************************************************/
compile_head_literal(ParserTerm,Code,H2BCodeHead,H2BCodeTail,Status) :- 
        set_context(compiling_headliteral),
	( is_flvar(ParserTerm,VName,VIndex) ->
            compile_flvar(VName,VIndex,Code),
	    H2BCodeHead=NULL,
	    H2BCodeTail=NULL,
            Status=[]

	; is_flterm(ParserTerm,Funct,N,Args) ->
	    compile_head_fltermlit(Funct,N,Args,Code,H2BCodeHead,H2BCodeTail,Status)

        ; is_fltransactionalterm(ParserTerm,Funct,N,Args) ->
            compile_head_fltransactionaltermlit(Funct,N,Args,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_flbirelate(ParserTerm,OT1,RelType,OT2) ->
	    compile_head_flbirelate(OT1,RelType,OT2,_Obj,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_flobjspec(ParserTerm,ObjTerm,Spec) ->
	    compile_head_flobjspec(ObjTerm,Spec,_Obj,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_flobjeql(ParserTerm,Obj1,Obj2) ->
	    compile_head_flobjeql(Obj1,Obj2,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_flneg(ParserTerm,PositiveLit,Idx) ->
	    compile_head_flneg(PositiveLit,Idx,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_flworkspace(ParserTerm,P,WS) ->
	    compile_head_wsliteral(P,WS,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_flfloralib(ParserTerm,P,Module) ->
	    compile_head_floraliblit(P,Module,Code,H2BCodeHead,H2BCodeTail,Status)

	;
	    %% atom (0-ary predicate)
	    atomlit_struct(HEADLITERAL,ParserTerm,Code),
	    H2BCodeHead=NULL,
	    H2BCodeTail=NULL,
	    Status=[]

        ;   transactionalatomlit_struct(HEADLITERAL,ParserTerm,Code),
	    H2BCodeHead=NULL,
	    H2BCodeTail=NULL,
            Status=[]
	),
        clear_context(compiling_headliteral).


/****************************************************************************
  compile_body(+ParserTerm,-Code,-Status)
****************************************************************************/
compile_body(ParserTerm,Code,Status) :-
	is_flconjunct(ParserTerm,L,R),
	!,
	compile_body(L,LCode,S),
	( S == [] ->
	    compile_body(R,RCode,Status),
	    (Status == [] -> conjunct_struct(LCode,RCode,Code); true)
	;
	  Status=S
        ).

compile_body(ParserTerm,Code,Status) :-
	is_fldisjunct(ParserTerm,L,R),
	!,
	compile_body(L,LCode,S),
	( S == [] ->
	    compile_body(R,RCode,Status),
	    (Status == [] -> disjunct_struct(LCode,RCode,Code); true)
	;
	  Status=S
        ).

compile_body(ParserTerm,Code,Status) :-
	is_flnaf(ParserTerm,G),
	!,
	compile_body(G,GCode,Status),
	(Status == [] -> naf_struct(GCode,Code); true).

compile_body(ParserTerm,Code,Status) :-
	is_flneg(ParserTerm,G,Idx),
	!,
	compile_body(G,GCode,Status1),
	(Status1 == []
	-> neg_struct(GCode,Idx,Code,Status)
	; Status = Status1
	).

compile_body(ParserTerm,Code,Status) :-
	is_flnot(ParserTerm,G),
	!,
	compile_body(G,GCode,Status),
	(Status == [] -> not_struct(GCode,Code); true).

compile_body(ParserTerm,Code,Status) :-
        compile_body_literal(ParserTerm,Code,Status).


/****************************************************************************
  compile_body_literal(+ParserTerm,-Code,-Status)
****************************************************************************/
compile_body_literal(ParserTerm,Code,Status) :-
	( is_flvar(ParserTerm,VName,VIndex) ->
            compile_flvar(VName,VIndex,V),
            ( (has_compilation_context(compile_with_var_module)
	      ; has_compilation_context(goal_reification)
	      ; has_compilation_context(compile_delete))
	    ->
                SpecCode = V
            ;
                %% Not for promoting term to predicate, but to bind caller info.
                %% Needed only for calls when a variable occurs by itself in
		%% the rule body:  ... :- ..., X, ,,,
                thismodule_struct(ThisModule),
                callerargsterm_struct(ThisModule,CallerInfo),  %% doesn't matter
                atomobj_struct(FL_INVALIDMODULE,Module),
                florasyslib_struct(VIndex,FLLIBMODLIT,3,[V,Module,CallerInfo],SpecCode)
            ),
            OidCode=NULL,
            Status=[]

	/*
	%% This is not used for now. Transactional variables by
	%% themselves are hard to translate into queries.
	; is_fltransactionalvar(ParserTerm,VName,VIndex) ->
	    has_compilation_context(compile_with_var_module),
	    compile_fltransactionalvar(VName,VIndex,SpecCode),
	    OidCode=NULL,
	    Status=[]
	*/

        ; is_flterm(ParserTerm,Funct,N,Args) ->
	    compile_fltermlit(Funct,N,Args,OidCode,SpecCode,Status)

        ; is_fltransactionalterm(ParserTerm,Funct,N,Args) ->
	    compile_fltransactionaltermlit(Funct,N,Args,OidCode,SpecCode,Status)

	; is_flbirelate(ParserTerm,ObjTerm1,RelType,ObjTerm2) ->
	    compile_flbirelate(ObjTerm1,RelType,ObjTerm2,_Obj,OidCode,SpecCode,Status)

	; is_flobjspec(ParserTerm,ObjTerm,Spec) ->
	    compile_flobjspec(ObjTerm,Spec,_Object,OidCode,SpecCode,Status)

	; is_flload(ParserTerm,LoadList) ->
	    compile_flload(LoadList,SpecCode,Status),
	    OidCode=NULL

	; is_flconstraint(ParserTerm,ConstrBody) ->
	    compile_body(ConstrBody,ConstrBodyCode,Status),
	    constraint_struct(ConstrBodyCode,SpecCode),
	    OidCode=NULL

	; is_flworkspace(ParserTerm,P,WS) ->
	    compile_wsliteral(P,WS,OidCode,SpecCode,Status)

	; is_flplib(ParserTerm,P) ->
	    compile_prologliblit(P,OidCode,SpecCode,Status)

	; is_flplib(ParserTerm,P,Module) ->
	    compile_prologliblit(P,Module,OidCode,SpecCode,Status)

	; is_flpliball(ParserTerm,P) ->
	    compile_prologallliblit(P,OidCode,SpecCode,Status)

	; is_flpliball(ParserTerm,P,Module) ->
	    compile_prologallliblit(P,Module,OidCode,SpecCode,Status)

	; is_flfloralib(ParserTerm,P,Module) ->
	    compile_floraliblit(P,Module,OidCode,SpecCode,Status)

	; is_flinsert(ParserTerm,Op,List,Cond) ->
	    compile_flinsert(Op,List,Cond,SpecCode,Status),
	    OidCode=NULL

	; is_flinsert(ParserTerm,Op,List) ->
	    compile_flinsert(Op,List,SpecCode,Status),
	    OidCode=NULL

	; is_fldelete(ParserTerm,Op,List,Cond) ->
	    compile_fldelete(Op,List,Cond,SpecCode,Status),
	    OidCode=NULL

	; is_fldelete(ParserTerm,Op,List) ->
	    compile_fldelete(Op,List,SpecCode,Status),
	    OidCode=NULL

	; is_flneg(ParserTerm,_,_) ->
	    compile_body(ParserTerm,Code,Status),
	    OidCode=NULL

	%% Rule: can occur inside reify_op
	; ParserTerm = [ReifiedRule|_],
	    is_fldynrule(ReifiedRule,_H,_B,_Lab) ->
	    compile_reifyop(ParserTerm,SpecCode,OidCode,Status)

	%% Rule: can occur inside reify_op
	; ParserTerm = [ReifiedRule|_],
	    is_flruleworkspace(ReifiedRule,_RealRule,_WS) ->
	    compile_reifyop(ParserTerm,SpecCode,OidCode,Status)

	; is_fltablerefresh(ParserTerm,List) ->
	    compile_flrefresh(List,SpecCode,Status),
	    OidCode=NULL

	; is_fltruthvalue(ParserTerm,Formula,Atom) ->
	    compile_truthvalue(Formula,Atom,SpecCode,Status),
	    OidCode=NULL

	; is_flcatch(ParserTerm,Goal,Error,Handler) ->
	    compile_flcatch(Goal,Error,Handler,SpecCode,Status),
	    OidCode=NULL

	; is_flthrow(ParserTerm,Error) ->
	    compile_flthrow(Error,SpecCode,Status),
	    OidCode=NULL

	; is_flp2h(ParserTerm,Prolog,Hilog) ->
	    compile_flp2h(Prolog,Hilog,SpecCode,Status),
	    OidCode=NULL

	; is_flnewoidop(ParserTerm,VarTerm) ->
	    is_flvar(VarTerm,Name,Index),
	    compile_flvar(Name,Index,VarCode),
	    newoidop_struct(VarCode,SpecCode),
	    Status = [],
	    OidCode=NULL

	; is_flnewmodule(ParserTerm,Op,Module) ->
	    is_flatom(Op,_OpAtom,Index),
	    compile_flatomvar(Module,ModCode),
	    thismodule_struct(ThisModuleName),
	    florasyslib_struct(Index,FLLIBNEWMODULE,2,[ThisModuleName,ModCode],SpecCode),
	    Status=[],
	    OidCode=NULL

	; is_flerasemodule(ParserTerm,Op,Module) ->
	    is_flatom(Op,_OpAtom,Index),
	    compile_flatomvar(Module,ModCode),
	    thismodule_struct(ThisModuleName),
	    florasyslib_struct(Index,FLLIBERASEMODULE,2,[ThisModuleName,ModCode],SpecCode),
	    Status=[],
	    OidCode=NULL

	; is_flcallermodule(ParserTerm,Op,Module) ->
	    is_flatom(Op,_OpAtom,Index),
	    compile_flatomvar(Module,ModCode),
	    caller_binding_code(ModCode,SpecCode),
	    Status=[],
	    OidCode=NULL

	; is_flupdaterule(ParserTerm,Op,List) ->
	    compile_flupdaterule(Op,List,SpecCode,Status),
	    OidCode=NULL
		
        ; is_flclause(ParserTerm,Head,Body) ->
            compile_flclause(NULL,NULL,Head,Body,SpecCode,Status),
            OidCode=NULL

        ; is_flclause(ParserTerm,Mode,Head,Body) ->
            compile_flclause(NULL,Mode,Head,Body,SpecCode,Status),
            OidCode=NULL

        ; is_fllabeledclause(ParserTerm,Label,Mode,Head,Body) ->
            compile_flclause(Label,Mode,Head,Body,SpecCode,Status),
            OidCode=NULL

	; is_fllabeledclause(ParserTerm,Label,Head,Body) ->
            compile_flclause(Label,NULL,Head,Body,SpecCode,Status),
            OidCode=NULL

	; is_flifthenelse(ParserTerm,Cond,Then,Else) ->
	    compile_flifthenelse(Cond,Then,Else,SpecCode,Status),
	    OidCode=NULL

	; is_flifthen(ParserTerm,Cond,Then) ->
	    compile_flifthen(Cond,Then,SpecCode,Status),
	    OidCode=NULL

	; is_fluniveqform(ParserTerm,Left,Right) ->
	    compile_fluniveqform(Left,Right,SpecCode,Status),
	    OidCode=NULL

	; is_flmetauniv(ParserTerm,Left,Right) ->
	    compile_flmetauniv(Left,Right,OidCode,SpecCode,Status)

	; is_flcontrolconstruct(ParserTerm,Wrapper,Cond,Action) ->
	    compile_flcontrolconstruct(Cond,Action,Wrapper,SpecCode,Status),
	    OidCode = NULL
	
	; is_flcut(ParserTerm,I) ->
	    cut_struct(I,SpecCode),
	    OidCode=NULL,
	    Status=[]

	; is_flatom(ParserTerm,_A) ->
	    atomlit_struct(BODYLITERAL,ParserTerm,SpecCode) ->
	    OidCode=NULL,
	    Status=[]

	; is_flbuiltin_identifier(ParserTerm,_A) ->
	    atomlit_struct(BODYLITERAL,ParserTerm,SpecCode) ->
	    OidCode=NULL,
	    Status=[]

	; is_fltransactionalatom(ParserTerm,_A) ->
	    transactionalatomlit_struct(BODYLITERAL,ParserTerm,SpecCode) ->
	    OidCode=NULL,
	    Status=[]

	; is_flobjeql(ParserTerm,O1,O2) ->
	    compile_flobjeql(O1,O2,OidCode,SpecCode,Status)

	; is_fldirective(ParserTerm,DirectList,_Idx) ->
	    compile_exec_directive(DirectList,NULL,SpecCode,Status),
	    OidCode=NULL
	),
	conjunct_code([OidCode,SpecCode],Code).


/****************************************************************************
  compile_flifthenelse(+Cond,+Then,+Else,-Code,-Status)
****************************************************************************/
compile_flifthenelse(Cond,Then,Else,Code,Status) :-
	compile_body(Cond,CondCode,S1),
	( S1 == [] ->
	    compile_body(Then,ThenCode,S2),
	    ( S2 == [] ->
		compile_body(Else,ElseCode,Status),
		(Status == [] -> ifthenelse_struct(CondCode,ThenCode,ElseCode,Code); true)
	    ;
	      Status=S2
	    )
	;
	  Status=S1
	).


/****************************************************************************
  compile_flifthen(+Cond,+Then,-Code,-Status)
****************************************************************************/
compile_flifthen(Cond,Then,Code,Status) :-
	compile_body(Cond,CondCode,S1),
	( S1 == [] ->
	    compile_body(Then,ThenCode,Status),
	    (Status == [] -> ifthen_struct(CondCode,ThenCode,Code); true)
	;
	  Status=S1
	).

/****************************************************************************
  compile_fluniveqform(+Left,+Right,-Code,-Status)

  Compiling ~
  This produces only spec code -- no oid code, because each argument
  is treated as Meta, so no oid is passed utside of this term
****************************************************************************/
compile_fluniveqform(Left,Right,Code,Status) :-
        set_context(goal_reification),
	compile_body(Left,LeftCode,S1),
	( S1 == [] ->
	    compile_body(Right,RightCode,Status),
	    (Status == [] -> univeqform_struct(LeftCode,RightCode,Code); true)
	;
	  Status=S1
	),
        clear_context(goal_reification).


/****************************************************************************
  compile_flmetauniv(+Left,+Right,-OidCode,-Code,-Status)
  Compiling =..
****************************************************************************/
compile_flmetauniv(Left,Right,OidCode,Code,Status) :-
	%% Use pathexp translation instead of body translation, because we
	%% don't want module name to be tacked on unless requested
	%% LeftCode becomes bound to the OID code of Left
	%% ObjCode is later conjuncted with the result
	compile_pathexp(Left,LeftCode,OidCodeLeft,ObjCode,S1),
	( S1 == []
	-> compile_pathexp(Right,RightCode,OidCodeRight,RightObjCode,Status),
	    (Status == []
	    -> metauniv_struct(LeftCode,RightCode,UnivCode),
		conjunct_code([UnivCode,ObjCode,RightObjCode],Code),
		conjunct_code([OidCodeLeft,OidCodeRight],OidCode)
	    ; true
	    )
	;
	    Status=S1
	).


/****************************************************************************
  compile_flcontrolconstruct(+Cond,+Action,+Wrapper,-Code,-Status)

  Handle control stmts while-do,do-until,while-loop,loop-until,unless-do
****************************************************************************/
compile_flcontrolconstruct(Cond,Action,Wrapper,Code,Status) :-
	compile_body(Cond,CondCode,S1),
	(S1 == []
	-> compile_body(Action,ActionCode,Status),
	    (Status==[]
	    -> controlconstruct_struct(CondCode,ActionCode,Wrapper,Code)
	    ; true
	    )
	; Status = S1
	).


/****************************************************************************
  compile_pathexp(+ParserTerm,-Object,-OidCode,-Code,-Status)

  Handles pathexps that are atoms, numbers, special tokens, like _#, _#123, _@,
  vars, strings
****************************************************************************/
%% ParserTerm is a primitive object -- no oid code and no spec code results
compile_pathexp(ParserTerm,Object,NULL,NULL,Status) :-
	( is_flatom(ParserTerm,_A) ->
	    atomobj_struct(ParserTerm,Object),
	    Status=[]

	; is_fltransactionalatom(ParserTerm,_A) ->
	    transactionalatomobj_struct(ParserTerm,Object),
	    Status=[]

	; is_fltoken(ParserTerm,FL_THISMODULE,_Index) ->
	    thismodule_struct(Object),
	    Status=[]

	%% Anonymous OIDs can appear in the "body": they can appear
	%% in reified formulas, which are compiled as body literals
	; is_fltoken(ParserTerm,FL_NEWOID,Index) ->
	    new_oidobj(Index,Object),
	    Status=[]

	%% A numbered OID, which appears in a reified formula in rule body
	; is_fltoken(ParserTerm,FL_NEWOID,Num,Index) ->
	    flora_get_counter(RULE_NUM, Rule_num), 
	    new_oidobj(Rule_num,Num,Index,Object),
	    Status=[]

	; is_flnumber(ParserTerm,_N) ->
	    numobj_struct(ParserTerm,Object),
	    Status=[]

	; is_flvar(ParserTerm,Name,Index) ->
	    compile_flvar(Name,Index,Object),
	    Status=[]

	; is_fltransactionalvar(ParserTerm,Name,Index) ->
	    compile_fltransactionalvar_without_trans(Name,Index,Object),
	    Status=[]

	; is_flstring(ParserTerm,_S) ->
	    strobj_struct(ParserTerm,Object),
	    Status=[]

	; is_flbuiltin_identifier(ParserTerm,_Ident) ->
	    builtin_identifier_struct(ParserTerm,Object),
	    Status=[]

	; is_fldatatype(ParserTerm,_Sort,_Lit,_Index) ->
	    datatypeobj_struct(ParserTerm,Object,Status)

	; is_flurisq(ParserTerm,_P,_L) ->
	    urisqobj_struct(ParserTerm,Object),
	    Status=[]

	; is_fltransactionalstring(ParserTerm,_S) ->
	    transactionalstrobj_struct(ParserTerm,Object),
	    Status=[]
	),
	!.

compile_pathexp(ParserTerm,Object,OidCode,Code,Status) :-
	( is_flterm(ParserTerm,Funct,N,Args) ->
	    compile_fltermobj(Funct,N,Args,Object,OidCode,Code,Status)

	; is_fltransactionalterm(ParserTerm,Funct,N,Args) ->
	    compile_fltermobj(Funct,N,Args,Object,OidCode,Code,Status)

	; is_flbirelate(ParserTerm,ObjTerm1,RelType,ObjTerm2) ->
	    compile_flbirelate(ObjTerm1,RelType,ObjTerm2,Object,OidCode,Code,Status)

	; is_flobjspec(ParserTerm,ObjTerm,Spec) ->
	    compile_flobjspec(ObjTerm,Spec,Object,OidCode,Code,Status)

	; is_flobjref(ParserTerm,ObjTerm,RefType,AttTerm) ->
	    compile_flobjref(ObjTerm,RefType,AttTerm,Object,OidCode,Code,Status)

	; is_fllist(ParserTerm,L,T,I) ->
	    compile_fllist(L,T,I,Object,OidCode,Code,Status)

	; is_flaggregate(ParserTerm,Op,V,GV,B) ->
	    %% Aggregates are treated as OID, so its code would come
	    %% ahead of the code of the literal it occurs in
	    compile_flaggregate(Op,V,GV,B,Object,OidCode,Status)

	; is_reifyop(ParserTerm,Formula) ->
	    compile_reifyop(Formula,Object,OidCode,Status),
	    Code=NULL

	; is_flplib(ParserTerm,P) ->
	    compile_prologlibobj(P,Object,OidCode,Code,Status)
	; is_flplib(ParserTerm,P,Module) ->
	    compile_prologlibobj(P,Module,Object,OidCode,Code,Status)

	; is_flpliball(ParserTerm,P) ->
	    compile_prologalllibobj(P,Object,OidCode,Code,Status)
	; is_flpliball(ParserTerm,P,Module) ->
	    compile_prologalllibobj(P,Module,Object,OidCode,Code,Status)
	
	; is_flfloralib(ParserTerm,P,Module) ->
	    compile_floralibobj(P,Module,Object,OidCode,Code,Status)
	;
	  is_flworkspace(ParserTerm,P,WS),
	  compile_wspathexp(P,WS,Object,OidCode,Code,Status)
	).


/****************************************************************************
  compile_pathexplist(+ParserTermList,-ObjectList,-OidCode,-Code,-Status)
****************************************************************************/
compile_pathexplist([],[],NULL,NULL,[]) :- !.

compile_pathexplist([T|L],[TObj|LObj],OidCode,Code,Status) :-
	compile_pathexp(T,TObj,OidCodeHead,TCode,S),
	( S == [] ->
	    compile_pathexplist(L,LObj,OidCodeTail,LCode,Status),
	    (Status == [] ->
		conjunct_code([TCode,LCode],Code),
		conjunct_code([OidCodeHead,OidCodeTail],OidCode)
	    ;
		true
	    )
	;
	  Status=S
        ).


/****************************************************************************
  compile_flload(+LoadList,-Code,-Status)
****************************************************************************/
compile_flload(LoadList,Code,Status) :-
	is_fllist(LoadList,L,T,I),
	%% since complex terms aren't allowed in load lists, we ignore OidCode
	compile_fllist(L,T,I,ObjList,_OidCode,OCode,Status),
	( Status == [] ->
	    thismodule_struct(Mod),
	    %% This is the file being compiled
	    (flora_compiler_environment(file,ProgramFile), !
	    ; ProgramFile=userin
	    ),
	    %% "I" is a token index
	    flora_nth_token(I,Token),
	    flora_token_text(Token,_TextStr,BLN,BCN,_ELN,_ECN),
	    %% Encode location of the literal [file>>mod]
	    %% Location is used for error checking in flrload.P to make sure
	    %% that loading of a file doesn't override the program
	    %% in which the loading statement occurs
	    list_struct([BLN,BCN],[],PositionCode),
	    florasyslib_struct(I,FLLIBLOAD,
			       4,
			       [ObjList,ProgramFile,Mod,PositionCode],LCode),
	    conjunct_code([OCode,LCode],Code)
	;
	  true
        ).


/****************************************************************************
  compile_flvar(+Name,+Index,-VarObject)
****************************************************************************/
compile_flvar(Name,Index,VarObject) :-
	( Name == FL_UNDERSCORE ->
	    flora_new_varobj(Index,VarObject)
	;
	  varobj_struct(Name,Index,VarObject)
        ).

compile_fltransactionalvar_without_trans(Name,Index,VarObject) :-
	( Name == FL_UNDERSCORE ->
	    new_transactionalvarobj(Index,VarObject)
	;
	  transactionalvarobj_struct(Name,Index,VarObject)
        ).

compile_fltransactionalvar(Name,Index,VarObject) :-
	( Name == FL_UNDERSCORE ->
	    new_transactionalvar(Index,VarObject)
	;
	  transactionalvar_struct(Name,Index,VarObject)
        ).

/****************************************************************************
  compile_fltermobj(+FunctorTerm,+Arity,+ArgList,-Object,-OidCode,-Code,-Status)

  Compile term in the OID position.
****************************************************************************/
compile_fltermobj(Funct,N,Args,Object,OidCode,Code,Status) :-
	compile_pathexplist([Funct|Args],[FObj|AObj],OidCode,Code,Status),
	(Status == [] -> termobj_struct(FObj,N,AObj,Object); true).


/****************************************************************************
  compile_fltermlit(+FunctorTerm,+Arity,+ArgList,-OidCode,-Code,-Status)

  Compile term in a predicate position in rule body.
****************************************************************************/
compile_fltermlit(Funct,N,Args,OidCode,Code,Status) :-
	compile_pathexplist([Funct|Args],[FObj|AObj],OidCode,ObjCode,Status),
	( Status == [] ->
	    termlit_struct(BODYLITERAL,FObj,N,AObj,TCode),
	    conjunct_code([TCode,ObjCode],Code)
	;
	  true
        ).

compile_fltransactionaltermlit(Funct,N,Args,OidCode,Code,Status) :-
	compile_pathexplist([Funct|Args],[FObj|AObj],OidCode,ObjCode,Status),
	( Status == [] ->
	    transactionaltermlit_struct(BODYLITERAL,FObj,N,AObj,TCode),
	    conjunct_code([TCode,ObjCode],Code)
	;
	  true
        ).


/****************************************************************************
  compile_fllist(+ObjTermList,+ObjTerm,+Index,-Object,-OidCode,-Code,-Status)

  Index refers to '['.
  Lists are like this: [a,b,c|rest]
  ObjTermList refers to the list [a,b,c] and ObjTerm to rest.
****************************************************************************/
compile_fllist(ObjTermList,ObjTerm,Index,Object,OidCode,Code,Status) :-
	compile_pathexplist(ObjTermList,ObjList,OidCodeList,ObjListCode,S),
	( S == [] ->
	    ( ObjTerm == [] ->
		Obj=[],
		OidCodeObj=NULL,
		ObjCode=NULL,
		Status=[]
	    ;
	      compile_pathexp(ObjTerm,Obj,OidCodeObj,ObjCode,Status)
	    ),
	    ( Status == [] ->
		list_struct(ObjList,Obj,Index,Object),
		conjunct_code([ObjListCode,ObjCode],Code),
		conjunct_code([OidCodeList,OidCodeObj],OidCode)
	    ;
	      true
	    )
	;
	  Status=S
        ).


/****************************************************************************
  compile_flobjref(+ObjTerm,+RefType,+AttTerm,-Object,-OidCode,-Code,-Status)

  Process an object reference like a.b.c
  An objref can be more complex, e.g., a[f->g].b[h->>p].c[k->u]
****************************************************************************/
compile_flobjref(ObjTerm,RefType,AttTerm,Object,OidCode,Code,Status) :-
	compile_pathexplist([ObjTerm,AttTerm],[Obj,Att],OidCodeList,OCode,Status),
	( Status == [] ->
	    %% Approximate the textual information for the new variable.
	    approximate_index(AttTerm,Index),
	    body_objref_struct(Obj,RefType,Att,Index,Object,TCode),
	    Code = OCode,
	    conjunct_code([OidCodeList,TCode],OidCode)
	;
	  true
        ).


/****************************************************************************
  compile_flbirelate(+ObjTerm1,+RelType,+ObjTerm2,-Object,-Code,-Status)

  Compiles binary relationships, like : or ::.
****************************************************************************/
compile_flbirelate(ObjTerm1,RelType,ObjTerm2,Obj1,OidCode,Code,Status) :-
	compile_pathexplist([ObjTerm1,ObjTerm2],[Obj1,Obj2],OidCode,OCode,Status),
	( Status == [] ->
	    birelate_struct(BODYLITERAL,Obj1,RelType,Obj2,TCode),
	    conjunct_code([TCode,OCode],Code)
	;
	  true
        ).


/****************************************************************************
  compile_flobjspec(+ObjTerm,+SpecBody,-Object,-OidCode,-Code,-Status)

  Code produced by this and similar predicates is divided into
  OidCode and Code. 
  OidCode is the code needed to compute the attribute of molecule
  and the oid, and the oid of the value part (in ->, ->>, etc.)
  Code represents the code needed to compute the the attribute specification.
  For instance, in  a.b[c.d->e.f],
      OidCode will represent the computation of c.d and e.d:
	 prand(prmvd(a,b,_newvar1),prand(prmvd(c,d,_newvar2),prmvd(e,d,_newvar3)))
      Code will represent the -> part:
                 prmvd(_newvar1,_newvar2,_newvar3)
****************************************************************************/
compile_flobjspec(ObjTerm,SpecBody,Object,OidCode,Code,Status) :-
	( SpecBody == [] ->
	    %% Just objref, no body. Something like a.b.c. Possibly a.b.c[]
	    ( is_flobjref(ObjTerm,OTerm,RefType,ATerm) ->
		compile_pathexplist([OTerm,ATerm],[OObj,AObj],OidCode,ObjCode,Status),
		%% This is an optimization, which translates a.b[] as
		%% a[b->?X] as opposed to a[b->?X],?X[].
		%% The alternative case (compile_pathexp below),
		%% compiles a.b[] as in the second, inefficient case above.
		( Status == [] ->
		    approximate_index(ATerm,Index),
		    body_objref_struct(OObj,RefType,AObj,Index,Object,TCode),
		    conjunct_code([TCode,ObjCode],Code)
		;
		  true
	        )
	    ;
	      compile_pathexp(ObjTerm,Object,OidCode,ObjCode,Status),
	      ( Status == [] ->
		  objexists_struct(BODYLITERAL,Object,ECode),
		  conjunct_code([ECode,ObjCode],Code)
	      ;
	        true
	      )
	    )
	; % oid spec plus object spec. something like a.b[c->d]
	    compile_pathexp(ObjTerm,Object,ObjOidCode,ObjCode,S),
	    ( S == []
	    -> compile_flspecbody(Object,SpecBody,SpecOidCode,SpecCode,Status),
		(Status == [] ->
		    conjunct_code([ObjCode,SpecCode],Code),
		    conjunct_code([ObjOidCode,SpecOidCode],OidCode)
		; true
		)
	    ;
		Status=S
	    )
        ).

/****************************************************************************
  compile_flspecbody(+Object,+SpecTerm,-OidCode,-Code,-Status)

   Compile the specification part of a molecule Object[SpecTerm]
   Object: describes the oid
   SpecTerm: descripes the specification inside the brackets
   Code: the resulting compiled code
****************************************************************************/
compile_flspecbody(Object,SpecTerm,OidCode,Code,Status) :-
	is_flconjunct(SpecTerm,L,R),
	!,
	compile_flspecbody(Object,L,OidCode,LCode,S),
	( S == [] ->
	    compile_flspecbody(Object,R,OidCode,RCode,Status),
	    (Status == [] -> conjunct_code([LCode,RCode],Code); true)
	;
	  Status=S
        ).

compile_flspecbody(Object,SpecTerm,OidCode,Code,Status) :-
	is_fldisjunct(SpecTerm,L,R),
	!,
	compile_flspecbody(Object,L,OidCode,LCode,S),
	( S == [] ->
	    compile_flspecbody(Object,R,OidCode,RCode,Status),
	    (Status == [] -> disjunct_struct(LCode,RCode,Code); true)
	;
	  Status=S
        ).

compile_flspecbody(Object,SpecTerm,OidCode,Code,Status) :-
	is_flnaf(SpecTerm,G),
	!,
	compile_flspecbody(Object,G,OidCode,GCode,Status),
	(Status == [] ->
	    conjunct_code([OidCode,GCode],CombinedGCode),
	    naf_struct(CombinedGCode,Code)
	; true
	).

compile_flspecbody(Object,SpecTerm,OidCode,Code,Status) :-
	is_flneg(SpecTerm,G,Idx),
	!,
	compile_flspecbody(Object,G,OidCode,GCode,Status1),
	(Status1 == [] ->
	    conjunct_code([OidCode,GCode],CombinedGCode),
	    neg_struct(CombinedGCode,Idx,Code,Status)
	; Status = Status1
	).

compile_flspecbody(Object,SpecTerm,OidCode,Code,Status) :-
	is_flnot(SpecTerm,G),
	!,
	compile_flspecbody(Object,G,OidCode,GCode,Status),
	(Status == [] ->
	    conjunct_code([OidCode,GCode],CombinedGCode),
	    not_struct(CombinedGCode,Code)
	; true
	).

%% F-molecule with attribute specification.
%% Can be O[M->V], where O,M,V can be any complex F-molecule
%% OidCodeList below gets bound to code needed to produce
%% the attribute (M) and the value (V). We conjunct this code in front of the
%% code for the molecule
%% NULL means that we don't pass OID code out, because we use it right here.

%% Same for ->>
%% No OidCode is passed outside: we consume it here
compile_flspecbody(Object,SpecTerm,NULL,Code,Status) :-
	is_flmvdattspec(SpecTerm,AttTerm,RefType,ValTermList),
	!,
	compile_pathexp(AttTerm,AttObj,AOidCode,ACode,S),
	( S == [] ->
	    ( ValTermList == [] ->
		mvdattdef_struct(BODYLITERAL,Object,AttObj,RefType,SCode),
		conjunct_code([AOidCode,ACode,SCode],Code),
		Status=[]
	    ;
		%% An mvd spec can have several terms in the value set
		%% (represented by ValTermList). This compiles such
		%% a spec into a conjunction.
		compile_mvdattspec(Object,AttObj,RefType,ValTermList,VOidCode,SCode,Status),
		%% ACode: Code to produce attribute
		%% SCode: code to produce pure attr specs and 
		%%         the objects that represents the values
		(Status == [] ->
		  conjunct_code([AOidCode,VOidCode,ACode,SCode],Code)
	      ;
		  true
	      )
	    )
        ;
	  Status=S
        ).

%% signatures: =>, *=>, etc.
compile_flspecbody(Object,SpecTerm,NULL,Code,Status) :-
	is_flsigattspec(SpecTerm,AttTerm,RefType,ValTerm),
	!,
	compile_pathexp(AttTerm,AttObj,AOidCode,ACode,S),
	(S == [] ->
	    (is_flemptyterm(ValTerm) ->
		%% This is SIGDEF: occurs when we have a[b=> ()]
		sigattdef_struct(BODYLITERAL,Object,AttObj,RefType,SCode),
		conjunct_code([AOidCode,ACode,SCode],Code),
		Status=[]
	    ;
		compile_pathexp(ValTerm,ValObj,VOidCode,VCode,Status),
		( Status == [] ->
		    sigattspec_struct(BODYLITERAL,Object,AttObj,RefType,ValObj,SCode),
		    %% SCode: code to produce object ref, attribute, and value
		    %% OCode: code for the pure attribute spec of the object
		    %% AOidCode: code to produce the attribute
		    %% ACode: code for the attribute
		    %% VOidCode: code to produce value of the attribute
		    %% VCode: code for value of the attribute
		    conjunct_code([AOidCode,VOidCode,ACode,VCode,SCode],Code)
		;
		    true
		)
	    )
	;
	    Status = S
        ).

%% signatures: =>, *=>, etc.
compile_flspecbody(Object,SpecTerm,NULL,Code,Status) :-
	is_flsigattconspec(SpecTerm,AttTerm,ConstrTerm,RefType,ValTerm),
	!,
	compile_pathexp(AttTerm,AttObj,AOidCode,ACode,S),
	(S == [] ->
	    (is_flemptyterm(ValTerm) ->
		%% This is SIGDEF: occurs when we have a[b=> ()]
		sigattdef_struct(BODYLITERAL,Object,AttObj,RefType,SCode),
		conjunct_code([AOidCode,ACode,SCode],Code),
		Status=[]
	    ;
		is_flsigconstr(ConstrTerm,Lower,Upper),
		compile_pathexplist([Lower,Upper],[OLower,OUpper],COidCode,CCode,S_C),
		(S_C == [] ->
		    compile_pathexp(ValTerm,ValObj,VOidCode,VCode,Status),
		    ( Status == [] ->
			sigattspec_struct(BODYLITERAL,Object,AttObj,RefType,ValObj,SCode),
			sigattconstr_struct(BODYLITERAL,Object,AttObj,OLower,OUpper,RefType,CSCode),
			%% SCode: code to produce object ref, attribute, and value
			%% OCode: code for the pure attribute spec of the object
			%% AOidCode: code to produce the attribute
			%% ACode: code for the attribute
			%% VOidCode: code to produce value of the attribute
			%% VCode: code for value of the attribute
			conjunct_code([AOidCode,VOidCode,ACode,VCode,SCode,COidCode,CCode,CSCode],Code)
		    ;
			true
		    )
		;
		    Status = S_C
		)
	    )
	;
	    Status = S
        ).

%% boolean signatures: =>.
compile_flspecbody(Object,SpecTerm,NULL,Code,Status) :-
	is_flboolsig(SpecTerm,AttTerm,_RefType),
	!,
	compile_pathexp(AttTerm,AttObj,AOidCode,ACode,Status),
	( Status == [] ->
	    boolsig_struct(BODYLITERAL,Object,AttObj,SCode),
	    conjunct_code([AOidCode,ACode,SCode],Code)
	;
	    true
	).

%% boolean signatures: *=>.
compile_flspecbody(Object,SpecTerm,NULL,Code,Status) :-
	is_fliboolsig(SpecTerm,AttTerm,_RefType),
	!,
	compile_pathexp(AttTerm,AttObj,AOidCode,ACode,Status),
	( Status == [] ->
	    iboolsig_struct(BODYLITERAL,Object,AttObj,SCode),
	    conjunct_code([AOidCode,ACode,SCode],Code)
	;
	    true
	).

%% boolean signatures: =>% for transactional method
compile_flspecbody(Object,SpecTerm,NULL,Code,Status) :-
	is_fltransig(SpecTerm,AttTerm,_RefType),
	!,
	compile_pathexp(AttTerm,AttObj,AOidCode,ACode,Status),
	( Status == [] ->
	    transig_struct(BODYLITERAL,Object,AttObj,SCode),
	    conjunct_code([AOidCode,ACode,SCode],Code)
	;
	    true
	).

%% boolean signatures: *=>% for transactional method
compile_flspecbody(Object,SpecTerm,NULL,Code,Status) :-
	is_flitransig(SpecTerm,AttTerm,_RefType),
	!,
	compile_pathexp(AttTerm,AttObj,AOidCode,ACode,Status),
	( Status == [] ->
	    itransig_struct(BODYLITERAL,Object,AttObj,SCode),
	    conjunct_code([AOidCode,ACode,SCode],Code)
	;
	    true
	).

%% +>>, *+>>
compile_flspecbody(Object,SpecTerm,NULL,Code,Status) :-
	is_flincattspec(SpecTerm,AttTerm,RefType,ValTerm),
	!,
	compile_pathexplist([AttTerm,ValTerm],[AttObj,ValObj],OidCode,OCode,Status),
	( Status == [] ->
	    incattspec_struct(Object,AttObj,RefType,ValObj,SCode),
	    conjunct_code([OidCode,SCode,OCode],Code)
	;
	  true
        ).

%% same for ->->
compile_flspecbody(Object,SpecTerm,NULL,Code,Status) :-
	is_fltolistattspec(SpecTerm,AttTerm,RefType,ValTerm),
	!,
	compile_pathexplist([AttTerm,ValTerm],[AttObj,ValObj],OidCode,OCode,Status),
	( Status == [] ->
	    tolistattspec_struct(Object,AttObj,RefType,ValObj,SCode),
	    %% Fold OidCode in front of the molecule
	    conjunct_code([OidCode,SCode,OCode],Code)
	;
	  true
        ).

%% Obj[true], Obj[fail], Obj[!] translate as true, fail, and !
compile_flspecbody(_Object,SpecTerm,NULL,Code,Status) :-
	is_flpassthru(SpecTerm,P),
	is_flatom(P, Atom, I),
	!,
	(Atom==FL_CUT
	-> cut_struct(I,Code)
	; atomobj_struct(P,Code)
	),
	Status=[].

%% Obj[X>Y], Obj[X=Y], etc.
compile_flspecbody(_Object,SpecTerm,NULL,Code,Status) :-
	is_flpassthru(SpecTerm,P),
	is_flterm(P, Funct, N, Args),
	!,
	compile_prlgterm(Funct,N,Args,TCode,_OidCode,ACode,Status),
	(Status == [] -> conjunct_code([ACode,TCode],Code); true).

%% for O[BoolMeth]
compile_flspecbody(Object,SpecTerm,NULL,Code,Status) :-
	is_flmethspec(SpecTerm,MethTerm),
	!,
	compile_pathexp(MethTerm,MethObj,OidCode,MCode,Status),
	( Status == [] ->
	    methspec_struct(BODYLITERAL,Object,MethObj,SCode),
	    %% Fold OidCode in front of the molecule
	    conjunct_code([OidCode,MCode,SCode],Code)
	;
	  true
        ).

%% for O[*BoolMeth]
compile_flspecbody(Object,SpecTerm,NULL,Code,Status) :-
	is_flimethspec(SpecTerm,IMethTerm),
	!,
	compile_pathexp(IMethTerm,IMethObj,OidCode,IMCode,Status),
	( Status == [] ->
	    imethspec_struct(BODYLITERAL,Object,IMethObj,SCode),
	    %% Fold OidCode in front of the molecule
	    conjunct_code([OidCode,IMCode,SCode],Code)
	;
	  true
        ).

%% O[%M]
compile_flspecbody(Object,SpecTerm,NULL,Code,Status) :-
	is_fltranspec(SpecTerm,TranTerm),
	!,
	compile_pathexp(TranTerm,TranObj,OidCode,TCode,Status),
	( Status == [] ->
	    transpec_struct(BODYLITERAL,Object,TranObj,SCode),
	    conjunct_code([OidCode,TCode,SCode],Code)
	;
	  true
        ).


/****************************************************************************
  compile_mvdattspec(+Object,+AttObj,+RefType,+ValTermList,-OidCode,-Code,-Status)
   Arg 4 is a list representing the value set of the attribute.
   This predicate compiles such a spec into a conjunction.
   Each conjunct corresponds to each member of the value set.
   Assumes that AttObj is already an oid
****************************************************************************/
compile_mvdattspec(Object,AttObj,RefType,[T],OidCode,Code,Status) :-
	!,
	compile_pathexp(T,TObj,OidCode,TCode,Status),
	( Status == [] ->
	    mvdattspec_struct(BODYLITERAL,Object,AttObj,RefType,TObj,SCode),
	    conjunct_code([SCode,TCode],Code)
	;
	  true
        ).

compile_mvdattspec(Object,AttObj,RefType,[T|L],OidCode,Code,Status) :-
	!,
	compile_mvdattspec(Object,AttObj,RefType,[T],OidCodeHead,TCode,S),
	( S == [] ->
	    compile_mvdattspec(Object,AttObj,RefType,L,OidCodeTail,LCode,Status),
	    (Status == [] ->
		conjunct_code([TCode,LCode],Code),
		conjunct_code([OidCodeHead,OidCodeTail],OidCode)
	    ;
		true
	    )
	;
	  Status=S
        ).


/****************************************************************************
  compile_flaggregate(+Op,+Var,+GVars,+BodyTerm,-Object,-Code,-Status)
****************************************************************************/
compile_flaggregate(Op,Var,GVars,BodyTerm,Object,Code,Status) :-
	compile_body(BodyTerm,BCode,S),
	( S == [] ->
            (has_compilation_context(compile_with_var_module),
		\+ has_compilation_context(goal_reification) ->
                Status =[]
            ;
	        check_aggregate(Var,GVars,BodyTerm,Status)
            ),
	    ( Status == [] ->
		compile_pathexplist([Var|GVars],[VarCode|GVarsCode],NULL,NULL,[]),
		list_struct(GVarsCode,[],GVarsListCode),
		aggregate_struct(Op,VarCode,GVarsListCode,BCode,Object,Code)
	    ;
	      true
	    )
	;
	  Status=S
        ).


/****************************************************************************
  check_aggregate(+Var,+GroupVars,+BodyTerm,-Status)
  check_repeatedvar(+Vars,-Status,-TailStatus)
  allgvar_notin(+SortedVars,-Status,-TailStatus)
****************************************************************************/
check_aggregate(Var,GVars,BodyTerm,Status) :-
	is_flvar(Var,VarName,VarIndex),
	%% Check if the aggregate variable is anonymous.
	( VarName == FL_UNDERSCORE ->
	    compiling_error(VarIndex,ERROR_AVAR,M1),
	    Status=[M1|S1]
	;
	  Status=S1
        ),
	%% Check if any grouping variable is anonymous.
	check_gvar(GVars,S1,S2),
	%% Check if the aggregate variable is also used for grouping.
	( VarName \= FL_UNDERSCORE, is_flvar(U,VarName,_Iu), member(U,GVars) ->
	    compiling_error(VarIndex,AVAR_ASGVAR,M2),
	    S2=[M2|S3]
	;
	  S3=S2
        ),
	%% Check if there are any repeated grouping variables.
	sort(GVars,SVars),
	check_repeatedvar(SVars,S3,S4),
	collect_vars(BodyTerm,BVars),
	%% Check if aggregate variable is used in the aggregate body.
	( (VarName == FL_UNDERSCORE; is_flvar(W,VarName,_Iw), member(W,BVars)) ->
	    S5=S4
        ;
	  compiling_error(VarIndex,AVAR_NOTIN,M5),
	  S4=[M5|S5]
        ),
	%% Check if all grouping variables are used in the aggregate body.
	( subtract_vars(GVars,BVars,L), L \== [] ->
	    sort(L,SL),
	    allgvar_notin(SL,S5,[])
	;
	  S5=[]
        ).


check_gvar([],S,S) :- !.

check_gvar([H|L],Status,TS) :-
	( is_flvar(H,FL_UNDERSCORE,HIndex) ->
	    compiling_error(HIndex,ERROR_GVAR,M),
	    Status=[M|S],
	    check_gvar(L,S,TS)
	;
	  check_gvar(L,Status,TS)
        ).


check_repeatedvar([],S,S) :- !.

check_repeatedvar([H|L],Status,TS) :-
	is_flvar(H,FL_UNDERSCORE,_I),
	!,
	check_repeatedvar(L,Status,TS).

check_repeatedvar([_H],S,S) :- !.

check_repeatedvar([H1,H2|T],Status,TS) :-
	( is_flvar(H1,Name,_I1), is_flvar(H2,Name,I2) ->
	    compiling_error(I2,REPEATED_GVAR,Msg),
	    Status=[Msg|S],
	    check_repeatedvar([H1|T],S,TS)
	;
	  check_repeatedvar([H2|T],Status,TS)
        ).


allgvar_notin([],S,S) :- !.

allgvar_notin([H|L],Status,TS) :-
	is_flvar(H,FL_UNDERSCORE,_I),
	!,
	allgvar_notin(L,Status,TS).

allgvar_notin([H|T],[Msg|S],TS) :-
	is_flvar(H,Name,Index),
	compiling_error(Index,GVAR_NOTIN,Msg),
	remove_dupvars(T,Name,L),
	allgvar_notin(L,S,TS).


/****************************************************************************
  compile_flobjeql(+Obj1,+Obj2,-OidCode,-Code,-Status)
****************************************************************************/
compile_flobjeql(Obj1,Obj2,OidCode,Code,Status) :-
	compile_pathexplist([Obj1,Obj2],[O1,O2],OidCode,OCode,Status),
	( Status == [] ->
	    objeql_struct(BODYLITERAL,O1,O2,OECode),
	    conjunct_code([OCode,OECode],Code)
	;
	  true
	).


/****************************************************************************
  compile_head_fltermobj(+FunctorTerm,+Arity,+ArgList,-Object,-Code,-H2BCodeHead,-H2BCodeTail,-Status)
****************************************************************************/
compile_head_fltermobj(Funct,N,Args,Object,Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_pathexplist([Funct|Args],[FObj|AObj],Code,H2BCodeHead,H2BCodeTail,Status),
	(Status == [] -> termobj_struct(FObj,N,AObj,Object); true).


/****************************************************************************
  compile_head_fltermlit(+FunctorTerm,+Arity,+ArgList,-Code,-H2BCodeHead,-H2BCodeTail,-Status)

  Compile a term in a rule head in a predicate position.
****************************************************************************/
compile_head_fltermlit(Funct,N,Args,Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_pathexplist([Funct|Args],[FObj|AObj],ObjCode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    termlit_struct(HEADLITERAL,FObj,N,AObj,TObj),
	    conjunct_struct(ObjCode,TObj,Code)
	;
	  true
        ).

compile_head_fltransactionaltermlit(Funct,N,Args,Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_pathexplist([Funct|Args],[FObj|AObj],ObjCode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    transactionaltermlit_struct(HEADLITERAL,FObj,N,AObj,TObj),
	    conjunct_struct(ObjCode,TObj,Code)
	;
	  true
        ).


/****************************************************************************
  compile_head_fllist(+ObjTermList,+ObjTerm,+Index,-Object,-Code,-H2BCodeHead,-H2BCodeTail,-Status)

  Index refers to '['.
****************************************************************************/
compile_head_fllist(ObjTermList,ObjTerm,Index,Object,Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_pathexplist(ObjTermList,ObjList,ObjListCode,ObjListH2BCodeHead,ObjListH2BCodeTail,S),
	( S == [] ->
	    ( ObjTerm == [] ->
		Obj=[],
		ObjCode=NULL,
		ObjH2BCodeHead=NULL,
		ObjH2BCodeTail=NULL,
		Status=[]
	    ;
	      compile_head_pathexp(ObjTerm,Obj,ObjCode,ObjH2BCodeHead,ObjH2BCodeTail,Status)
	    ),
	    ( Status == [] ->
		list_struct(ObjList,Obj,Index,Object),
		conjunct_struct(ObjListCode,ObjCode,Code),
		conjunct_code([ObjListH2BCodeHead,ObjH2BCodeHead],H2BCodeHead),
		conjunct_code([ObjListH2BCodeTail,ObjH2BCodeTail],H2BCodeTail)
	    ;
	      true
	    )
	;
	  Status=S
        ).


/****************************************************************************
  compile_head_pathexplist(+ParserTermList,-ObjectList,-Code,-H2BCodeHead,-H2BCodeTail,-Status)
****************************************************************************/
compile_head_pathexplist([],[],NULL,NULL,NULL,[]) :- !.

compile_head_pathexplist([T|L],[TObj|LObj],Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_pathexp(T,TObj,TCode,TH2BCodeHead,TH2BCodeTail,S),
	( S == [] ->
	    compile_head_pathexplist(L,LObj,LCode,LH2BCodeHead,LH2BCodeTail,Status),
	    (Status == [] ->
		    conjunct_struct(TCode,LCode,Code),
		    conjunct_code([TH2BCodeHead,LH2BCodeHead],H2BCodeHead),
		    conjunct_code([TH2BCodeTail,LH2BCodeTail],H2BCodeTail)
	     ;
	      true)
	;
	  Status=S
        ).


/****************************************************************************
  compile_head_pathexp(+ParserTerm,-Object,-Code,-H2BCodeHead,-H2BCodeTail,-Status)

  Note: It is for skolemization.
****************************************************************************/
compile_head_pathexp(ParserTerm,Object,NULL,NULL,NULL,Status) :-
	( is_flatom(ParserTerm,_A) ->
	    atomobj_struct(ParserTerm,Object),
	    Status=[]

        ; is_fltransactionalatom(ParserTerm,_A) ->
            transactionalatomobj_struct(ParserTerm,Object),
	    Status=[]

	; is_flnumber(ParserTerm,_N) ->
	    numobj_struct(ParserTerm,Object),
	    Status=[]

	; is_flvar(ParserTerm,Name,Index) ->
	    compile_flvar(Name,Index,Object),
	    Status=[]

        ; is_fltransactionalvar(ParserTerm,Name,Index) ->
            compile_fltransactionalvar_without_trans(Name,Index,Object),
	    Status=[]

	; is_flbuiltin_identifier(ParserTerm,_Ident) ->
	    builtin_identifier_struct(ParserTerm,Object),
	    Status=[]

	; is_fldatatype(ParserTerm,_Sort,_Lit,_Index) ->
	    datatypeobj_struct(ParserTerm,Object,Status)

	; is_flurisq(ParserTerm,_P,_L) ->
	    urisqobj_struct(ParserTerm,Object),
	    Status=[]

	; is_flstring(ParserTerm,_S) ->
	    strobj_struct(ParserTerm,Object),
	    Status=[]

	; is_fltransactionalstring(ParserTerm,_S) ->
	    transactionalstrobj_struct(ParserTerm,Object),
	    Status=[]

	; is_fltoken(ParserTerm,Token,Index) ->
	    compile_head_fltoken(Token,Index,Object),
	    Status=[]

	; is_fltoken(ParserTerm,Token,Num,Index) ->      
	    compile_head_fltoken(Token,Num,Index,Object),
	    Status=[] 
	),
	!.

compile_head_pathexp(ParserTerm,Object,Code,H2BCodeHead,H2BCodeTail,Status) :-
	( is_flbirelate(ParserTerm,OT1,RelType,OT2) ->
	    compile_head_flbirelate(OT1,RelType,OT2,Object,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_flobjspec(ParserTerm,ObjTerm,Spec) ->
	    compile_head_flobjspec(ObjTerm,Spec,Object,Code,H2BCodeHead,H2BCodeTail,Status)

        ; is_flobjref(ParserTerm,ObjTerm,RefType,AttTerm) -> 	 
            compile_head_flobjref(ObjTerm,RefType,AttTerm,Object,Code,H2BCodeHead,H2BCodeTail,Status) 	 

	; is_reifyop(ParserTerm,Formula) ->
	    %% Code: code to get Object
	    compile_reifyop(Formula,Object,Code,Status),
	    H2BCodeHead = NULL,
	    H2BCodeTail = NULL

	; is_flterm(ParserTerm,Funct,N,Args) ->
	    compile_head_fltermobj(Funct,N,Args,Object,Code,H2BCodeHead,H2BCodeTail,Status)
        
        ; is_fltransactionalterm(ParserTerm,Funct,N,Args) ->
	    compile_head_fltermobj(Funct,N,Args,Object,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_fllist(ParserTerm,L,T,I) ->
	    compile_head_fllist(L,T,I,Object,Code,H2BCodeHead,H2BCodeTail,Status)
	;
	  is_flworkspace(ParserTerm,P,WS),
	  compile_head_wspathexp(P,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status)
        ).


/****************************************************************************
  compile_head_fltoken(+Token,+Index,-Object)

  Handles _#, _#123, _@, atoms
****************************************************************************/
compile_head_fltoken(Token,Index,Object) :-
	( Token == FL_NEWOID ->
	    new_oidobj(Index,Object)
        ; Token == FL_THISMODULE ->
	    thismodule_struct(Object)
        ;
	  atomobj_struct(Token,Index,Object)
	).

/****************************************************************************
  compile_head_fltoken(+Token,+Num,+Index,-Object)
****************************************************************************/
compile_head_fltoken(Token,Num,Index,Object) :-
        ( Token == FL_NEWOID ->
            flora_get_counter(RULE_NUM, Rule_num), 
	    new_oidobj(Rule_num,Num,Index,Object)
        ;
          atomobj_struct(Token,Index,Object)
        ).


/****************************************************************************
  compile_head_flobjref(+ObjT,+RefType,+AttT,-Object,-Code,-H2BCodeHead,-H2BCodeTail,-Status)

  Objref in the head is object specified by path expression.
  E.g., p(a.b) :- .... Translated as p(?Newvar) :- ..., a[b-> ?Newvar]
****************************************************************************/
compile_head_flobjref(ObjTerm,RefType,AttTerm,Object,Code,H2BCodeHead,H2BCodeTail,Status) :- 
        compile_head_pathexplist([ObjTerm,AttTerm],[Obj,Att],OACode,OAH2BCodeHead,OAH2BCodeTail,Status), 	 
        ( Status == [] -> 	 
            %% Approximate the textual information for the new variable.
            approximate_index(AttTerm,Index), 	 
            head_objref_struct(Obj,RefType,Att,Index,Object,TCode),
	    OAH2BCodeHead = H2BCodeHead,
	    conjunct_code([OAH2BCodeTail,TCode],H2BCodeTail),
	    Code = OACode
        ; 	 
          true 	 
        ). 	 
 	 
 	 
/****************************************************************************
  compile_head_flbirelate(+OT1,+RelType,+OT2,-Object,-Code,-H2BCodeHead,-H2BCodeTail,-Status)
****************************************************************************/
compile_head_flbirelate(ObjTerm1,RelType,ObjTerm2,Obj1,Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_pathexplist([ObjTerm1,ObjTerm2],[Obj1,Obj2],OCode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    birelate_struct(HEADLITERAL,Obj1,RelType,Obj2,TCode),
	    conjunct_struct(OCode,TCode,Code)
	;
	  true
        ).


/****************************************************************************
  compile_head_flobjspec(+ObjTerm,+SpecBody,-Object,-Code,-H2BCodeHead,-H2BCodeTail,-Status)
    Objspec is defined in the BNF at the top of flrparser.P
    It is pathexpression[ specbody ]
****************************************************************************/
compile_head_flobjspec(ObjTerm,SpecBody,Object,Code,H2BCodeHead,H2BCodeTail,Status) :-
	( SpecBody == [] ->
	    compile_head_pathexp(ObjTerm,Object,ObjCode,H2BCodeHead,H2BCodeTail,Status),
	    ( Status == [] ->
		objexists_struct(HEADLITERAL,Object,ECode),
		conjunct_struct(ObjCode,ECode,Code)
	    ;
	      true
	    )
	;
	  compile_head_pathexp(ObjTerm,Object,ObjCode,ObjH2BCodeHead,ObjH2BCodeTail,S),
	  ( S == [] ->
	      compile_head_flspecbody(Object,SpecBody,SCode,SH2BCodeHead,SH2BCodeTail,Status),
	      (Status == [] ->
		      conjunct_struct(ObjCode,SCode,Code),
		      conjunct_code([ObjH2BCodeHead,SH2BCodeHead],H2BCodeHead),
		      conjunct_code([ObjH2BCodeTail,SH2BCodeTail],H2BCodeTail)
	       ;
	       true)
	  ;
	    Status=S
	  )
        ).


/****************************************************************************
  compile_head_flspecbody(+Object,+SpecTerm,-Code,-H2BCodeHead,-H2BCodeTail,-Status)
  compile_head_mvdattspec(+Object,+AttObj,+RefType,+VL,-Code,-H2BCodeHead,-H2BCodeTail,-Status)

  H2BCodeHead - code passed from head to body, which is supposed to be
                prepended to the code of the body
  H2BCodeTail - code passed from head to body, which is supposed to be
                appended to the code of the body
****************************************************************************/
compile_head_flspecbody(Object,SpecTerm,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_flconjunct(SpecTerm,L,R),
	!,
	compile_head_flspecbody(Object,L,LCode,LH2BCodeHead,LH2BCodeTail,S),
	( S == [] ->
	    compile_head_flspecbody(Object,R,RCode,RH2BCodeHead,RH2BCodeTail,Status),
	    (Status == [] ->
		    conjunct_struct(LCode,RCode,Code),
		    conjunct_code([LH2BCodeHead,RH2BCodeHead],H2BCodeHead),
		    conjunct_code([LH2BCodeTail,RH2BCodeTail],H2BCodeTail)
	     ;
	     true)
	;
	  Status=S
        ).

compile_head_flspecbody(Object,SpecTerm,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_flneg(SpecTerm,G,Idx),
	!,
	compile_head_flspecbody(Object,G,GCode,H2BCodeHead,H2BCodeTail,S),
	(S == [] ->
	    neg_struct(GCode,Idx,Code,Status)
	; Status = S
	).

compile_head_flspecbody(Object,SpecTerm,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_flmvdattspec(SpecTerm,AttTerm,RefType,VL),
	!,
	compile_head_pathexp(AttTerm,AObj,ACode,AH2BCodeHead,AH2BCodeTail,S),
	( S == [] ->
	    ( VL == [] ->
		mvdattdef_struct(HEADLITERAL,Object,AObj,RefType,SCode),
		conjunct_struct(ACode,SCode,Code),
		H2BCodeHead = AH2BCodeHead,
		H2BCodeTail = AH2BCodeTail,
		Status=[]
	    ;
	      compile_head_mvdattspec(Object,AObj,RefType,VL,VCode,VH2BCodeHead,VH2BCodeTail,Status),
	      (Status == [] ->
		      conjunct_struct(ACode,VCode,Code),
		      conjunct_code([AH2BCodeHead,VH2BCodeHead],H2BCodeHead),
		      conjunct_code([AH2BCodeTail,VH2BCodeTail],H2BCodeTail)
	       ; true)
	    )
        ;
	  Status=S
        ).

%% signatures: =>, *=>, etc.
compile_head_flspecbody(Object,SpecTerm,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_flsigattspec(SpecTerm,AttTerm,RefType,ValTerm),
	!,
	compile_head_pathexp(AttTerm,AttObj,ACode,AH2BCodeHead,AH2BCodeTail,S),
	(S == [] ->
	    (is_flemptyterm(ValTerm) ->
		%% This is SIGDEF: occurs when we have a[b=> ()]
		sigattdef_struct(HEADLITERAL,Object,AttObj,RefType,SCode),
		conjunct_struct(ACode,SCode,Code),
		H2BCodeHead = AH2BCodeHead,
		H2BCodeTail = AH2BCodeTail,
		Status=[]
	    ;
		compile_head_pathexp(ValTerm,ValObj,VCode,VH2BCodeHead,VH2BCodeTail,Status),
		( Status == [] ->
		    sigattspec_struct(HEADLITERAL,Object,AttObj,RefType,ValObj,SCode),
		    conjunct_code([SCode,ACode,VCode],Code),
		    conjunct_code([AH2BCodeHead,VH2BCodeHead],H2BCodeHead),
		    conjunct_code([AH2BCodeTail,VH2BCodeTail],H2BCodeTail)
		;
		    true
		)
	    )
	;
	    Status = S
        ).

compile_head_flspecbody(Object,SpecTerm,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_flsigattconspec(SpecTerm,AttTerm,ConstrTerm,RefType,ValTerm),
	!,
	compile_head_pathexp(AttTerm,AttObj,ACode,AH2BCodeHead,AH2BCodeTail,S),
	(S == [] ->
	    (is_flemptyterm(ValTerm) ->
		%% This is SIGDEF: occurs when we have a[b=> ()]
		sigattdef_struct(HEADLITERAL,Object,AttObj,RefType,SCode),
		conjunct_struct(ACode,SCode,Code),
		H2BCodeHead = AH2BCodeHead,
		H2BCodeTail = AH2BCodeTail,
		Status=[]
	    ;
		is_flsigconstr(ConstrTerm,Lower,Upper),
		compile_head_pathexplist([Lower,Upper],[OLower,OUpper],CCode,CH2BCodeHead,CH2BCodeTail,S_C),
		(S_C == [] ->
		    compile_head_pathexp(ValTerm,ValObj,VCode,VH2BCodeHead,VH2BCodeTail,Status),
		    ( Status == [] ->
			sigattspec_struct(HEADLITERAL,Object,AttObj,RefType,ValObj,SCode),
			sigattcondef_struct(HEADLITERAL,Object,AttObj,OLower,OUpper,RefType,CSCode),
			conjunct_code([SCode,CSCode,ACode,CCode,VCode],Code),
			conjunct_code([AH2BCodeHead,CH2BCodeHead,VH2BCodeHead],H2BCodeHead),
			conjunct_code([AH2BCodeTail,CH2BCodeTail,VH2BCodeTail],H2BCodeTail)
		    ;
			true
		    )
		;
		    Status = S_C
		)
	    )
	;
	    Status = S
        ).

%% boolean signatures: =>.
compile_head_flspecbody(Object,SpecTerm,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_flboolsig(SpecTerm,AttTerm,_RefType),
	!,
	compile_head_pathexp(AttTerm,AttObj,ACode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    boolsig_struct(HEADLITERAL,Object,AttObj,SCode),
	    conjunct_struct(ACode,SCode,Code)
	;
	    true
	).

%% boolean signatures: *=>.
compile_head_flspecbody(Object,SpecTerm,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_fliboolsig(SpecTerm,AttTerm,_RefType),
	!,
	compile_head_pathexp(AttTerm,AttObj,ACode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    iboolsig_struct(HEADLITERAL,Object,AttObj,SCode),
	    conjunct_struct(ACode,SCode,Code)
	;
	    true
	).

%% boolean signatures: =>% for transactional method
compile_head_flspecbody(Object,SpecTerm,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_fltransig(SpecTerm,AttTerm,_RefType),
	!,
	compile_head_pathexp(AttTerm,AttObj,ACode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    transig_struct(HEADLITERAL,Object,AttObj,SCode),
	    conjunct_struct(ACode,SCode,Code)
	;
	    true
	).

%% boolean signatures: *=>% for transactional method
compile_head_flspecbody(Object,SpecTerm,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_flitransig(SpecTerm,AttTerm,_RefType),
	!,
	compile_head_pathexp(AttTerm,AttObj,ACode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    itransig_struct(HEADLITERAL,Object,AttObj,SCode),
	    conjunct_struct(ACode,SCode,Code)
	;
	    true
	).

compile_head_flspecbody(Object,SpecTerm,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_flmethspec(SpecTerm,MethTerm),
	!,
	compile_head_pathexp(MethTerm,MethObj,MCode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    methspec_struct(HEADLITERAL,Object,MethObj,SCode),
	    conjunct_struct(MCode,SCode,Code)
	;
	  true
        ).

compile_head_flspecbody(Object,SpecTerm,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_flimethspec(SpecTerm,IMethTerm),
	!,
	compile_head_pathexp(IMethTerm,IMethObj,IMCode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    imethspec_struct(HEADLITERAL,Object,IMethObj,SCode),
	    conjunct_struct(IMCode,SCode,Code)
	;
	  true
        ).

compile_head_flspecbody(Object,SpecTerm,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_fltranspec(SpecTerm,TranTerm),
	!,
	compile_head_pathexp(TranTerm,TranObj,TCode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    transpec_struct(HEADLITERAL,Object,TranObj,SCode),
	    conjunct_struct(TCode,SCode,Code)
	;
	  true
        ).


compile_head_mvdattspec(_Object,_AttObj,_RefType,[],NULL,NULL,NULL,[]) :- !.

compile_head_mvdattspec(Object,AttObj,RefType,[T|L],Code,H2BCodeHead,H2BCodeTail,Status) :-
	!,
	compile_head_pathexp(T,TObj,TCode,TH2BCodeHead,TH2BCodeTail,S),
	( S == [] ->
	    compile_head_mvdattspec(Object,AttObj,RefType,L,LCode,LH2BCodeHead,LH2BCodeTail,Status),
	    ( Status == [] ->
		mvdattspec_struct(HEADLITERAL,Object,AttObj,RefType,TObj,SCode),
		conjunct_struct(LCode,SCode,LSCode),
		conjunct_struct(TCode,LSCode,Code),
		conjunct_code([TH2BCodeHead,LH2BCodeHead],H2BCodeHead),
		conjunct_code([TH2BCodeTail,LH2BCodeTail],H2BCodeTail)
	    ;
	      true
	    )
	;
	  Status=S
        ).


/****************************************************************************
  compile_head_flobjeql(+Obj1,+Obj2,-Code,-H2BCodeHead,-H2BCodeTail,-Status)
  X :=: Y found in a rule head

  H2BCodeHead - code passed from head to body, which is supposed to be
                prepended to the code of the body
  H2BCodeTail - code passed from head to body, which is supposed to be
                appended to the code of the body
****************************************************************************/
compile_head_flobjeql(Obj1,Obj2,Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_pathexplist([Obj1,Obj2],[O1,O2],OCode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    objeql_struct(HEADLITERAL,O1,O2,OECode),
	    conjunct_struct(OCode,OECode,Code),
	    approximate_index(Obj1,Idx),
	    report_option(FLOBJEQLDEF,Idx)
	;
	  true
	).


/****************************************************************************
  compile_head_flneg(+PosLit,+Idx,-Code,-H2BCodeHead,-H2BCodeTail,-Status)

  H2BCodeHead - code passed from head to body, which is supposed to be
                prepended to the code of the body
  H2BCodeTail - code passed from head to body, which is supposed to be
                appended to the code of the body
  neg Lit  found in a rule head
****************************************************************************/
compile_head_flneg(PosLit,Idx,Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_literal(PosLit,PosCode,H2BCodeHead,H2BCodeTail,Status1),
	( Status1 == [] ->
	    head_neg_struct(PosCode,Idx,Code,Status)
	;
	  Status = Status1
	).


/****************************************************************************
  compile_floraliblit(+ParserTerm,+Workspace,-OidCode,-Code,-Status)

  This procedure compiles a literal that is associated with a Flora system
  module specification.
****************************************************************************/
compile_floraliblit(ParserTerm,WS,OidCode,Code,Status) :-
	%% Flora system modules are like normal user modules except that
	%% users cannot load files into them
	is_flatom(WS,WSName,Index),
	report_option(FLSYSMOD(WSName),Index),
	atomobj_struct(WSName,Index,WSNameCode),
	floralib_struct(WSNameCode,WSCode),
	compile_wsliteral(ParserTerm,WSCode,OidCode,Code,Status).


/****************************************************************************
  compile_wsliteral(+ParserTerm,+Workspace,-OidCode,-Code,-Status)
****************************************************************************/
compile_wsliteral(ParserTerm,WS,OidCode,WSCode,Status) :-
	( is_flterm(ParserTerm,Funct,N,Args) ->
	    compile_wstermlit(Funct,N,Args,WS,OidCode,WSCode,Status)

	; is_fltransactionalterm(ParserTerm,Funct,N,Args) ->
	    compile_wstransactionaltermlit(Funct,N,Args,WS,OidCode,WSCode,Status)

	; is_flvar(ParserTerm,VarName,Index) ->
	    %% Is this possible? Should be taken care by the libmodlit code
	    attach_workspace(WS,
			     compile_flvar(VarName,Index,VarCode),
			     VarCode,WSCode),
	    OidCode = NULL,
	    Status = []

	; is_fltransactionalvar(ParserTerm,VarName,Index) ->
	    %% Is this possible? Should be taken care by the libmodlit code
	    attach_workspace(WS,
			     compile_fltransactionalvar(VarName,Index,VarCode),
			     VarCode,WSCode),
	    OidCode = NULL,
	    Status = []

	; is_flbirelate(ParserTerm,ObjTerm1,RelType,ObjTerm2) ->
	    compile_wsflbirelate(ObjTerm1,RelType,ObjTerm2,WS,_Obj,OidCode,WSCode,Status)

	; is_flobjspec(ParserTerm,ObjTerm,Spec) ->
	    compile_wsflobjspec(ObjTerm,Spec,WS,_Obj,OidCode,WSCode,Status)

	; is_flobjeql(ParserTerm,O1,O2) ->
	    compile_wsflobjeql(O1,O2,WS,OidCode,WSCode,Status)

	; is_fldirective(ParserTerm,DirectList,_Idx) ->
	    compile_exec_directive(DirectList,WS,WSCode,Status),
	    OidCode=NULL
	;
	    attach_workspace(WS,
			     atomlit_struct(BODYLITERAL,ParserTerm,Code),
			     Code,WSCode),
	    OidCode=NULL,
	    Status=[]
	;
	    attach_workspace(WS,
			     transactionalatomlit_struct(BODYLITERAL,ParserTerm,Code),
			     Code,WSCode),
	    OidCode=NULL,
	    Status=[]
	).


/****************************************************************************
  compile_floralibobj(+ParserTerm,+Workspace,-Object,-OidCode,-Code,-Status)
****************************************************************************/
compile_floralibobj(ParserTerm,WS,Object,OidCode,Code,Status) :-
	is_flatom(WS,WSName,Index),
	report_option(FLSYSMOD(WSName),Index),
	atomobj_struct(WSName,Index,WSNameCode),
	floralib_struct(WSNameCode,WSCode),
	compile_wspathexp(ParserTerm,WSCode,Object,OidCode,Code,Status).


/****************************************************************************
  compile_wspathexp(+ParserTerm,+Workspace,-Object,-OidCode,-Code,-Status)
****************************************************************************/
compile_wspathexp(ParserTerm,WS,Object,OidCode,Code,Status) :-
	(   %% pred(Term@...)
	    %% Note: We have to create code to compute X@.... We put this
	    %% code in OidCode so that it would precede the code for pred(...)
	    atomlit_struct(BODYLITERAL,ParserTerm,A) ->
	    workspaceobj_struct(A,WS,Object,OidCode),
	    Code=NULL,
	    Status=[]

	; transactionalatomlit_struct(BODYLITERAL,ParserTerm,A) ->
	    workspaceobj_struct(A,WS,Object,OidCode),
	    Code=NULL,
	    Status=[]

	; is_flterm(ParserTerm,Funct,N,Args) ->
	    %%abort('Compiler - DEPRECATED!!! unreified predicate in obj pos'),
	    compile_wstermobj(Funct,N,Args,WS,Object,OidCode,Code,Status)

	; is_fltransactionalterm(ParserTerm,Funct,N,Args) ->
	    %%abort('Compiler - DEPRECATED!!! unreified predicate in obj pos'),
	    compile_wstransactionaltermobj(Funct,N,Args,WS,Object,OidCode,Code,Status)

	; is_flbirelate(ParserTerm,ObjTerm1,RelType,ObjTerm2) ->
	    %%abort('Compiler - DEPRECATED!!! unreified ISA in obj pos'),
	    compile_wsflbirelate(ObjTerm1,RelType,ObjTerm2,WS,Object,OidCode,Code,Status)

	; is_flobjspec(ParserTerm,ObjTerm,Spec) ->
	    %%abort('Compiler - DEPRECATED!!! unreified molecule in obj pos'),
	    compile_wsflobjspec(ObjTerm,Spec,WS,Object,OidCode,Code,Status)

	%% pred(X@...)
	%% Note: We have to create code to compute X@..., so we put
	%% this code in OidCode so that it would precede the code for pred(...)
	; is_flvar(ParserTerm,VarName,VarIndex) ->
	    compile_flvar(VarName,VarIndex,VarCode),
	    workspaceobj_struct(VarCode,WS,Object,OidCode),
	    Code=NULL,
	    Status = []
	;
	  is_flobjref(ParserTerm,ObjTerm,RefType,AttTerm),
	  compile_wsflobjref(ObjTerm,RefType,AttTerm,WS,Object,OidCode,Code,Status)

	; is_flurisq(ParserTerm,_P,_L) ->
	    %% situations like ?X=aaa#bbb@ws (uses prefix definition in mod ws)
	    urisqobj_struct(ParserTerm,UrisqCode),
	    workspaceobj_struct(UrisqCode,WS,Object,OidCode),
	    Code=NULL,
	    Status = []

	).


/****************************************************************************
  compile_wsflpathexplist(+ParserTermList,+Workspace,-ObjectList,-OidCode,-Code,-Status)
****************************************************************************/
compile_wsflpathexplist([],_WS,[],NULL,NULL,[]).

compile_wsflpathexplist([T|L],WS,[TObj|LObj],OidCode,Code,Status) :-
	compile_wsflpathexp(T,WS,TObj,OidCodeHead,TCode,S),
	( S == [] ->
	    compile_wsflpathexplist(L,WS,LObj,OidCodeTail,LCode,Status),
	    (Status == [] ->
		conjunct_code([TCode,LCode],Code),
		conjunct_code([OidCodeHead,OidCodeTail],OidCode)
	    ; true
	    )
	;
	  Status=S
        ).


/****************************************************************************
  compile_wsflpathexp(+ParserTerm,+Workspace,-Object,-OidCode,-Code,-Status)

  Note: The difference between compile_wsflpathexp and compile_wspathexp
        is that compile_wsflpathexp applies workspace only to F-Logic
        constructs.
****************************************************************************/
compile_wsflpathexp(ParserTerm,WS,Object,OidCode,Code,Status) :-
	( is_flobjref(ParserTerm,ObjTerm,RefType,AttTerm) ->
	    compile_wsflobjref(ObjTerm,RefType,AttTerm,WS,Object,OidCode,Code,Status)

	; is_flobjspec(ParserTerm,ObjTerm,Spec) ->
	    compile_wsflobjspec(ObjTerm,Spec,WS,Object,OidCode,Code,Status)

	; is_flbirelate(ParserTerm,ObjTerm1,RelType,ObjTerm2) ->
	    compile_wsflbirelate(ObjTerm1,RelType,ObjTerm2,WS,Object,OidCode,Code,Status)

	; is_flterm(ParserTerm,Funct,N,Args) ->
	    compile_wsfltermobj(Funct,N,Args,WS,Object,OidCode,Code,Status)

	; is_fltransactionalterm(ParserTerm,Funct,N,Args) ->
	    compile_wsfltermobj(Funct,N,Args,WS,Object,OidCode,Code,Status)

	; is_fllist(ParserTerm,L,T,I) ->
	    compile_wsfllist(L,T,I,WS,Object,OidCode,Code,Status)

	; is_flworkspace(ParserTerm,P,NestedWS) ->
	    compile_wspathexp(P,NestedWS,Object,OidCode,Code,Status)
	;
	  %% workspace not distributive over nested aggregates
	  compile_pathexp(ParserTerm,Object,OidCode,Code,Status)
        ).


/****************************************************************************
  compile_wstermobj(+FunctorTerm,+Arity,+ArgList,+Workspace,-Object,-OidCode,-Code,-Status)
****************************************************************************/
compile_wstermobj(Funct,N,Args,WS,Object,OidCode,Code,Status) :-
	compile_wsflpathexplist([Funct|Args],WS,[FObj|AObj],OidCode,TCode,Status),
	( Status == [] ->
	    termlit_struct(BODYLITERAL,FObj,N,AObj,O),
	    workspaceobj_struct(O,WS,Object,WCode),
	    conjunct_code([TCode,WCode],Code)
	;
	  true
        ).

compile_wstransactionaltermobj(Funct,N,Args,WS,Object,OidCode,Code,Status) :-
	compile_wsflpathexplist([Funct|Args],WS,[FObj|AObj],OidCode,TCode,Status),
	( Status == [] ->
	    transactionaltermlit_struct(BODYLITERAL,FObj,N,AObj,O),
	    workspaceobj_struct(O,WS,Object,WCode),
	    conjunct_code([TCode,WCode],Code)
	;
	  true
        ).


/****************************************************************************
  compile_wsfltermobj(+FunctorTerm,+Arity,+ArgList,+Workspace,-Object,-OidCode,-Code,-Status)

  Note: The difference between compile_wsfltermobj and compile_wstermobj
        is that compile_wsfltermobj applies workspace only to F-Logic
        constructs.  
****************************************************************************/
compile_wsfltermobj(Funct,N,Args,WS,Object,OidCode,Code,Status) :-
	compile_wsflpathexplist([Funct|Args],WS,[FObj|AObj],OidCode,Code,Status),
	(Status == [] -> termobj_struct(FObj,N,AObj,Object); true).


/****************************************************************************
  compile_wstermlit(+FunctorTerm,+Arity,+ArgList,+Workspace,-OidCode,-Code,-Status)
****************************************************************************/
compile_wstermlit(Funct,N,Args,WS,OidCode,Code,Status) :-
	compile_wsflpathexplist([Funct|Args],WS,[FObj|AObj],OidCode,ObjCode,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     termlit_struct(BODYLITERAL,FObj,N,AObj,TCode),
			     TCode,WSCode),
	    conjunct_code([WSCode,ObjCode],Code)
	;
	  true
        ).

compile_wstransactionaltermlit(Funct,N,Args,WS,OidCode,Code,Status) :-
	compile_wsflpathexplist([Funct|Args],WS,[FObj|AObj],OidCode,ObjCode,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     transactionaltermlit_struct(BODYLITERAL,FObj,N,AObj,TCode),
			     TCode,WSCode),
	    conjunct_code([WSCode,ObjCode],Code)
	;
	  true
        ).

/****************************************************************************
  compile_wsfllist(+ObjTermList,+ObjTerm,+Index,+WS,-Object,-OidCode,-Code,-Status)
    Lists are like this: [a,b,c|rest]
    ObjTermList refers to the list [a,b,c] and ObjTerm to rest.
****************************************************************************/
compile_wsfllist(ObjTermList,ObjTerm,Index,WS,Object,OidCode,Code,Status) :-
	compile_wsflpathexplist(ObjTermList,WS,ObjList,OidCodeList,ObjListCode,S),
	( S == [] ->
	    ( ObjTerm == [] ->
		Obj=[],
		ObjCode=NULL,
		Status=[]
	    ;
	      compile_wsflpathexp(ObjTerm,WS,Obj,OidCodeObj,ObjCode,Status)
	    ),
	    ( Status == [] ->
		list_struct(ObjList,Obj,Index,Object),
		conjunct_code([ObjListCode,ObjCode],Code),
		conjunct_code([OidCodeList,OidCodeObj],OidCode)
	    ;
	      true
	    )
	;
	  Status=S
        ).


/****************************************************************************
  compile_wsflobjref(+ObjTerm,+RefType,+AttTerm,+Workspace,-Object,-OidCode,-Code,-Status)

  Process an object reference like a.b.c@module
  An objref can be more complex, e.g., a[f->g].b[h->>p].c[k->u]@module
****************************************************************************/
compile_wsflobjref(ObjTerm,RefType,AttTerm,WS,Object,OidCode,Code,Status) :-
	compile_wsflpathexplist([ObjTerm,AttTerm],WS,[Obj,Att],OidCodeList,OACode,Status),
	( Status == [] ->
	    %% Approximate the textual information for the new variable.
	    approximate_index(AttTerm,Index),
	    attach_workspace(WS,
			    body_objref_struct(Obj,RefType,Att,Index,Object,TCode),
			     TCode,WTCode),
	    Code = OACode,
	    conjunct_code([OidCodeList,WTCode],OidCode)
	;
	  true
        ).


/****************************************************************************
  compile_wsflbirelate(+ObjTerm1,+RelType,+ObjTerm2,+Workdpace,-Object,-OidCode,-Code,-Status)
****************************************************************************/
compile_wsflbirelate(ObjTerm1,RelType,ObjTerm2,WS,Obj1,OidCode,Code,Status) :-
	compile_wsflpathexplist([ObjTerm1,ObjTerm2],WS,[Obj1,Obj2],OidCode,OCode,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     birelate_struct(BODYLITERAL,Obj1,RelType,Obj2,TCode),
			     TCode,WTCode),
	    conjunct_code([WTCode,OCode],Code)
	;
	  true
        ).


/****************************************************************************
  compile_wsflobjspec(+ObjTerm,+SpecBody,+Workspace,-Object,-OidCode,-Code,-Status)

  Code produced by this and similar predicates is divided into
  OidCode and Code. 
  OidCode is the code needed to compute the attribute of molecule
  and the oid, and the oid of the value part (in ->, ->>, etc.)
  Code represents the code needed to compute the the attribute specification.
  For instance, in  a.b[c.d->e.f],
      OidCode will represent the computation of c.d and e.d:
	 prand(prmvd(a,b,_newvar1),prand(prmvd(c,d,_newvar2),prmvd(e,d,_newvar3)))
      Code will represent the -> part:
                 prmvd(_newvar1,_newvar2,_newvar3)
****************************************************************************/
compile_wsflobjspec(ObjTerm,SpecBody,WS,Object,OidCode,Code,Status) :-
	( SpecBody == [] ->
	    ( is_flobjref(ObjTerm,OTerm,RefType,ATerm) ->
		compile_wsflpathexplist([OTerm,ATerm],WS,[OObj,AObj],OidCode,ObjCode,Status),
		( Status == [] ->
		    approximate_index(ATerm,Index),
		    attach_workspace(WS,
				     %% The predicate objattdef_struct is
				     %% defunct now. Was wrong way to compile.
				     %%objattdef_struct(BODYLITERAL,OObj,RefType,AObj,TCode),
				     body_objref_struct(OObj,RefType,AObj,Index,Object,TCode),
				     TCode,WTCode),
		    conjunct_code([WTCode,ObjCode],Code)
		;
		  true
	        )
	    ;
		%% object exists test: a.b.c[]@module
		compile_wsflpathexp(ObjTerm,WS,Object,OidCode,ObjCode,Status),
		( Status == [] ->
		    attach_workspace(WS,
				     objexists_struct(BODYLITERAL,Object,ECode),
				     ECode,WSECode),
		    conjunct_code([WSECode,ObjCode],Code)
		;
		    true
		)
	    )
	; % oid spec plus object spec. something like a.b[c->d]@module
	  compile_wsflpathexp(ObjTerm,WS,Object,ObjOidCode,ObjCode,S),
	  ( S == [] ->
	      compile_wsflspecbody(Object,SpecBody,WS,SpecOidCode,SpecCode,Status),
	      (Status == [] ->
		  conjunct_code([ObjCode,SpecCode],Code),
		  conjunct_code([ObjOidCode,SpecOidCode],OidCode)
	      ; 
		  true
	      )
	  ;
	    Status=S
          )
        ).


/****************************************************************************
  compile_wsflspecbody(+Object,+SpecTerm,+Workspace,-OidCode,-Code,-Status)
****************************************************************************/
compile_wsflspecbody(Object,SpecTerm,WS,OidCode,Code,Status) :-
	is_flconjunct(SpecTerm,L,R),
	!,
	compile_wsflspecbody(Object,L,WS,OidCode,LCode,S),
	( S == [] ->
	    compile_wsflspecbody(Object,R,WS,OidCode,RCode,Status),
	    (Status == [] -> conjunct_code([LCode,RCode],Code); true)
	;
	  Status=S
        ).

compile_wsflspecbody(Object,SpecTerm,WS,OidCode,Code,Status) :-
	is_fldisjunct(SpecTerm,L,R),
	!,
	compile_wsflspecbody(Object,L,WS,OidCode,LCode,S),
	( S == [] ->
	    compile_wsflspecbody(Object,R,WS,OidCode,RCode,Status),
	    (Status == [] -> disjunct_struct(LCode,RCode,Code); true)
	;
	  Status=S
        ).

compile_wsflspecbody(Object,SpecTerm,WS,OidCode,Code,Status) :-
	is_flnaf(SpecTerm,G),
	!,
	compile_wsflspecbody(Object,G,WS,OidCode,GCode,Status),
	(Status == [] ->
	    conjunct_code([OidCode,GCode],CombinedGCode),
	    naf_struct(CombinedGCode,Code)
	; true
	).

compile_wsflspecbody(Object,SpecTerm,WS,OidCode,Code,Status) :-
	is_flneg(SpecTerm,G,Idx),
	!,
	compile_wsflspecbody(Object,G,WS,OidCode,GCode,Status1),
	(Status1 == [] ->
	    conjunct_code([OidCode,GCode],CombinedGCode),
	    neg_struct(CombinedGCode,Idx,Code,Status)
	; Status = Status1
	).

compile_wsflspecbody(Object,SpecTerm,WS,OidCode,Code,Status) :-
	is_flnot(SpecTerm,G),
	!,
	compile_wsflspecbody(Object,G,WS,OidCode,GCode,Status),
	(Status == [] ->
	    conjunct_code([OidCode,GCode],CombinedGCode),
	    not_struct(CombinedGCode,Code)
	; true
	).

%% OidCodeList below gets bound to code needed to produce
%% the attribute (M) and the value (V). We conjunct this code in front of the
%% code for the molecule
%% NULL means tht we don't pass OID code out, because we use it right here.

%% No OidCode is passed outside: we consume it here
compile_wsflspecbody(Object,SpecTerm,WS,NULL,Code,Status) :-
	is_flmvdattspec(SpecTerm,AttTerm,RefType,ValTermList),
	!,
	compile_wsflpathexp(AttTerm,WS,AttObj,AOidCode,ACode,S),
	( S == [] ->
	    ( ValTermList == [] ->
		attach_workspace(WS,
				 mvdattdef_struct(BODYLITERAL,Object,AttObj,RefType,SCode),
				 SCode,WSCode),
		%% Fold OidCode in front of molecule
		conjunct_code([AOidCode,ACode,WSCode],Code),
		Status=[]
	    ;
	      compile_wsmvdattspec(Object,AttObj,RefType,ValTermList,WS,VOidCode,WSCode,Status),
	      (Status == [] ->
		  %% ACode: Code to produce attribute
		  %% WSCode: code to produce pure attr specs and 
		  %%         the objects that represents the values
		  conjunct_code([AOidCode,VOidCode,ACode,WSCode],Code)
	      ; true
	      )
	    )
        ;
	  Status=S
        ).

%% signatures: =>, *=>, etc.
compile_wsflspecbody(Object,SpecTerm,WS,NULL,Code,Status) :-
	is_flsigattspec(SpecTerm,AttTerm,RefType,ValTerm),
	!,
	compile_wsflpathexp(AttTerm,WS,AttObj,AOidCode,ACode,S),
	(S == [] ->
	    (is_flemptyterm(ValTerm) ->
		%% This is SIGDEF: occurs when we have a[b=> ()]
		attach_workspace(WS,
				 sigattdef_struct(BODYLITERAL,Object,AttObj,RefType,SCode),
				 SCode,WSCode),
		conjunct_code([AOidCode,ACode,WSCode],Code),
		Status=[]
	    ;
		compile_wsflpathexp(ValTerm,WS,ValObj,VOidCode,VCode,Status),
		( Status == [] ->
		    attach_workspace(WS,
				     sigattspec_struct(BODYLITERAL,Object,AttObj,RefType,ValObj,SCode),
				     SCode,WSCode),
		    conjunct_code([AOidCode,VOidCode,ACode,VCode,WSCode],Code)
		;
		    true
		)
	    )
	;
	    Status = S
        ).

compile_wsflspecbody(Object,SpecTerm,WS,NULL,Code,Status) :-
	is_flsigattconspec(SpecTerm,AttTerm,ConstrTerm,RefType,ValTerm),
	!,
	compile_wsflpathexp(AttTerm,WS,AttObj,AOidCode,ACode,S),
	(S == [] ->
	    (is_flemptyterm(ValTerm) ->
		%% This is SIGDEF: occurs when we have a[b=> ()]
		attach_workspace(WS,
				 sigattdef_struct(BODYLITERAL,Object,AttObj,RefType,SCode),
				 SCode,WSCode),
		conjunct_code([AOidCode,ACode,WSCode],Code),
		Status=[]
	    ;
		is_flsigconstr(ConstrTerm,Lower,Upper),
		compile_wsflpathexplist([Lower,Upper],WS,[OLower,OUpper],COidCode,CCode,S_C),
		(S_C == [] ->
		    compile_wsflpathexp(ValTerm,WS,ValObj,VOidCode,VCode,Status),
		    ( Status == [] ->
			attach_workspace(WS,
					 sigattspec_struct(BODYLITERAL,Object,AttObj,RefType,ValObj,SCode),
					 SCode,WSCode),
			attach_workspace(WS,
					 sigattconstr_struct(BODYLITERAL,Object,AttObj,OLower,OUpper,RefType,CSCode),
					 CSCode,CWSCode),
			conjunct_code([AOidCode,VOidCode,ACode,VCode,WSCode,COidCode,CCode,CWSCode],Code)
		    ;
			true
		    )
		;
		    Status = S_C
		)
	    )
	;
	    Status = S
        ).

%% boolean signatures: =>.
compile_wsflspecbody(Object,SpecTerm,WS,NULL,Code,Status) :-
	is_flboolsig(SpecTerm,AttTerm,_RefType),
	!,
	compile_wsflpathexp(AttTerm,WS,AttObj,AOidCode,ACode,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     boolsig_struct(BODYLITERAL,Object,AttObj,SCode),
			     SCode,WSCode),
	    conjunct_code([AOidCode,ACode,WSCode],Code)
	;
	    true
	).

%% boolean signatures: *=>.
compile_wsflspecbody(Object,SpecTerm,WS,NULL,Code,Status) :-
	is_fliboolsig(SpecTerm,AttTerm,_RefType),
	!,
	compile_wsflpathexp(AttTerm,WS,AttObj,AOidCode,ACode,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     iboolsig_struct(BODYLITERAL,Object,AttObj,SCode),
			     SCode,WSCode),
	    conjunct_code([AOidCode,ACode,WSCode],Code)
	;
	    true
	).

%% boolean signatures: =>% for transactional method
compile_wsflspecbody(Object,SpecTerm,WS,NULL,Code,Status) :-
	is_fltransig(SpecTerm,AttTerm,_RefType),
	!,
	compile_wsflpathexp(AttTerm,WS,AttObj,AOidCode,ACode,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     transig_struct(BODYLITERAL,Object,AttObj,SCode),
			     SCode,WSCode),
	    conjunct_code([AOidCode,ACode,WSCode],Code)
	;
	    true
	).

%% boolean signatures: *=>% for transactional method
compile_wsflspecbody(Object,SpecTerm,WS,NULL,Code,Status) :-
	is_flitransig(SpecTerm,AttTerm,_RefType),
	!,
	compile_wsflpathexp(AttTerm,WS,AttObj,AOidCode,ACode,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     itransig_struct(BODYLITERAL,Object,AttObj,SCode),
			     SCode,WSCode),
	    conjunct_code([AOidCode,ACode,WSCode],Code)
	;
	    true
	).

%% +>>, *+>>@module
%% NULL means: consume OidCode for attr and val here -- don't pass up the chain
compile_wsflspecbody(Object,SpecTerm,WS,NULL,Code,Status) :-
	is_flincattspec(SpecTerm,AttTerm,RefType,ValTerm),
	!,
	compile_wsflpathexplist([AttTerm,ValTerm],WS,[AttObj,ValObj],OidCode,OCode,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     incattspec_struct(Object,AttObj,RefType,ValObj,SCode),
			     SCode,WSCode),
	    %% Fold OidCode in front of molecule
	    conjunct_code([OidCode,WSCode,OCode],Code)
	;
	  true
        ).

%% same for ->->@module
%% NULL means: consume OidCode for attr and val here -- don't pass up the chain
compile_wsflspecbody(Object,SpecTerm,WS,NULL,Code,Status) :-
	is_fltolistattspec(SpecTerm,AttTerm,RefType,ValTerm),
	!,
	compile_wsflpathexplist([AttTerm,ValTerm],WS,[AttObj,ValObj],OidCode,OCode,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     tolistattspec_struct(Object,AttObj,RefType,ValObj,SCode),
			     SCode,WSCode),
	    conjunct_code([OidCode,WSCode,OCode],Code)
	;
	  true
        ).

%% Obj[true], Obj[fail], Obj[!] translate as true, fail, and !
compile_wsflspecbody(_Object,SpecTerm,_WS,NULL,Code,Status) :-
	is_flpassthru(SpecTerm,P),
	is_flatom(P, Atom, I),
	!,
	(Atom==FL_CUT
	-> cut_struct(I,Code)
	; atomobj_struct(P,Code)
	),
	Status=[].

%% Obj[X>Y], Obj[X=Y], etc.
compile_wsflspecbody(_Object,SpecTerm,_WS,NULL,Code,Status) :-
	is_flpassthru(SpecTerm,P),
	is_flterm(P, Funct, N, Args),
	!,
	compile_prlgterm(Funct,N,Args,TCode,_OidCode,ACode,Status),
	(Status == [] -> conjunct_code([ACode,TCode],Code); true).

%% for O[BoolMeth]@module
%% NULL means: consume OidCode for attr and val here -- don't pass up the chain
compile_wsflspecbody(Object,SpecTerm,WS,NULL,Code,Status) :-
	is_flmethspec(SpecTerm,MethTerm),
	!,
	compile_wsflpathexp(MethTerm,WS,MethObj,OidCode,MCode,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     methspec_struct(BODYLITERAL,Object,MethObj,SCode),
			     SCode,WSCode),
	    conjunct_code([OidCode,MCode,WSCode],Code)
	;
	  true
        ).

%% for O[*BoolMeth]@module
%% NULL means: consume OidCode for attr and val here -- don't pass up the chain
compile_wsflspecbody(Object,SpecTerm,WS,NULL,Code,Status) :-
	is_flimethspec(SpecTerm,IMethTerm),
	!,
	compile_wsflpathexp(IMethTerm,WS,IMethObj,OidCode,IMCode,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     imethspec_struct(BODYLITERAL,Object,IMethObj,SCode),
			     SCode,WSCode),
	    %% Fold OidCode in front of molecule
	    conjunct_code([OidCode,IMCode,WSCode],Code)
	;
	  true
        ).

%% O[%M]@module
compile_wsflspecbody(Object,SpecTerm,WS,NULL,Code,Status) :-
	is_fltranspec(SpecTerm,TranTerm),
	!,
	compile_wsflpathexp(TranTerm,WS,TranObj,OidCode,TCode,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     transpec_struct(BODYLITERAL,Object,TranObj,SCode),
			     SCode,WSCode),
	    conjunct_code([OidCode,TCode,WSCode],Code)
	;
	  true
        ).


/****************************************************************************
  compile_wsmvdattspec(+Object,+AttObj,+RefType,+ValTermList,+Workspace,-OidCode,-Code,-Status)

  Compiles ->>, *->>, etc., when they have one or more value terms
****************************************************************************/
compile_wsmvdattspec(Object,AttObj,RefType,[T],WS,OidCode,Code,Status) :-
	!,
	compile_wsflpathexp(T,WS,TObj,OidCode,TCode,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     mvdattspec_struct(BODYLITERAL,Object,AttObj,RefType,TObj,SCode),
			     SCode,WSCode),
	    conjunct_code([WSCode,TCode],Code)
	;
	  true
        ).

compile_wsmvdattspec(Object,AttObj,RefType,[T|L],WS,OidCode,Code,Status) :-
	!,
	compile_wsmvdattspec(Object,AttObj,RefType,[T],WS,OidCodeHead,WTCode,S),
	( S == [] ->
	    compile_wsmvdattspec(Object,AttObj,RefType,L,WS,OidCodeTail,WLCode,Status),
	    (Status == [] ->
		conjunct_code([WTCode,WLCode],Code),
		conjunct_code([OidCodeHead,OidCodeTail],OidCode)
	    ; true
	    )
	;
	  Status=S
        ).


/****************************************************************************
  compile_wsflobjeql(+Obj1,+Obj2,+Workspace,-OidCode,-Code,-Status)
****************************************************************************/
compile_wsflobjeql(Obj1,Obj2,WS,OidCode,Code,Status) :-
	compile_wsflpathexplist([Obj1,Obj2],WS,[O1,O2],OidCode,OCode,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     objeql_struct(BODYLITERAL,O1,O2,OECode),
			     OECode,WSCode),
	    conjunct_code([OCode,WSCode],Code)
	;
	  true
	).


/****************************************************************************
  compile_reifyop(+Formula,-Object,-Status)
  Compiling ${...}
****************************************************************************/
compile_reifyop(Formula,Object,OidCode,Status) :-
	Formula = [Rule|_],
	(is_fldynrule(Rule,_Head,_Body,_Lab)
	; is_flruleworkspace(Rule,_RealRule,_WS)
	),
	!,
	set_context(rule_reification),
        %% singleton/unbound vars are flagged in reified/inserted rules
	compile_fldynrule(FL_INSERTRULE,Rule,Object,Status),
	clear_context(rule_reification),
	OidCode=NULL.

compile_reifyop(Formula,Object,OidCode,Status) :-
	set_context(goal_reification),
	compile_body(Formula,Object1,Status),
	clear_context(goal_reification),
	(is_florasyslib_struct(Object1, Index,FLLIBMODLIT,_N,Args)
	%% If it is compiled into a LIBMODLIT/3, replace with LIBMODOBJ
	->
            flora_new_varobj(Index,Object),
	    append(Args,[Object],NewArgs),
	    %% LIBMODLIT/3 already has the caller argument -- no
	    %% need to add it here
	    florasyslib_struct(Index,FLLIBMODOBJ,4,NewArgs,OidCode)
	;
	    reify_struct(Object1,Object), OidCode = NULL
	).

/****************************************************************************
  compile_truthvalue(+Form,+Op,-OidCode,-Code,-Status)
  Compiles true{...}, false{...}, unknown{...}
****************************************************************************/
compile_truthvalue(Formula,Op,Code,Status) :-
	atomobj_struct(Op,OpCode),
	compile_body(Formula,FCode,Status),
	(Status == []
	-> truthvalue_struct(FCode,OpCode,Code)
	; true
	).



/****************************************************************************
  compile_prologliblit(+ParserTerm,-OidCode,-Code,-Status)

  Compiles Prolog library call @_prolog
****************************************************************************/
compile_prologliblit(ParserTerm,OidCode,Code,Status) :-
	( is_flterm(ParserTerm,Funct,N,Args) ->
	    compile_prlgterm(Funct,N,Args,TCode,OidCode,ACode,Status),
	    (Status == [] -> conjunct_code([ACode,TCode],Code); true)
	;
	    atomobj_struct(ParserTerm,FObj),
	    N=0,
	    prologterm_struct(FObj,0,[],Code),
	    OidCode=NULL,
	    Status=[]
	),
	!.


/****************************************************************************
  compile_prologliblit(+ParserTerm,+Module,-OidCode,-Code,-Status)

  Compiles Prolog library call @_prolog(module)
****************************************************************************/
compile_prologliblit(ParserTerm,Module,OidCode,Code,Status) :-
	( is_flterm(ParserTerm,Funct,N,Args) ->
	    is_flatom(Funct,FAtom),
	    compile_prlgterm(Funct,N,Args,TCode,OidCode,ACode,Status)
	;
	    is_flatom(ParserTerm,FAtom),
	    atomobj_struct(ParserTerm,FObj),
	    N=0,
	    prologterm_struct(FObj,0,[],TCode),
	    ACode=NULL,
	    OidCode=NULL,
	    Status=[]
	),
	( Status == [] ->
	    %% build a special structure for the coder
	    prologliblit_struct(TCode,PCode),
	    conjunct_code([ACode,PCode],Code),
	    %% generate an import statement for the corresponding XSB predicate
	    is_flatom(Module,MName),
	    import_struct(FAtom,N,MName,ICode),
	    directive_struct(ICode,DCode),
	    report_directive(DCode)
	;
	  true
	),
	!.


/****************************************************************************
  compile_prologallliblit(+ParserTerm,-OidCode,-Code,-Status)

  Compiles Prolog library call @_prologall
****************************************************************************/
compile_prologallliblit(ParserTerm,OidCode,Code,Status) :-
	compile_prologliblit(ParserTerm,OidCode,PrelimCode,Status),
	( % here PrelimCode is bound and we decompose it
	  conjunct_struct(ACode,PrelimTermCode,PrelimCode), !
	; PrelimCode = PrelimTermCode, ACode=NULL
	),
	%% Here PrelimTermCode is bound and we decompose it
	prologterm_struct(FunctCode,N,ArgsCode,PrelimTermCode),
	new_varobjlist(N,NewVarList),
	generate_convert_to_prolog_code(ArgsCode,NewVarList,ToPrologCode),
	prologterm_struct(FunctCode,N,NewVarList,TermCode),
	generate_convert_from_prolog_code(ArgsCode,NewVarList,FromPrologCode),
	conjunct_code([ACode,ToPrologCode,TermCode,FromPrologCode],Code).


/****************************************************************************
  compile_prologallliblit(+ParserTerm,+Module,-OidCode,-Code,-Status)

  Compiles Prolog library call @_prologall(module)
****************************************************************************/
compile_prologallliblit(ParserTerm,Module,OidCode,Code,Status) :-
	compile_prologliblit(ParserTerm,Module,OidCode,PrelimCode,Status),
	( % here PrelimCode is bound and we decompose it
	  conjunct_struct(ACode,PrelimTermLitCode,PrelimCode), !
	; PrelimCode = PrelimTermLitCode, ACode=NULL
	),
	%% PrelimTermLitCode is bound and we decompose it
	prologliblit_struct(PrelimTermCode,PrelimTermLitCode),
	%% PrelimTermCode is bound and we decompose it
	prologterm_struct(FunctCode,N,ArgsCode,PrelimTermCode),
	new_varobjlist(N,NewVarList),
	generate_convert_to_prolog_code(ArgsCode,NewVarList,ToPrologCode),
	prologterm_struct(FunctCode,N,NewVarList,TermCode),
	prologliblit_struct(TermCode,TermLitCode),
	generate_convert_from_prolog_code(ArgsCode,NewVarList,FromPrologCode),
	conjunct_code([ACode,ToPrologCode,TermLitCode,FromPrologCode],Code).


/****************************************************************************
  compile_prologlibobj(+ParserTerm,-Object,-OidCode,-Code,-Status)

  Compiles Prolog library call @_prolog in the arguments position
  E.g., f(member(X,[a])@_prolog)
  This feature might be useful for meta-programming.  
****************************************************************************/
compile_prologlibobj(ParserTerm,Object,OidCode,Code,Status) :-
	( is_flterm(ParserTerm,Funct,N,Args) ->
	    compile_prlgterm(Funct,N,Args,Object,OidCode,Code,Status)
	;
	    atomobj_struct(ParserTerm,FObj),
	    N=0,
	    prologterm_struct(FObj,0,[],Object),
	    Code=NULL,
	    OidCode=NULL,
	    Status=[]
	),
	!.


/****************************************************************************
  compile_prologlibobj(+ParserTerm,+Module,-Object,-OidCode,-Code,-Status)

  Compiles Prolog library call @_prolog(module) in the arguments position
****************************************************************************/
compile_prologlibobj(ParserTerm,Module,Object,OidCode,Code,Status) :-
	( is_flterm(ParserTerm,Funct,N,Args) ->
	    is_flatom(Funct,FAtom),
	    compile_prlgterm(Funct,N,Args,Object,OidCode,Code,Status)
	;
	    is_flatom(ParserTerm,FAtom),
	    atomobj_struct(ParserTerm,FObj),
	    N=0,
	    prologterm_struct(FObj,0,[],Object),
	    Code=NULL,
	    OidCode=NULL,
	    Status=[]
	),
	!,
	( Status == [] ->
	    %% generate an import statement for the corresponding XSB predicate
	    is_flatom(Module,MName),
	    import_struct(FAtom,N,MName,ICode),
	    directive_struct(ICode,DCode),
	    report_directive(DCode)
	;
	  true
	),
	!.


/****************************************************************************
  compile_prologalllibobj(+ParserTerm,-Object,-OidCode,-Code,-Status)

  Compiles @_prologall in argument position, e.g., foo(f(...)@_prologall
***************************************************************************/
compile_prologalllibobj(ParserTerm,Object,OidCode,Code,Status) :-
	compile_prologlibobj(ParserTerm,PrelimObject,PrelimOidCode,PrelimCode,Status),
	%% PrelimObject is bound and we decompose it
	prologterm_struct(FunctCode,N,ArgsCode,PrelimObject),
	new_varobjlist(N,NewVarList),
	generate_convert_to_prolog_code(ArgsCode,NewVarList,ToPrologCode),
	prologterm_struct(FunctCode,N,NewVarList,Object),
	generate_convert_from_prolog_code(ArgsCode,NewVarList,FromPrologCode),
	conjunct_code([ToPrologCode,PrelimOidCode],OidCode),
	conjunct_code([FromPrologCode,PrelimCode],Code).

/****************************************************************************
  compile_prologalllibobj(+ParserTerm,+Module,-Object,-OidCode,-Code,-Status)

  Compiles @_prologall(module) in argument position,
  e.g., foo(f(...)@_prologall(module)
***************************************************************************/
compile_prologalllibobj(ParserTerm,Module,Object,OidCode,Code,Status) :-
	compile_prologlibobj(ParserTerm,Module,PrelimObject,PrelimOidCode,PrelimCode,Status),
	%% PrelimObject is bound and we decompose it
	prologterm_struct(FunctCode,N,ArgsCode,PrelimObject),
	new_varobjlist(N,NewVarList),
	generate_convert_to_prolog_code(ArgsCode,NewVarList,ToPrologCode),
	prologterm_struct(FunctCode,N,NewVarList,Object),
	generate_convert_from_prolog_code(ArgsCode,NewVarList,FromPrologCode),
	conjunct_code([ToPrologCode,PrelimOidCode],OidCode),
	conjunct_code([PrelimCode,FromPrologCode],Code).


/****************************************************************************
  compile_prlgterm(+FunctTerm,+Arity,+ArgList,-Object,-OidCode,-Code,-Status)
  compile_prlgterm(+FunctTerm,+Arity,+ArgList,+PrlgModule,-Object,-OidCode,-Code,-Status)
****************************************************************************/
compile_prlgterm(Funct,N,Args,Object,OidCode,Code,Status) :-
	atomobj_struct(Funct,FObj),
	prologterm_struct(FObj,N,AObj,Object),
	compile_pathexplist(Args,AObj,OidCode,Code,Status),
	!.

/*
%% Uncomment when XSB fully supports the foo:bar notation in assert/retract
compile_prlgterm(Funct,N,Args,Module,Object,OidCode,Code,Status) :-
	atomobj_struct(Funct,FObj),
	atomobj_struct(Module,ModuleCode),
	prologterm_struct(FObj,N,AObj,ModuleCode,Object),
	compile_pathexplist(Args,AObj,OidCode,Code,Status),
	!.
*/


/*************************************************************************
   generate_convert_to_prolog_code(+AObjList,+VarList,-Code)
*************************************************************************/ 
generate_convert_to_prolog_code([],_,NULL).

generate_convert_to_prolog_code([AObjH|AObjT],[VarH|VarT],Code) :-
	atomobj_struct(P2H_PREDICATE,FlP2H),
	%% P2H_DONOT_UNIFY_VARS - do not unify when both arguments are vars
	prologterm_struct(FlP2H,4,[VarH,AObjH,WRAP_HILOG,P2H_DONOT_UNIFY_VARS],CodeH),
	generate_convert_to_prolog_code(AObjT,VarT,CodeT),
	conjunct_code([CodeH,CodeT],Code).

/*************************************************************************
   generate_convert_from_prolog_code(+AObjList,+VarList,-Code)
*************************************************************************/ 
generate_convert_from_prolog_code([],_,NULL).

generate_convert_from_prolog_code([AObjH|AObjT],[VarH|VarT],Code) :-
	atomobj_struct(P2H_PREDICATE,FlP2H),
	%% P2H_UNIFY_VARS - unify when both arguments are vars
	prologterm_struct(FlP2H,4,[VarH,AObjH,WRAP_HILOG,P2H_UNIFY_VARS],CodeH),
	generate_convert_from_prolog_code(AObjT,VarT,CodeT),
	conjunct_code([CodeH,CodeT],Code).
		

/****************************************************************************
  compile_head_wspathexp(+ParserTerm,+Workspace,-Object,-Code,-H2BCodeHead,-H2BCodeTail,-Status)

  This procedure is called from compile_head_pathexp/6 and
  compile_head_wsflpathexp/7 when a workspace is explicitly specified.
****************************************************************************/
compile_head_wspathexp(ParserTerm,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status) :- 
	( atomlit_struct(HEADLITERAL,ParserTerm,A) ->
	    workspaceobj_struct(A,WS,Object,Code),
	    H2BCodeHead=NULL,
	    H2BCodeTail=NULL,
	    Status=[]

	; transactionalatomlit_struct(HEADLITERAL,ParserTerm,A) ->
	    workspaceobj_struct(A,WS,Object,Code),
	    H2BCodeHead=NULL,
	    H2BCodeTail=NULL,
	    Status=[]

	; is_flterm(ParserTerm,Funct,N,Args) ->
	    compile_head_wstermobj(Funct,N,Args,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_fltransactionalterm(ParserTerm,Funct,N,Args) ->
	    compile_head_wstransactionaltermobj(Funct,N,Args,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_flbirelate(ParserTerm,ObjTerm1,RelType,ObjTerm2) ->
	    compile_head_wsflbirelate(ObjTerm1,RelType,ObjTerm2,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_flobjspec(ParserTerm,ObjTerm,Spec) ->
	    compile_head_wsflobjspec(ObjTerm,Spec,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status)
	;
	  is_flobjref(ParserTerm,ObjTerm,RefType,AttTerm),
	  compile_head_wsflobjref(ObjTerm,RefType,AttTerm,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_flurisq(ParserTerm,_P,_L) ->
	    urisqobj_struct(ParserTerm,UrisqCode),
	    workspaceobj_struct(UrisqCode,WS,Object,Code),
	    H2BCodeHead=NULL,
	    H2BCodeTail=NULL,
	    Status = []
 	
	).


/****************************************************************************
  compile_head_floraliblit(+ParserTerm,+Workspace,-Code,-H2BCodeHead,-H2BCodeTail,-Status)

  This procedure compiles a head literal associated with a Flora system
  module specification.
****************************************************************************/
compile_head_floraliblit(ParserTerm,WS,Code,H2BCodeHead,H2BCodeTail,Status) :-
	%% Flora system modules are like normal user modules except that
	%% users cannot load files into them
	is_flatom(WS,WSName,Index),
	report_option(FLSYSMOD(WSName),Index),
	atomobj_struct(WSName,Index,WSNameCode),
	floralib_struct(WSNameCode,WSCode),
	compile_head_wsliteral(ParserTerm,WSCode,Code,H2BCodeHead,H2BCodeTail,Status).


/****************************************************************************
  compile_head_wsliteral(+ParserTerm,+Workspace,-Code,-H2BCodeHead,-H2BCodeTail,-Status)

  H2BCodeHead - code passed from head to body, which is supposed to be
                prepended to the code of the body
  H2BCodeTail - code passed from head to body, which is supposed to be
                appended to the code of the body
****************************************************************************/
compile_head_wsliteral(ParserTerm,WS,Code,H2BCodeHead,H2BCodeTail,Status) :-
	( is_flterm(ParserTerm,Funct,N,Args) ->
	    compile_head_wstermlit(Funct,N,Args,WS,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_fltransactionalterm(ParserTerm,Funct,N,Args) ->
	    compile_head_wstransactionaltermlit(Funct,N,Args,WS,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_flbirelate(ParserTerm,ObjTerm1,RelType,ObjTerm2) ->
	    compile_head_wsflbirelate(ObjTerm1,RelType,ObjTerm2,WS,_Obj,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_flobjspec(ParserTerm,ObjTerm,Spec) ->
	    compile_head_wsflobjspec(ObjTerm,Spec,WS,_Obj,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_flobjeql(ParserTerm,O1,O2) ->
	    compile_head_wsflobjeql(O1,O2,WS,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_flneg(ParserTerm,PosPart,Idx) ->
	    compile_head_wsflneg(PosPart,WS,Idx,Code,H2BCodeHead,H2BCodeTail,Status)

        ; is_flvar(ParserTerm,VarName,Index) ->
	    %% Is this possible? Should be taken care by the libmodlit code
	    attach_workspace(WS,
			     compile_flvar(VarName,Index,VarCode),
			     VarCode,Code),
	    H2BCodeHead=NULL,
	    H2BCodeTail=NULL,
            Status=[]

        ; is_fltransactionalvar(ParserTerm,VarName,Index) ->
	    %% Is this possible? Should be taken care by the libmodlit code
	    attach_workspace(WS,
			     compile_fltransactionalvar(VarName,Index,VarCode),
			     VarCode,Code),
	    H2BCodeHead=NULL,
	    H2BCodeTail=NULL,
            Status=[]
	;
	    attach_workspace(WS,
			     atomlit_struct(HEADLITERAL,ParserTerm,ACode),
			     ACode,Code),
	    H2BCodeHead=NULL,
	    H2BCodeTail=NULL,
	  Status=[]
	;
	    attach_workspace(WS,
			     transactionalatomlit_struct(HEADLITERAL,ParserTerm,ACode),
			     ACode,Code),
	    H2BCodeHead=NULL,
	    H2BCodeTail=NULL,
	  Status=[]
	).


/****************************************************************************
  compile_head_wsflpathexplist(+ParserTermList,+WS,-ObjectList,-Code,-H2BCodeHead,-H2BCodeTail,-Status)
****************************************************************************/
compile_head_wsflpathexplist([],_WS,[],NULL,NULL,NULL,[]) :- !.

compile_head_wsflpathexplist([T|L],WS,[TObj|LObj],Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_wsflpathexp(T,WS,TObj,TCode,TH2BCodeHead,TH2BCodeTail,S),
	( S == [] ->
	    compile_head_wsflpathexplist(L,WS,LObj,LCode,LH2BCodeHead,LH2BCodeTail,Status),
	    (Status == [] ->
		    conjunct_struct(TCode,LCode,Code),
		    conjunct_code([TH2BCodeHead,LH2BCodeHead],H2BCodeHead),
		    conjunct_code([TH2BCodeTail,LH2BCodeTail],H2BCodeTail)
	     ; true)
	;
	  Status=S
        ).


/****************************************************************************
  compile_head_wsflpathexp(+ParserTerm,+WS,-Object,-Code,-H2BCodeHead,-H2BCodeTail,-Status)

  Note: The difference between compile_head_wsflpathexp and
        compile_head_wspathexp is that compile_head_wsflpathexp
	applies workspace only to F-Logic constructs.
****************************************************************************/
compile_head_wsflpathexp(ParserTerm,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status) :- 
	( is_flbirelate(ParserTerm,OT1,RelType,OT2) ->
	    compile_head_wsflbirelate(OT1,RelType,OT2,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_flobjspec(ParserTerm,ObjTerm,Spec) ->
	    compile_head_wsflobjspec(ObjTerm,Spec,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_flobjref(ParserTerm,ObjTerm,RefType,AttTerm) ->
	    compile_head_wsflobjref(ObjTerm,RefType,AttTerm,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_flterm(ParserTerm,Funct,N,Args) ->
	    compile_head_wsfltermobj(Funct,N,Args,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_fllist(ParserTerm,L,T,I) ->
	    compile_head_wsfllist(L,T,I,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status)

	; is_flworkspace(ParserTerm,P,NestedWS) ->
	    compile_head_wspathexp(P,NestedWS,Object,Code,H2BCodeHead,H2BCodeTail,Status)
	;
	  compile_head_pathexp(ParserTerm,Object,Code,H2BCodeHead,H2BCodeTail,Status)
        ).


/****************************************************************************
  compile_head_wstermobj(+FunctorTerm,+Arity,+ArgList,+WS,-Object,-Code,-H2BCodeHead,-H2BCodeTail,-Status)
****************************************************************************/
compile_head_wstermobj(_Funct,_N,_Args,WS,_Object,_Code,_H2BCodeHead,_H2BCodeTail,Status) :-
	is_flvar(WS,_Name,VarIndex),
	!,
	%% Workspace in the rule head is not bound at compile time. Currently
	%% this will generate an error. However, this might be solved by moving
	%% the code that generates the workspace predicate to the body
	%% of the rule.
	compiling_error(VarIndex,VARWSINHEAD,Status).

compile_head_wstermobj(Funct,N,Args,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_wsflpathexplist([Funct|Args],WS,[FObj|AObj],Code,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    termlit_struct(HEADLITERAL,FObj,N,AObj,O),
	    %% WCode should be NULL here since it is already checked by the rule
	    %% that the workspace is not a variable.
	    workspaceobj_struct(O,WS,Object,_WCodeIsNULL)
	;
	  true
        ).

compile_head_wstransactionaltermobj(Funct,N,Args,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_wsflpathexplist([Funct|Args],WS,[FObj|AObj],Code,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    transactionaltermlit_struct(HEADLITERAL,FObj,N,AObj,O),
	    %% WCode should be NULL here since it is already checked by the rule
	    %% that the workspace is not a variable.
	    workspaceobj_struct(O,WS,Object,_WCodeIsNULL)
	;
	  true
        ).


/****************************************************************************
  compile_head_wsfltermobj(+FunctorTerm,+Arity,+ArgList,+WS,-Object,-Code,-H2BCodeHead,-H2BCodeTail,-Status)

  Note: The difference between compile_head_wsflpathexp
        and compile_head_wspathexp
        is that compile_head_wsflpathexp applies workspace only to F-Logic
        constructs.
****************************************************************************/
compile_head_wsfltermobj(Funct,N,Args,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_wsflpathexplist([Funct|Args],WS,[FObj|AObj],Code,H2BCodeHead,H2BCodeTail,Status),
	(Status == [] -> termobj_struct(FObj,N,AObj,Object); true).


/****************************************************************************
  compile_head_wstermlit(+FunctorTerm,+Arity,+ArgList,+WS,-Code,-H2BCodeHead,-H2BCodeTail,-Status)
****************************************************************************/
compile_head_wstermlit(Funct,N,Args,WS,Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_wsflpathexplist([Funct|Args],WS,[FObj|AObj],ObjCode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     termlit_struct(HEADLITERAL,FObj,N,AObj,TObj),
			     TObj,WSTObj),
	    conjunct_struct(ObjCode,WSTObj,Code)
	;
	  true
        ).

compile_head_wstransactionaltermlit(Funct,N,Args,WS,Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_wsflpathexplist([Funct|Args],WS,[FObj|AObj],ObjCode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     transactionaltermlit_struct(HEADLITERAL,FObj,N,AObj,TObj),
			     TObj,WSTObj),
	    conjunct_struct(ObjCode,WSTObj,Code)
	;
	  true
        ).



/****************************************************************************
  compile_head_wsfllist(+ObjTermList,+ObjTerm,+Index,+WS,-Object,-Code,-H2BCodeHead,-H2BCodeTail,-Status)
****************************************************************************/
compile_head_wsfllist(ObjTermList,ObjTerm,Index,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_wsflpathexplist(ObjTermList,WS,ObjList,ObjListCode,ObjListH2BCodeHead,ObjListH2BCodeTail,S),
	( S == [] ->
	    ( ObjTerm == [] ->
		Obj=[],
		ObjCode=NULL,
		ObjH2BCodeHead=NULL,
		ObjH2BCodeTail=NULL,
		Status=[]
	    ;
	      compile_head_wsflpathexp(ObjTerm,WS,Obj,ObjCode,ObjH2BCodeHead,ObjH2BCodeTail,Status)
	    ),
	    ( Status == [] ->
		list_struct(ObjList,Obj,Index,Object),
		conjunct_struct(ObjListCode,ObjCode,Code),
		conjunct_code([ObjListH2BCodeHead,ObjH2BCodeHead],H2BCodeHead),
		conjunct_code([ObjListH2BCodeTail,ObjH2BCodeTail],H2BCodeTail)
	    ;
	      true
	    )
	;
	  Status=S
        ).


/****************************************************************************
  compile_head_wsflobjref(+ObjT,+RefType,+AttT,+WS,-Object,-Code,-H2BCodeHead,-H2BCodeTail,-Status)
****************************************************************************/
compile_head_wsflobjref(ObjTerm,RefType,AttTerm,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_wsflpathexplist([ObjTerm,AttTerm],WS,[Obj,Att],OACode,OAH2BCodeHead,OAH2BCodeTail,Status),
	( Status == [] ->
	    %% Approximate the textual information for the new variable.
	    approximate_index(AttTerm,Index),
	    attach_workspace(WS,
			     head_objref_struct(Obj,RefType,Att,Index,Object,TCode),
			     TCode,WTCode),
	    OAH2BCodeHead = H2BCodeHead,
	    conjunct_code([OAH2BCodeTail,WTCode],H2BCodeTail),
	    Code = OACode
	;
	  true
        ).


/****************************************************************************
  compile_head_wsflbirelate(+OT1,+RelType,+OT2,+WS,-Object,-Code,-H2BCodeHead,-H2BCodeTail,-Status)
****************************************************************************/
compile_head_wsflbirelate(ObjTerm1,RelType,ObjTerm2,WS,Obj1,Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_wsflpathexplist([ObjTerm1,ObjTerm2],WS,[Obj1,Obj2],OCode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     birelate_struct(HEADLITERAL,Obj1,RelType,Obj2,TCode),
			     TCode,WTCode),
	    conjunct_struct(OCode,WTCode,Code)
	;
	  true
        ).


/****************************************************************************
  compile_head_wsflobjspec(+ObjTerm,+SpecBody,+WS,-Object,-Code,-H2BCodeHead,-H2BCodeTail,-Status)
****************************************************************************/
compile_head_wsflobjspec(ObjTerm,SpecBody,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status) :-
	( SpecBody == [] ->
	    ( is_flobjref(ObjTerm,OTerm,RefType,ATerm) ->
		compile_head_wsflobjref(OTerm,RefType,ATerm,WS,Object,Code,H2BCodeHead,H2BCodeTail,Status)
	    ;
	      compile_head_wsflpathexp(ObjTerm,WS,Object,ObjCode,H2BCodeHead,H2BCodeTail,Status),
	      ( Status == [] ->
		  attach_workspace(WS,
				   objexists_struct(HEADLITERAL,Object,ECode),
				   ECode,WSECode),
		  conjunct_struct(ObjCode,WSECode,Code)
	      ;
	        true
	      )
	    )
	;
	  compile_head_wsflpathexp(ObjTerm,WS,Object,ObjCode,ObjH2BCodeHead,ObjH2BCodeTail,S),
	  ( S == [] ->
	      compile_head_wsflspecbody(Object,SpecBody,WS,SCode,SH2BCodeHead,SH2BCodeTail,Status),
	      (Status == [] ->
		      conjunct_struct(ObjCode,SCode,Code),
	              conjunct_code([ObjH2BCodeHead,SH2BCodeHead],H2BCodeHead),
	              conjunct_code([ObjH2BCodeTail,SH2BCodeTail],H2BCodeTail)
	       ; true)
	  ;
	    Status=S
	  )
        ).


/****************************************************************************
  compile_head_wsflspecbody(+Object,+SpecTerm,+WS,-Code,-H2BCodeHead,-H2BCodeTail,-Status)
  compile_head_wsmvdattspec(+Object,+AttObj,+RefType,+VL,+WS,-Code,-H2BCodeHead,-H2BCodeTail,-Status)
****************************************************************************/
compile_head_wsflspecbody(Object,SpecTerm,WS,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_flconjunct(SpecTerm,L,R),
	!,
	compile_head_wsflspecbody(Object,L,WS,LCode,LH2BCodeHead,LH2BCodeTail,S),
	( S == [] ->
	    compile_head_wsflspecbody(Object,R,WS,RCode,RH2BCodeHead,RH2BCodeTail,Status),
	    (Status == [] ->
		    conjunct_struct(LCode,RCode,Code),
		    conjunct_code([LH2BCodeHead,RH2BCodeHead],H2BCodeHead),
		    conjunct_code([LH2BCodeTail,RH2BCodeTail],H2BCodeTail)
	     ; true)
	;
	  Status=S
        ).

compile_head_wsflspecbody(Object,SpecTerm,WS,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_flmvdattspec(SpecTerm,AttTerm,RefType,VL),
	!,
	compile_head_wsflpathexp(AttTerm,WS,AObj,ACode,AH2BCodeHead,AH2BCodeTail,S),
	( S == [] ->
	    ( VL == [] ->
		attach_workspace(WS,
				 mvdattdef_struct(HEADLITERAL,Object,AObj,RefType,SCode),
				 SCode,WSSCode),
		conjunct_struct(ACode,WSSCode,Code),
		H2BCodeHead=AH2BCodeHead,
		H2BCodeTail=AH2BCodeTail,
		Status=[]
	    ;
	      compile_head_wsmvdattspec(Object,AObj,RefType,VL,WS,VCode,VH2BCodeHead,VH2BCodeTail,Status),
	      (Status == []
	          ->  conjunct_struct(ACode,VCode,Code),
		      conjunct_code([AH2BCodeHead,VH2BCodeHead],H2BCodeHead),
		      conjunct_code([AH2BCodeTail,VH2BCodeTail],H2BCodeTail)
	       
	      ; true
	      )
	    )
        ;
	  Status=S
        ).

compile_head_wsflspecbody(Object,SpecTerm,WS,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_flmethspec(SpecTerm,MethTerm),
	!,
	compile_head_wsflpathexp(MethTerm,WS,MethObj,MCode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     methspec_struct(HEADLITERAL,Object,MethObj,SCode),
			     SCode,WSSCode),
	    conjunct_struct(MCode,WSSCode,Code)
	;
	  true
        ).

compile_head_wsflspecbody(Object,SpecTerm,WS,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_flimethspec(SpecTerm,IMethTerm),
	!,
	compile_head_wsflpathexp(IMethTerm,WS,IMethObj,IMCode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     imethspec_struct(HEADLITERAL,Object,IMethObj,SCode),
			     SCode,WSSCode),
	    conjunct_struct(IMCode,WSSCode,Code)
	;
	  true
        ).

compile_head_wsflspecbody(Object,SpecTerm,WS,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_fltranspec(SpecTerm,TranTerm),
	!,
	compile_head_wsflpathexp(TranTerm,WS,TranObj,TCode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     transpec_struct(HEADLITERAL,Object,TranObj,SCode),
			     SCode,WSSCode),
	    conjunct_struct(TCode,WSSCode,Code)
	;
	  true
        ).


%% signatures: =>, *=>, etc.
compile_head_wsflspecbody(Object,SpecTerm,WS,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_flsigattspec(SpecTerm,AttTerm,RefType,ValTerm),
	!,
	compile_head_wsflpathexp(AttTerm,WS,AttObj,ACode,AH2BCodeHead,AH2BCodeTail,S),
	(S == [] ->
	    (is_flemptyterm(ValTerm) ->
		%% This is SIGDEF: occurs when we have a[b=> ()]
		attach_workspace(WS,
				 sigattdef_struct(HEADLITERAL,Object,AttObj,RefType,SCode),
				 SCode,WSSCode),
		conjunct_struct(ACode,WSSCode,Code),
		H2BCodeHead=AH2BCodeHead,
		H2BCodeTail=AH2BCodeTail,
		Status=[]
	    ;
		compile_head_wsflpathexp(ValTerm,WS,ValObj,VCode,VH2BCodeHead,VH2BCodeTail,Status),
		( Status == [] ->
		    attach_workspace(WS,
				     sigattspec_struct(HEADLITERAL,Object,AttObj,RefType,ValObj,SCode),
				     SCode,WSSCode),
		    conjunct_code([ACode,VCode,WSSCode],Code),
		    conjunct_code([AH2BCodeHead,VH2BCodeHead],H2BCodeHead),
		    conjunct_code([AH2BCodeTail,VH2BCodeTail],H2BCodeTail)
		;
		    true
		)
	    )
	;
	    Status = S
        ).

compile_head_wsflspecbody(Object,SpecTerm,WS,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_flsigattconspec(SpecTerm,AttTerm,ConstrTerm,RefType,ValTerm),
	!,
	compile_head_wsflpathexp(AttTerm,WS,AttObj,ACode,AH2BCodeHead,AH2BCodeTail,S),
	(S == [] ->
	    (is_flemptyterm(ValTerm) ->
		%% This is SIGDEF: occurs when we have a[b=> ()]
		attach_workspace(WS,
				 sigattdef_struct(HEADLITERAL,Object,AttObj,RefType,SCode),
				 SCode,WSSCode),
		conjunct_struct(ACode,WSSCode,Code),
		H2BCodeHead = AH2BCodeHead,
		H2BCodeTail = AH2BCodeTail,
		Status=[]
	    ;
		is_flsigconstr(ConstrTerm,Lower,Upper),
		compile_head_wsflpathexplist([Lower,Upper],WS,[OLower,OUpper],CCode,CH2BCodeHead,CH2BCodeTail,S_C),
		(S_C == [] ->
		    compile_head_wsflpathexp(ValTerm,WS,ValObj,VCode,VH2BCodeHead,VH2BCodeTail,Status),
		    ( Status == [] ->
			attach_workspace(WS,
				     sigattspec_struct(HEADLITERAL,Object,AttObj,RefType,ValObj,SCode),
				     SCode,WSSCode),
			attach_workspace(WS,
				     sigattcondef_struct(HEADLITERAL,Object,AttObj,OLower,OUpper,RefType,CSCode),
				     CSCode,CWSSCode),
			conjunct_code([ACode,CCode,VCode,WSSCode,CWSSCode],Code),
			conjunct_code([AH2BCodeHead,CH2BCodeHead,VH2BCodeHead],H2BCodeHead),
			conjunct_code([AH2BCodeTail,CH2BCodeTail,VH2BCodeTail],H2BCodeTail)
		    ;
			true
		    )
		;
		    Status = S_C
		)
	    )
	;
	    Status = S
        ).


%% boolean signatures: =>.
compile_head_wsflspecbody(Object,SpecTerm,WS,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_flboolsig(SpecTerm,AttTerm,_RefType),
	!,
	compile_head_wsflpathexp(AttTerm,WS,AttObj,ACode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     boolsig_struct(HEADLITERAL,Object,AttObj,SCode),
			     SCode,WSCode),
	    conjunct_struct(ACode,WSCode,Code)
	;
	    true
	).

%% boolean signatures: *=>.
compile_head_wsflspecbody(Object,SpecTerm,WS,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_fliboolsig(SpecTerm,AttTerm,_RefType),
	!,
	compile_head_wsflpathexp(AttTerm,WS,AttObj,ACode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     iboolsig_struct(HEADLITERAL,Object,AttObj,SCode),
			     SCode,WSCode),
	    conjunct_struct(ACode,WSCode,Code)
	;
	    true
	).

%% boolean signatures: =>% for transactional method
compile_head_wsflspecbody(Object,SpecTerm,WS,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_fltransig(SpecTerm,AttTerm,_RefType),
	!,
	compile_head_wsflpathexp(AttTerm,WS,AttObj,ACode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     transig_struct(HEADLITERAL,Object,AttObj,SCode),
			     SCode,WSCode),
	    conjunct_struct(ACode,WSCode,Code)
	;
	    true
	).

%% boolean signatures: *=>% for transactional method
compile_head_wsflspecbody(Object,SpecTerm,WS,Code,H2BCodeHead,H2BCodeTail,Status) :-
	is_flitransig(SpecTerm,AttTerm,_RefType),
	!,
	compile_head_wsflpathexp(AttTerm,WS,AttObj,ACode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     itransig_struct(HEADLITERAL,Object,AttObj,SCode),
			     SCode,WSCode),
	    conjunct_struct(ACode,WSCode,Code)
	;
	    true
	).

compile_head_wsmvdattspec(_Object,_AttObj,_RefType,[],_WS,NULL,NULL,NULL,[]) :- !.

compile_head_wsmvdattspec(Object,AttObj,RefType,[T|L],WS,Code,H2BCodeHead,H2BCodeTail,Status) :-
	!,
	compile_head_wsflpathexp(T,WS,TObj,TCode,TH2BCodeHead,TH2BCodeTail,S),
	( S == [] ->
	    attach_workspace(WS,
			     mvdattspec_struct(HEADLITERAL,Object,AttObj,RefType,TObj,SCode),
			     SCode,WSSCode),
	    conjunct_struct(TCode,WSSCode,TSCode),
	    compile_head_wsmvdattspec(Object,AttObj,RefType,L,WS,LCode,LH2BCodeHead,LH2BCodeTail,Status),
	    (Status == [] ->
		    conjunct_struct(TSCode,LCode,Code),
		    conjunct_code([TH2BCodeHead,LH2BCodeHead],H2BCodeHead),
		    conjunct_code([TH2BCodeTail,LH2BCodeTail],H2BCodeTail)
	     ; true)
	;
	  Status=S
        ).


/****************************************************************************
  compile_head_wsflobjeql(+Obj1,+Obj2,+Workspace,-Code,-H2BCodeHead,-H2BCodeTail,-Status)

  H2BCodeHead - code passed from head to body, which is supposed to be
                prepended to the code of the body
  H2BCodeTail - code passed from head to body, which is supposed to be
                appended to the code of the body
****************************************************************************/
compile_head_wsflobjeql(Obj1,Obj2,WS,Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_wsflpathexplist([Obj1,Obj2],WS,[O1,O2],OCode,H2BCodeHead,H2BCodeTail,Status),
	( Status == [] ->
	    attach_workspace(WS,
			     objeql_struct(HEADLITERAL,O1,O2,OECode),
			     OECode,WSCode),
	    conjunct_struct(OCode,WSCode,Code)
	;
	  true
	).

/****************************************************************************
  compile_head_wsflneg(+PosPart,+WS,+Idx,-Code,-H2BCodeHead,-H2BCodeTail,-Status)

  H2BCodeHead - code passed from head to body, which is supposed to be
                prepended to the code of the body
  H2BCodeTail - code passed from head to body, which is supposed to be
                appended to the tail of the code of the body
****************************************************************************/
compile_head_wsflneg(PosPart,WS,Idx,Code,H2BCodeHead,H2BCodeTail,Status) :-
	compile_head_wsliteral(PosPart,WS,PosCode,H2BCodeHead,H2BCodeTail,S),
	( S == [] ->
	    attach_workspace(WS,
			     head_neg_struct(PosCode,Idx,NegCode,Status),
			     NegCode,Code)
	; Status = S
	).

/****************************************************************************
  compile_flinsert(+Op,+List,+Cond,-Code,-Status)
****************************************************************************/
compile_flinsert(Op,List,Cond,Code,Status) :-
	compile_flinsert_literals(List,CodeList,S),
	( S == [] ->
	    compile_body(Cond,CondCode,Status),
	    ( Status == [] ->
		list_struct(CodeList,[],ListCode),
		insert_struct(Op,ListCode,CondCode,Code)
	    ;
	      true
	    )
	;
	  Status=S
        ).


/****************************************************************************
  compile_flinsert(+Op,+List,-Code,Status)
****************************************************************************/
compile_flinsert(Op,List,Code,Status) :-
	compile_flinsert_literals(List,CodeList,Status),
	( Status == [] ->
	    list_struct(CodeList,[],ListCode),
	    insert_struct(Op,ListCode,Code)
	;
	  true
        ).


/****************************************************************************
  compile_flinsert_literals(+List,-DBCodeList,-Status)
****************************************************************************/
compile_flinsert_literals(List,DBCodeList,Status) :-
	compile_flinsert_list(List,Code,Status),
	compile_conjunct2list(Code,CodeList),
	(Status == [] -> compile_dbupdate_list(CodeList,DBCodeList); true).


/****************************************************************************
  compile_flinsert_list(+List,-Code,-Status)

  Code is the conjunctions of atoms to be inserted.
****************************************************************************/
compile_flinsert_list([],NULL,[]) :- !.

compile_flinsert_list([H|T],Code,Status) :-
	is_flupdaterule(H,Op,List),
	!,
	is_flatom(Op,OpAtom,_Index),
	List = [R],
	compile_fldynrule(OpAtom,R,HCode,S),
	(S == [] ->
	    compile_flinsert_list(T,TCode,Status),
	    (Status == [] -> conjunct_struct(HCode,TCode,Code); true)
	;
	  Status=S
	).

compile_flinsert_list([H|T],Code,Status) :-
	%% regular fact. may have path expression inside
	compile_head_literal(H,HeadCode1,H2BCodeHead1,H2BCodeTail1,S),
	( S == [] ->
	    ( H2BCodeHead1==NULL, H2BCodeTail1==NULL
	    ->
		compile_flinsert_list(T,TCode,Status),
		(Status == []
		-> conjunct_struct(HeadCode1,TCode,Code)
		; true
		)
	    ;
		%% Head literal contains a path expr, so it becomes a rule.
		%% Treat it as a dynamically inserted rule.
		set_context(compile_with_var_module),
		set_context(compiling_dynrule),
		compile_head_literal(H,HeadCode,H2BCodeHead,H2BCodeTail,S),
		compile_conjunct2list(HeadCode,HCode),
		flora_new_varobj(NO_INDEX,HVL),
		flora_new_varobj(NO_INDEX,BVL),
		list_struct(HCode,[],HCL),
		conjunct_code([H2BCodeHead,H2BCodeTail],H2BCode),
		%% Since this rule came from a dynamic fact that contains
		%% a path expression, the label code is (NULL,NULL,NULL):
		%% there could not have been an explicit label.
		%% The third NULL is the defeasible condition to be
		%% attached to rule bodies.
		dynrule_struct(HCL,H2BCode,HVL,BVL,(NULL,NULL,NULL),HDynruleCode),
		collect_namevars(H,HeadVars),
		list_struct(HeadVars,[],HVLValue),
		report_dynrule_varlist(HVL,HVLValue),
		collect_namevars([],BodyVars),
		list_struct(BodyVars,[],BVLValue),
		report_dynrule_varlist(BVL,BVLValue),
		clear_context(compiling_dynrule),
		clear_context(compile_with_var_module),
		compile_flinsert_list(T,TCode,Status),
		(Status == [] ->
		    conjunct_struct(HDynruleCode,TCode,Code)
		; true)
	    )
	;
	    Status=S
	).


/****************************************************************************
  compile_fldelete(+Op,+List,+Cond,-Code,-Status)

  for delete operations with a condition.
****************************************************************************/
compile_fldelete(Op,List,Cond,Code,Status) :-
	compile_fldelete_literals(List,CodeList,S),
	( S == [] ->
	    compile_body(Cond,CondCode,Status),
	    ( Status == [] ->
		list_struct(CodeList,[],ListCode),
		delete_struct(Op,ListCode,CondCode,Code)
	    ;
	      true
	    )
	;
	  Status=S
        ).


/****************************************************************************
  compile_fldelete(+Op,+List,-Code,-Status)

  for delete operations without a condition.
****************************************************************************/
compile_fldelete(Op,List,Code,Status) :-
	compile_fldelete_literals(List,CodeList,Status),
	( Status == [] ->
	    list_struct(CodeList,[],ListCode),
	    delete_struct(Op,ListCode,Code)
	;
	  true
        ).


/****************************************************************************
  compile_fldelete_literals(+List,-DBCodeList,-Status)
****************************************************************************/
compile_fldelete_literals(List,DBCodeList,Status) :-
	compile_fldelete_list(List,CodeList,Status),
	(Status == [] -> compile_dbupdate_list(CodeList,DBCodeList); true).


/****************************************************************************
  compile_fldelete_list(+List,-CodeList,-Status)
****************************************************************************/
compile_fldelete_list([],[],[]) :- !.

compile_fldelete_list([H|T],CodeList,Status) :-
	%% When delete list contains an object equality definition, the compiler
	%% will prepare to load the basic equality trailer, unless it is
	%% overridden by an explicity directive.
	is_flobjeql(H,O1,O2),
	!,
	compile_flobjeql(O1,O2,OidCode,SpecCode,S),
	conjunct_code([OidCode,SpecCode],HCode),
	approximate_index(O1,Idx),
	report_option(FLOBJEQLDEF,Idx),
	( S == [] ->
	    compile_conjunct2list(HCode,HCodeList),
	    compile_fldelete_list(T,TCodeList,Status),
	    (Status == [] -> append(HCodeList,TCodeList,CodeList); true)
	;
	  Status=S
        ).

compile_fldelete_list([H|T],CodeList,Status) :-
	is_flupdaterule(H,Op,List),
	!,
	is_flatom(Op,OpAtom,_Index),
	List = [R],
	compile_fldynrule(OpAtom,R,HCode,S),
	(S == [] ->
	    compile_fldelete_list(T,TCodeList,Status),
	    (Status == [] -> CodeList = [HCode|TCodeList]; true)
	;
	  Status=S
	).

compile_fldelete_list([H|T],CodeList,Status) :-
	%% Call compile_body_literal because path expressions should be
	%% compiled into queries.
        set_context(compile_delete),
	compile_body_literal(H,HCode,S),
        clear_context(compile_delete),
	( S == [] ->
	    compile_conjunct2list(HCode,HCodeList),
	    compile_fldelete_list(T,TCodeList,Status),
	    (Status == [] -> append(HCodeList,TCodeList,CodeList); true)
	;
	  Status=S
        ).


/****************************************************************************
  compile_dbupdate_list(+CodeList,-DBCodeList)

  This predicate processes the list of literals in a DB update. For each
  literal, it tries to add the name of the storage trie for the module.

  Note: a DB update can only update a Flora user module or itself. If a
        Flora system module allows update, it must provide an update interface.
****************************************************************************/
compile_dbupdate_list([],[]) :- !.

compile_dbupdate_list([C|CL],[C|DBCodeList]) :-
	( is_varobj_struct(C)
        ; is_florasyslib_struct(C,_,_,_,_)
	),
	!,
	compile_dbupdate_list(CL,DBCodeList).

compile_dbupdate_list([C|CL],[DBCode|DBCodeList]) :-
	is_prdynrule(C,_Head,_Body,_HeadVars,_BodyVars,_Lab),
	!,
	%% Already compiled, don't tack on FLSYSDBUPDATE
	DBCode = C,
	compile_dbupdate_list(CL,DBCodeList).

compile_dbupdate_list([C|CL],[DBCode|DBCodeList]) :-
	( workspace_struct(_P,WS,C) ->
	    %% The name of the module is known.
	    storage_struct(WS,SCode)
	;
	    thisstorage_struct(fdb,SCode),
	    thismodule_struct(WS)
	),
	atomobj_struct(FLSYSDBUPDATE,FCode),
	prologterm_struct(FCode,3,[C,SCode,WS],DBCode),
	compile_dbupdate_list(CL,DBCodeList).

/****************************************************************************
  compile_flupdatetrule(+Op,+List,-Code,-Status)
****************************************************************************/
compile_flupdaterule(Op,List,Code,Status) :-
	is_flatom(Op,OpAtom,Index),
	compile_fldynrule_list(OpAtom,List,CodeList,Status),
	( Status == [] ->
	    list_struct(CodeList,[],ListCode),
	    updaterule_syslib(OpAtom,UpdateruleLib),
	    florasyslib_struct(Index,UpdateruleLib,1,[ListCode],Code)
	;
	    true
        ).

%% compile_fldynrule_list(+Op,+RuleList,-RuleListCode,-Status)
compile_fldynrule_list(_Op,[],[],[]) :- !.
compile_fldynrule_list(Op,[H|L],[HCode|LCode],Status) :-
	compile_fldynrule(Op,H,HCode,S),
	(S == [] -> compile_fldynrule_list(Op,L,LCode,Status)
	; S = Status
	).

%% compile single dynamic rule
%% compile_fldynrule(+Op,+R,-RCode,-Status)
compile_fldynrule(Op,R,RCode,Status) :-
	is_flruleworkspace(R,Rule,WS),
	!,
	workspaceterm_struct(WS,WSTerm),
	set_context(dynruleworkspace(WSTerm)),
	compile_fldynrule(Op,Rule,RCode,Status),
	clear_context(dynruleworkspace(_)).

compile_fldynrule(_Op,R,RCode,Status) :-
	is_flvar(R,Name,Index),
	varobj_struct(Name,Index,RCode),
	Status=[].

compile_fldynrule(Op,R,RCode,Status) :-
	is_fldynrule(R,Head,Body,Label),
        set_context(compile_with_var_module),
	set_context(compiling_dynrule),
	compile_head(Head,HeadCode,H2BCodeHead,H2BCodeTail,HS),
        flora_new_varobj(NO_INDEX,HVL),
	compile_conjunct2list(HeadCode,HeadCodeListPre),
	remove_empty_list(HeadCodeListPre,HeadCodeList),
	( HS == []
	->  compile_body(Body,BodyCode1,StatB),
	    (StatB==[]
	    ->  collect_datatype_var_terms([HeadCodeList,BodyCode1],DTVarsCode),
		append(DTVarsCode,[H2BCodeHead,BodyCode1,H2BCodeTail],BCodeList),
		conjunct_code(BCodeList,BodyCode),
	        list_struct(HeadCodeList,[],HCL),
                flora_new_varobj(NO_INDEX,BVL),
		compile_label(Label,LblCode,MetaCode,StatL),
		construct_defeasible_condition(LblCode,DefeatCondCode),
		(StatL == []
		-> (has_prtransactionallit(HeadCodeList,Idx), LblCode \= NULL
		   -> compiling_error(Idx,LABELED_TRANSACTION_NOT_ALLOWED,Err),
		       Status = [Err]
		   ;  Status = []
		   )
		; Status = StatL
		),
		( Status == []
		->
		    %% Note: If LblCode == NULL, a unique rule Id will be created
		    %% by flrcanon:flora_record_rule_signature at run time.
		    dynrule_struct(HCL,BodyCode,HVL,BVL,(LblCode,MetaCode,DefeatCondCode),RCode),
		    ( is_fldeleteruleop(Op)
		    ->  true
		    ;   collect_namevars(Head,HeadVars),
			list_struct(HeadVars,[],HVLValue),
			report_dynrule_varlist(HVL,HVLValue),
			collect_namevars(Body,BodyVars),
			list_struct(BodyVars,[],BVLValue),
			report_dynrule_varlist(BVL,BVLValue)
		    )
		;
		    true
		)
	    ;
		Status = StatB
	    )
	;
	    Status=HS
	),
	clear_context(compiling_dynrule),
        clear_context(compile_with_var_module).

remove_empty_list([],[]) :- !.
remove_empty_list([[]|L],NL) :- 
	!,
	remove_empty_list(L,NL).
remove_empty_list([H|L],[H|NL]) :- 
	remove_empty_list(L,NL).


/****************************************************************************
             Table maintenance predicates
     refresh{...} removes the corresponding calls from Prolog tables.
****************************************************************************/
compile_flrefresh(List,Code,Status) :-
	compile_fldelete_list(List,CodeList,Status),
	( Status == [] ->
	    list_struct(CodeList,[],ListCode),
	    table_refresh_struct(ListCode,Code)
	;
	  true
        ).

/****************************************************************************
  compile_flclause(+Mode,+HeadList,+Body,-Code,-Status)
****************************************************************************/
compile_flclause(Label,Mode,HeadList,Body,Code,Status) :-
	(Label == NULL -> LblCode = NULL, MetaCode = NULL, LabStatus=[]
	; compile_label(Label,LblCode,MetaCode,LabStatus)
	),
	(LabStatus==[]
	->
	    (Mode == NULL -> ModeCode = Mode
	    ;
		compile_flatomvar(Mode,ModeCode)
	    ),
	    set_context(compile_with_var_module),
	    set_context(compiling_headliteral),
	    compile_fldelete_list(HeadList,HLC,S),
	    clear_context(compiling_headliteral),
	    ( S== [] ->
		list_struct(HLC,[],HeadListCode),
		compile_body(Body,BodyCode,Status),
		( Status == [] ->
		    clause_struct(LblCode,MetaCode,ModeCode,HeadListCode,BodyCode,Code)
		;
		    true
		)
	    ;
		Status = S
	    )
	;
	    Status = LabStatus
        ),
        clear_context(compile_with_var_module).


/****************************************************************************
             Error handling
     catch{Goal,Err,Handler}
****************************************************************************/
compile_flcatch(Goal,Err,Handler,Code,Status) :-
	compile_body(Goal,GoalCode,GoalStatus),
	( GoalStatus == [] ->
	    compile_pathexp(Err,ErrCode,_OidCode,_ObjSpec,ErrStatus),
	    ( ErrStatus == [] ->
		compile_body(Handler,HandlerCode,Status),
		( Status == [] ->
		    catch_struct(GoalCode,ErrCode,HandlerCode,Code)
		; true
		)
	    ; Status = ErrStatus
	    )
	; Status = GoalStatus
	).

/****************************************************************************
     throw{Err}
****************************************************************************/
compile_flthrow(Err,Code,Status) :-
	compile_pathexp(Err,ErrCode,_OidCode,_ObjSpec,Status),
	( Status == [] ->
	    throw_struct(ErrCode,Code)
	; true
	).


/****************************************************************************
     p2h{Prolog,Hilog}
****************************************************************************/
compile_flp2h(Prolog,Hilog,Code,Status) :-
	compile_pathexp(Prolog,PCode,_POidCode,_PObjSpec,PStatus),
	( PStatus == [] ->
	    compile_pathexp(Hilog,HCode,_HOidCode,_HObjSpec,Status),
	    (Status == [] ->
		p2h_struct(PCode,HCode,Code)
	    ; true
	    )
	; Status = PStatus
	).


/****************************************************************************
  compile_exec_directive(+DirectList,+WS,-Code,-Status)
  compile_execdirect_list(+DirectList,+WS,-DirectCodeList)
****************************************************************************/
compile_exec_directive(DirectList,WS,Code,[]) :-
	compile_execdirect_list(DirectList,WS,DirectCodeList),
	conjunct_code(DirectCodeList,Code).


compile_execdirect_list([],_,[]) :- !.

compile_execdirect_list([D|L],WS,[DCode|LCode]) :-
	compile_execdirect(D,WS,DCode),
	compile_execdirect_list(L,WS,LCode).


/****************************************************************************
  compile_execdirect(+Direct,+WS,-Code)
****************************************************************************/
compile_execdirect(DirectTerm,_WS,Code) :-
        %%to compile the export directive
	is_flexport_list(DirectTerm,Term),
        !,
	compile_export(Term,Code).

compile_execdirect(DirectTerm,WS,Code) :-
	(WS == NULL -> thismodule_struct(Mod)
	; compile_flatomvar(WS,Mod)
	),
	( is_flopdef(DirectTerm,Precedence,Associativity,Op) ->
	    florasyslib_struct(FLLIBSHDIRECT,5,[FL_OP,Mod,Precedence,Associativity,Op],Code)
	/** DEPRECATED
	; is_flarguments(DirectTerm,Funct,Arity,Args) ->
	    list_struct(Args,[],ArgsCode),
	    florasyslib_struct(FLLIBSHDIRECT,5,[FL_ARGUMENTS,Mod,Funct,Arity,ArgsCode],Code)
	**/

	; is_flsemantics(DirectTerm,OptionsList) ->
	    is_fllist(OptionsList,L,T,I),
	    %% compile_fllist shouldn't break here: parser checks everything
	    compile_fllist(L,T,I,OptionListCode,_OidCode,_Code,_Status),
	    thismodule_struct(ThisModuleName),
	    florasyslib_struct(FLLIBSEMANTICS,3,[ThisModuleName,OptionListCode,Mod],Code)

	; is_flsetsemantics(DirectTerm,OptionsList) ->
	    is_fllist(OptionsList,L,T,I),
	    %% compile_fllist shouldn't break here: parser checks everything
	    compile_fllist(L,T,I,OptionListCode,_OidCode,_Code,_Status),
	    thismodule_struct(ThisModuleName),
	    florasyslib_struct(FLLIBSETSEMANTICS,3,[ThisModuleName,OptionListCode,Mod],Code)

	; is_flindex(DirectTerm,A,P) ->
	    %% transactional numbers are used only in :- index %arity-argument
            ( transactionalnumobj_struct(A,ACode); is_fltransactionalvar(A,AN,AI),transactionalvar_struct(AN,AI,ACode);
	      numobj_struct(A,ACode); is_flvar(A,AN,AI),varobj_struct(AN,AI,ACode)),
	    (numobj_struct(P,PCode); is_flvar(P,PN,PI),varobj_struct(PN,PI,PCode)),
            florasyslib_struct(FLLIBSHDIRECT,4,[FL_INDEX,Mod,ACode,PCode],Code)

	%% Ensure that prefix definition is recorded in the shell for
	%% other modules to be used. For instance, if somebody make a
	%% reference to prefix#local@module
	; is_flprefixdef(DirectTerm,PrefixName,PrefixBody) ->
	    compile_pathexplist([PrefixName,PrefixBody],[NamePR,BodyPR],_,_,_Status),
	    ( is_prstring(BodyPR,String,_)
	    %% the value of prefix definition is stored as atom
	    -> atom_codes(BodyCode,String)
	    ; BodyPR=BodyCode
	    ),
	    florasyslib_struct(FLLIBPREFIXDEF,3,[Mod,NamePR,BodyCode],Code)

	),
	!.


%% Used for reading FLORA terms (incl. reified formulas) from within
%% FLORA-2 programs
flora_compile_pathexp(ParserTerm,Code,Status) :-
	compile_pathexp(ParserTerm,ObjectCode,OidCode,SpecCode,Status1),
	( (OidCode \= NULL ; SpecCode \= NULL)
	->
	    %%conjunct_code([OidCode,SpecCode],Code)
	    approximate_index(ParserTerm,Index),
	    compiling_error(Index,READING_NONREIFIED_MOLECULE, S),
	    Status = [S|Status1]
	;
	    Code = ObjectCode, Status = Status1
	).


datatype_list_value(DTListVal,List) :-
	nonvar(DTListVal),
	DTListVal = FLDATATYPELIST(List).
datatype_listvalue_struct(ListLit,PRDATATYPELIST(ListLit)).

is_datatype_listvalue_struct(PRDATATYPELIST(ListLit),ListLit).

%% list of data type literals
compile_datatype_list([],[],[]) :- !.
compile_datatype_list([H|Tail],[HCode|TailCode],Status) :-
	(integer(H) -> HCode = H, S1=[] %% list of characters inside DATATYPE
	;
	    compile_pathexp(H,HCode,_,_,S1)
	),
	(S1==[]
	-> compile_datatype_list(Tail,TailCode,Status)
	;
	    Status=S1
	).

%% Check if Goal is negatable by NEG (explicit negation)
%% Only F-logic atoms (except the derived ones) and HiLog
%% predicates are negatable.
is_head_neg_negatable_literal(PRATOMLIT(_,_)) :- !.
is_head_neg_negatable_literal(PRTERMLIT(_,_,_)) :- !.
is_head_neg_negatable_literal(PREXISTS(_,_)) :- !.
is_head_neg_negatable_literal(PRISA(_,_,_)) :- !.
is_head_neg_negatable_literal(PRSUB(_,_,_)) :- !.
is_head_neg_negatable_literal(PRMVD(_,_,_,_)) :- !.
is_head_neg_negatable_literal(PRIMVD(_,_,_,_)) :- !.
is_head_neg_negatable_literal(PRMVDDEF(_,_,_)) :- !.
is_head_neg_negatable_literal(PRIMVDDEF(_,_,_)) :- !.
is_head_neg_negatable_literal(PRMETH(_,_,_)) :- !.
is_head_neg_negatable_literal(PRIMETH(_,_,_)) :- !.
is_head_neg_negatable_literal(PROBJEQL(_,_,_)) :- !.
is_head_neg_negatable_literal(PRMVDSIG(_,_,_,_)) :- !.
is_head_neg_negatable_literal(PRIMVDSIG(_,_,_,_)) :- !.
is_head_neg_negatable_literal(PRBOOLSIG(_,_,_)) :- !.
is_head_neg_negatable_literal(PRIBOOLSIG(_,_,_)) :- !.
is_head_neg_negatable_literal(PRMVDSIGDEF(_,_,_)) :- !.
is_head_neg_negatable_literal(PRIMVDSIGDEF(_,_,_)) :- !.


is_body_neg_negatable_literal(X) :- is_head_neg_negatable_literal(X), !.
is_body_neg_negatable_literal(X) :-
	workspace_struct(L,_WS,X),
	is_head_neg_negatable_literal(L),
	!.
is_body_neg_negatable_literal(X) :-
	(is_florasyslib_struct(X, _I,FLLIBMODLIT,_N,Args)
	; is_florasyslib_struct(X,_I,FLLIBMODOBJ,_N,Args)
	; is_florasyslib_struct(X, _I,FLNEGLIBMODLIT,_N,Args)
	; is_florasyslib_struct(X,_I,FLNEGLIBMODOBJ,_N,Args)
	),
	Args = [P|_],
	is_body_neg_negatable_literal(P),
	!.
is_body_neg_negatable_literal(X) :-
	X = PRVARIABLE(_,_),
	%% Allow variables to be negated so that
	%% ?X = ${a[b->c]}, neg ?X would be possible.
	%%has_compilation_context(goal_reification),
	!.

/*
is_unimplemented_neg_negatable_literal(X) :-
	is_florasyslib_struct(X, _I,_F,_N,_Args).
*/
