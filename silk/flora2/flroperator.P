/* File:      flroperator.P -- Flora operator definitions
**
** Author(s): Guizhen Yang
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2008.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/


:- compiler_options([xpp_on]).


#include "flora_terms.flh"


flora_op(1700,xfx,FL_IMPLYOP).
flora_op(1700,fx,FL_IMPLYOP).
flora_op(1700,fx,FL_QUERYOP).

flora_op(1600,xfx,FL_BAR).
flora_op(1600,fx,FL_INDEX).
flora_op(1600,fx,FL_EXPORT).
flora_op(1600,fx,FL_IMPORTMODULE).
flora_op(1600,fx,FL_PREFIXDEF).
flora_op(1300,fx,FL_UPDATABLE).
flora_op(1600,fx,FL_CMPOPT).
flora_op(1600,fx,FL_IGNOREDEP).

flora_op(1500,xfx,FL_FROM).
flora_op(1500,xfy,FL_SEMICOLON).
%%flora_op(1500,xfy,FL_OR).

flora_op(1400,xfy,FL_COMMA).
%%flora_op(1400,xfy,FL_AND).

flora_op(1300,fy,FL_IF).
flora_op(1300,xfy,FL_THEN).
flora_op(1300,xfy,FL_ELSE).

flora_op(1300,xfy,FL_LEFTARROW). % alternative if-then

flora_op(1300,fy,FL_DO).       % do... until...
flora_op(1300,fy,FL_LOOP).       % loop... until...
flora_op(1300,xfy,FL_UNTIL).
flora_op(1300,xfy,FL_DO).      % while... do...  or unless ... do...
flora_op(1300,xfy,FL_LOOP).      % while... loop...
flora_op(1300,fy,FL_WHILE).
flora_op(1300,fy,FL_UNLESS).

%% These are higher than FL_NOT, FL_NEG, etc., so that  neg a ~ neg b
%% would be interpreted as neg(a) ~ neg(b).
flora_op(1250,xfx,FL_UNIVEQFORM).      %  ~
flora_op(1250,xfx,FL_NOTUNIVEQFORM).   %  \~, !~

flora_op(1200,fy,FL_TNOT).
flora_op(1200,fy,FL_NOT).
flora_op(1200,fy,FL_NEG).
flora_op(1200,fy,FL_NAF).


flora_op(1100,xfx,FL_MVDARROW).
flora_op(1100,xfx,FL_ALLINARROW).
flora_op(1100,xfx,FL_TOLISTARROW).
flora_op(1100,xfx,FL_MVDSIGARROW).
flora_op(1100,xfx,FL_INMVDARROW).
flora_op(1100,xfx,FL_INALLINARROW).
flora_op(1100,xfx,FL_INTOLISTARROW).
flora_op(1100,xfx,FL_INMVDSIGARR).
flora_op(1100,fx,FL_BOOLSIGARR).
flora_op(1100,fx,FL_INBOOLSIGARR).
flora_op(1100,fx,FL_TRANSIGARR).
flora_op(1100,fx,FL_INTRANSIGARR).
%%flora_op(1100,fx,FL_TRAN).

%% Keep these below FL_NOT, FL_NEG, FL_NAF, etc.
%% Otherwise, \+ ?X=?Y would be treated as \+(?X) = ?Y.
flora_op(1000,xfx,FL_UNIVEQ).       % =
flora_op(1000,xfx,FL_UNIVNOTEQ).    % \=, !=
flora_op(1000,xfx,FL_EQ).           % ==
flora_op(1000,xfx,FL_NOTEQ).        % \==, !==

flora_op(1000,xfx,FL_ORDERLT).
flora_op(1000,xfx,FL_ORDEREQLT).
flora_op(1000,xfx,FL_ORDERGT).
flora_op(1000,xfx,FL_ORDEREQGT).
flora_op(1000,xfx,FL_METAUNIV).
flora_op(1000,xfx,FL_OBJEQL).
flora_op(1000,xfx,FL_IS).
flora_op(1000,xfx,FL_MATHEQ).
flora_op(1000,xfx,FL_MATHNOTEQ).
flora_op(1000,xfx,FL_LT).
flora_op(1000,xfx,FL_EQLT).
flora_op(1000,xfx,FL_GT).
flora_op(1000,xfx,FL_EQGT).

flora_op(900,xfx,FL_RIGHTTO).
flora_op(900,xfx,FL_LEFTTO).

flora_op(800,yfx,FL_PLUS).
flora_op(800,yfx,FL_MINUS).
flora_op(800,yfx,FL_SYMOR).

flora_op(700,yfx,FL_STAR).
flora_op(700,yfx,FL_SLASH).
flora_op(700,yfx,FL_MOD).
flora_op(700,yfx,FL_SYMAND).

flora_op(600,fy,FL_PLUS).
flora_op(600,fy,FL_MINUS).
flora_op(600,fx,FL_INMETH).

flora_op(500,xfx,FL_AT).

flora_op(400,yfx,FL_ISA).
flora_op(400,yfx,FL_SUB).

flora_op(300,yfx,FL_MVD).
flora_op(300,yfx,FL_INHERIMVD).

%% FL_DATATYPE_CONNECTOR should have higher priority than FL_URISQOP,
%% but less-or-equal the priority of FL_MVD and FL_INHERIMVD.
%% Otherwise, things like
%% ?x="22:22:33"^^_t._second@_basetype, ?x="22:22:33"^^xsd#time
%% ?x="22:22:33"^^xsd#time._minute@_basetype
%% won't be parsed correctly.
flora_op(300,yfx,FL_DATATYPE_CONNECTOR).
flora_op(250,xfy,FL_URISQOP).


%%flora_op(250,fx,FL_TRAN).


/***************************************************************************
   Infix operators that must be immediately enclosed in parentheses
***************************************************************************/
flora_parenthesized_op(FL_URISQOP).

/***************************************************************************
/****************************************************************************
  flora_opdef(+Precedence,+Associativity,+Op)
****************************************************************************/
flora_opdef(X,Y,Z) :-
	flora_op(X,Y,Z).

flora_opdef(X,Y,Z) :-
	( flora_get_counter(flora_shell_mode,1) ->
	    flora_shop(X,Y,Z)
	;
	  flora_dynop(X,Y,Z)
	).


/****************************************************************************
  flora_conflict_operator(+Precedence,+Associativity,+Op)
****************************************************************************/
flora_conflict_operator(P,A,Op) :-
	flora_op(_P,_A,Op),
	(P \= _P; A \= _A).


/****************************************************************************
  flora_reset_operator/0
****************************************************************************/
flora_reset_operator :- retractall(flora_dynop(_,_,_)).


/****************************************************************************
  flora_define_operator(+Precedence,+Associativity,+Op)
****************************************************************************/
flora_define_operator(P,A,Op) :-
	( flora_op(P,A,Op) ->
	    true
	;
	  assert(flora_dynop(P,A,Op))
	).


/****************************************************************************
  flora_shreset_operator/0
****************************************************************************/
flora_shreset_operator :- retractall(flora_shop(_,_,_)).


/****************************************************************************
  flora_shdefine_operator(+Precedence,+Associativity,+Op)
****************************************************************************/
flora_shdefine_operator(P,A,Op) :-
	( flora_op(P,A,Op) ->
	    true
	;
	  assert(flora_shop(P,A,Op))
	).
