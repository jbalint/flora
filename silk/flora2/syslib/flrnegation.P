/* File:      flrnegation.P
**
** Author(s): Michael Kifer
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2010.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
*/

:- compiler_options([xpp_on]).
#include "trie_defs.h"
#include "flora_terms.flh"
#include "flora_porting.flh"
#include "flora_prefix.flh"
#include "flora_exceptions.flh"

#include "flora_tabling_methods.flh"

:- import numbervars/4 from num_vars.
:- import copy_term/2 from basics.
:- import
	is_acyclic/1,
	term_arg/3
   from machine.
%%:- import
%%	't not'/1
%%   from tables.
:- import
	incr_invalidate_call/1
   from increval.
:- import
	flora_has_incomplete_incr_dependent_table/1,
	flora_abolish_table_call/1
   from flrtables.
:- import
	flora_abort/2,
	flora_match_substring/3
   from flrporting.
:- import flora_module_predicate/4 from flrwrapper.
:- import flora_decode_goal_as_atom/2 from flrdecode.

%% need to import that to match the error's module
:- import error/3 from usermod.

:- import
	storage_delete_fact/3,
	storage_find_fact/2
   from storage.

:- import
	flora_storage_fast_insert_fact/3
   from flrstoragebase.

:- dynamic update_counter/2.
:- local update_counter/2.

:- export
	flora_unwrap_negation/2,
	flora_apply_negation_wrapper/3,
	incr_flora_update_counter/0,
	FLORA_TNOT_PREDICATE/3,
	FLORA_TNOT_PREDICATE/1.


%% Similar to XSB's sk_not, but allows us to clean up the intermediate
%% tables created while computing negation. Also, tries to deal with
%% various builtins, like var, integer, =, directly.

%% Variables temporarily changed to ground and tnot 
%% call is made.  Should give existential semantics to nonground negative
%% calls.  That is
%%	...:- FLORA_TNOT_PREDICATE(p(X)),...
%% is like
%%	... :- tnot(pp),...
%%	pp :- p(X).
%% where pp is a new proposition.

FLORA_TNOT_PREDICATE(Goal) :- FLORA_TNOT_PREDICATE(Goal,NULL,NULL).

FLORA_TNOT_PREDICATE(Goal,Line,File) :-
	flora_unwrap_negation_nocheck(Goal,UnwrappedGoal),
	is_acyclic(UnwrappedGoal),
	make_negated_goal(UnwrappedGoal,Goal,NewGoal),
	catch(NewGoal,error(typed_table_error(incremental_tabling),_,_),incr_tabling_error_handler(Line,File,UnwrappedGoal)).

	
%% Delete tables for FLORA_THIS_WORKSPACE(TABLED_UNNUMBER_CALL)/1, which
%% is defined in closure/flrcommon.fli
cleanup_negation(Call) :-
	donot_cleanup_negation(Call),
	!.
cleanup_negation(Call) :-
	(curr_sym:predicate_property(Call,incremental)
	-> ( flora_has_incomplete_incr_dependent_table(Call) -> true
	   ; incr_invalidate_call(Call)
	   )
	; flora_abolish_table_call(Call)
	).


%% unwrap Call = FLORA_THIS_WORKSPACE(FL_TABLED_UNNUMBER_CALL)(Unwrapped)
flora_unwrap_negation(Call,Unwrapped) :-
	functor(Call,F,1),
	flora_match_substring(FL_TABLED_UNNUMBER_CALL,F,_),
	!,
	arg(1,Call,Unwrapped).
flora_unwrap_negation(Call,Call).

flora_unwrap_negation_nocheck(Call,Unwrapped) :-
	%%arg(1,Call,Unwrapped).
	term_arg(Call,1,Unwrapped).


flora_apply_negation_wrapper(Goal,Workspace,GoalWrapped) :-
	flora_module_predicate(FL_TABLED_UNNUMBER_CALL,[Goal],Workspace,GoalWrapped).


incr_tabling_error_handler(Line,File,Goal) :-
	((Line == NULL ; var(Line)) -> LineMsg = '(unknown)'
	; LineMsg = Line
	),
	((File == NULL ; var(File)) -> FileMsg = '(unknown)'
	; FileMsg = File
	),
	((var(Line) ; var(File)) -> EndingMsg = ' (The offending statement may have been created dynamically and passed down as an argument.)'
	; EndingMsg = ''
	),
	MainMsg1 = 'Attempt to perform a side-effectful action "',
	MainMsg2 = '" in an IF- or UNLESS-condition, or in the scope of the default negation operator. Such actions must be wrapped inside hypotheticals.',
	flora_decode_goal_as_atom(Goal,GoalAtm),
	flora_abort(['Line: ', LineMsg, ', file: ', FileMsg, '. ',
		     MainMsg1, GoalAtm, MainMsg2, EndingMsg],
		    FLORA_ABORT_NOTRACE).

%% optimizations for common cases. more to be added as the need arises
%% may add write predicates here
%% May push through conjunctions and disjunctions later
make_negated_goal('='(Left,Right),   _OrigGoal, '\='(Left,Right))   :- !.
make_negated_goal('!='(Left,Right),   _OrigGoal, '='(Left,Right))   :- !.
make_negated_goal('\='(Left,Right),  _OrigGoal, '='(Left,Right))    :- !.
make_negated_goal('=='(Left,Right),  _OrigGoal, '\=='(Left,Right))  :- !.
make_negated_goal('\=='(Left,Right), _OrigGoal, '=='(Left,Right))   :- !.
make_negated_goal('<'(Left,Right),   _OrigGoal, '>='(Left,Right))   :- !.
make_negated_goal('=<'(Left,Right),  _OrigGoal, '>'(Left,Right))    :- !.
make_negated_goal('>'(Left,Right),   _OrigGoal, '=<'(Left,Right))   :- !.
make_negated_goal('>='(Left,Right),  _OrigGoal, '<'(Left,Right))    :- !.
make_negated_goal('@<'(Left,Right),  _OrigGoal, '@>='(Left,Right))  :- !.
make_negated_goal('@=<'(Left,Right), _OrigGoal, '@>'(Left,Right))   :- !.
make_negated_goal('@>'(Left,Right),  _OrigGoal, '@=<'(Left,Right))  :- !.
make_negated_goal('@>='(Left,Right), _OrigGoal, '@<'(Left,Right))   :- !.
make_negated_goal(FL_ISSKOLEM(V),    _OrigGoal, \+FL_ISSKOLEM(V))   :- !.
make_negated_goal(FL_ISBASEFACT(V),  _OrigGoal, \+FL_ISBASEFACT(V)) :- !.
make_negated_goal(\+(V),             _OrigGoal, V)                  :- !.
make_negated_goal(var(V),            _OrigGoal, nonvar(V))          :- !.
make_negated_goal(nonvar(V),         _OrigGoal, var(V))             :- !.
make_negated_goal(integer(V),        _OrigGoal, \+integer(V))       :- !.
make_negated_goal(float(V),          _OrigGoal, \+float(V))         :- !.
make_negated_goal(number(V),         _OrigGoal, \+number(V))        :- !.
make_negated_goal(is_list(V),        _OrigGoal, \+is_list(V))       :- !.
make_negated_goal(is_charlist(V),    _OrigGoal, \+is_charlist(V))   :- !.
make_negated_goal(is(V,W),           _OrigGoal, \+is(V,W))          :- !.
make_negated_goal(true,           _OrigGoal, fail)                  :- !.
make_negated_goal(fail,           _OrigGoal, true)                  :- !.
make_negated_goal(false,          _OrigGoal, true)                  :- !.

make_negated_goal(FLLIBHYPOTHETICAL(Type,Goal), _OrigGoal, FLLIBHYPOTHETICAL(ReverseType,Goal)) :-
	!,
	(Type == FL_POSSIBLE -> ReverseType = FL_IMPOSSIBLE
	; ReverseType = FL_POSSIBLE
	).

make_negated_goal(_UnwrappedGoal,OrigGoal,tnot(TempGoal)) :-
	copy_term(OrigGoal,TempGoal),
	%% make TempGoal ground, so no checks would be necessary in 't not'
	numbervars(TempGoal,0,_,[attvar(bind)]),
	%% cleanup_negation/1 is checking for incomplete tables to be safe
	cleanup_negation(TempGoal),
	%% the below register_negated_call MUST come after cleanup_negation
	register_negated_call(TempGoal),
	!.

%% update_counter business
#define NEG_MGT_TRIE  FLORA_SYMBOL('neg_mgt_trie')
?- assert(update_counter(0,0)).
donot_cleanup_negation(Call) :-
	update_counter(CurrL,CurrR),
	(storage_find_fact(NEG_MGT_TRIE,negated_calls_cache(Call,CallFlag))
	-> (CurrL,CurrR) = CallFlag
	; true
	).
incr_flora_update_counter :-
	%%update_counter(H,L),
	retract(update_counter(H,L)),
	current_prolog_flag(max_integer,MaxInt),
	(L < MaxInt -> L1 is L+1, H1 is H
	; L1 = 0, H1 is H+1
	),
	assert(update_counter(H1,L1)).

register_negated_call(Call) :-
	%% get current flag
	update_counter(L,R),
	CurrFlag = (L,R),
	(storage_find_fact(NEG_MGT_TRIE,negated_calls_cache(Call,CurrFlag))
	-> true
	; storage_delete_fact(NEG_MGT_TRIE,negated_calls_cache(Call,_),_),
	    %%!,   %% cut here has no effect
	    flora_storage_fast_insert_fact(NEG_MGT_TRIE,
					   NON_INCREMENTAL_TRIE,
					   negated_calls_cache(Call,CurrFlag))
	).
