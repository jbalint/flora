/* File:      flrnegation.P
**
** Author(s): Michael Kifer
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2010.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/



:- compiler_options([xpp_on]).
#include "flora_terms.flh"
#include "flora_porting.flh"
#include "flora_prefix.flh"

#include "flora_tabling_methods.flh"

#define MAX_NEGATION_NESTING_DEPTH 10000


%% Identical to XSB's sk_not, but allows us to clean up the intermediate
%% tables created while computing the negation

%% Variables temporarily changed to ground and tnot 
%% call is made.  Should give existential semantics to nonground negative
%% calls.  That is
%%	...:- FLORA_TNOT_PREDICATE(p(X)),...
%% is like
%%	... :- tnot(pp),...
%%	pp :- p(X).
%% where pp is a new proposition.

:- import numbervars/4 from num_vars.
:- import copy_term/2 from basics.
:- import 't not'/1 from tables.
:- import
	flora_abolish_table_call/1
   from flrtables.
:- import flora_match_substring/3 from flrporting.
:- import
	flora_module_predicate/4
   from flrwrapper.


:- export
	flora_unwrap_negation/2,
	flora_cleanup_negation/1, 
	flora_apply_negation_wrapper/3,
	FLORA_TNOT_PREDICATE/1.


FLORA_TNOT_PREDICATE(Goal) :-
	copy_term(Goal,Goal1),
	numbervars(Goal1,0,_,[attvar(bind)]),
	%% deleting tables for FLORA_THIS_WORKSPACE(tabled_unnumber_call)/1
	%% is dangerous here due to possible loops through negation.
	%% But we are checking for incomplete tables!? Should be safe?
	flora_cleanup_negation(Goal1),
	%% Goal1 is now ground, so no checks are necessary in 't not'
	't not'(Goal1).
	
	
%% Delete tables for FLORA_THIS_WORKSPACE(tabled_unnumber_call)/1, which
%% defined in closure/flrcommon.fli
%% Do nothing for incremental tabling
flora_cleanup_negation(Call) :-
	(curr_sym:predicate_property(Call,incremental)
	->
	    increval:incr_invalidate_call(Call)
	;
	    flrcanon:convert_to_body_literal(Call,Call1),
	    flora_abolish_table_call(Call1)
	),
	!.

%% unwrap Call = FLORA_THIS_WORKSPACE(FL_TABLED_UNNUMBER_CALL)(Unwrapped)
flora_unwrap_negation(Call,Unwrapped) :-
	functor(Call,F,1),
	flora_match_substring(FL_TABLED_UNNUMBER_CALL,F,_),
	arg(1,Call,Unwrapped).


flora_apply_negation_wrapper(Goal,Workspace,GoalWrapped) :-
	flora_module_predicate(FL_TABLED_UNNUMBER_CALL,[Goal],Workspace,GoalWrapped).
