/* File:      flrnegation.P
**
** Author(s): Michael Kifer
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2010.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/



:- compiler_options([xpp_on]).
#include "flora_porting.flh"
#include "flora_prefix.flh"

#define MAX_NEGATION_NESTING_DEPTH 10000


%% Identical to XSB's sk_not, but allows us to clean up the intermediate
%% tables created while computing the negation

%% Variables temporarily changed to ground and tnot 
%% call is made.  Should give existential semantics to nonground negative
%% calls.  That is
%%	...:- FLORA_TNOT(p(X)),...
%% is like
%%	... :- tnot(pp),...
%%	pp :- p(X).
%% where pp is a new proposition.

:- import numbervars/3, unnumbervars/2 from num_vars.
:- import copy_term/2 from basics.
:- import 't not'/1 from tables.
:- import
	flora_abolish_table_predicate/1,
	flora_abolish_table_call/1
   from flrtables.


:- export
	flora_cleanup_negation/0,  % unused
	FLORA_TNOT_PREDICATE/1.

:- table tabled_unnumber_call/1.
:- use_variant_tabling tabled_unnumber_call(_).

FLORA_TNOT_PREDICATE(Goal) :-
	copy_term(Goal,Goal1),
	numbervars(Goal1,0,_), % Goal1 is now ground, so no checks are necessary
	flora_cleanup_negation(Goal1),
	't not'(tabled_unnumber_call(Goal1)).

tabled_unnumber_call(GGoal) :-
	unnumbervars(GGoal,VGoal),
	call(VGoal).

%% Clean up tables introduced for the intermediate resuts in computing negation
flora_cleanup_negation :-
	flora_abolish_table_predicate(tabled_unnumber_call(_)), !.
flora_cleanup_negation(Call) :-
	flora_abolish_table_call(tabled_unnumber_call(Call)), !.

