/* File:      flrtables.P
**
** Author(s): Michael Kifer
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2010.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/


%% Calls that abolish tables of predicates and calls.
%% modified from XSB's tables.P

:- compiler_options([xpp_on]).

#include "flora_terms.flh"
#include "flora_porting.flh"
#include "builtin.h"
#include "heap_defs_xsb.h"


:- export
	flora_abolish_table_predicate/1,
	flora_abolish_table_predicate/2,
	flora_abolish_table_call/1,
	flora_abolish_table_call/2,
	flora_refresh_tables/1,
	FLLIBREFRESH/2.
:- import table_state/4, get_calls/3, abolish_table_pred/1  from tables.
:- import predicate_property/2 from curr_sym.
%%:- import incr_invalidate_call/1 from increval.

:- import
	flora_unwrap_negation/2
   from flrnegation.
:- import
	flora_generalize_last/2
   from flrtrim.
:- import FLORA_SYMBOL('refresh_table_for')/1 from usermod.
:- import flora_warning_line/2 from flrprint.
%%:- import flora_decode_goal_as_atom/2 from flrdecode.

:- ensure_loaded('flrdynmod.P').


FLLIBREFRESH(_ThisModule,CallList) :-
	flora_refresh_list(CallList).

flora_refresh_list([]).
flora_refresh_list([H|T]) :-
	flora_refresh_tables(H),
	flora_refresh_list(T).

%% refresh tables for call
flora_refresh_tables(Call) :-
	flora_generalize_last(Call,GenCall),
	FLORA_SYMBOL('refresh_table_for')(GenCall),
	!.
flora_refresh_tables(_).



%% Call must be of the form p(_,_) -- it is an internal Flora-2 predicate
%% This is a safe way of abolishing all predicate's tables
flora_abolish_table_predicate(Call) :-
	flora_abolish_table_predicate(Call,abolish_table_pred_hook(_Error)).
	%%flora_abolish_table_predicate(Call,throw(_ErrorType)).
flora_abolish_table_predicate(Call,Hook) :-
	(
	  nonincremental_predicate(Call),
	  get_calls(Call,Handle,_Template)
	->
	    table_state(Handle,_PredType,_CallType,AnsSetStatus),
	    (   AnsSetStatus == incomplete
	    ->  arg(1,Hook,table_error(abolishing_incomplete_call,Call)),
		call(Hook)
	    ;  abolish_table_pred(Call)
	    )
	;
	  %%incr_invalidate_call(Call),
	  true
	).

abolish_table_pred_hook(Error) :-
	Error = table_error(abolishing_incomplete_call,Call),
	(flora_unwrap_negation(Call,UnwrappedCall) -> Comment = 'negation of'
	;  Comment = '', UnwrappedCall = Call
	),
	%% sometimes Call is not decodable - don't decode
	%%flora_decode_goal_as_atom(UnwrappedCall,CallStr),
	(true, !  % if debugging - replace "true" with "fail"
	; flora_warning_line('Attempt to discard incomplete table while computing ~w ~w',
			     [Comment,Call])
	).


%% Safe way of abolishing a table for a call and the unifying calls
flora_abolish_table_call(Call) :-
        flora_abolish_table_call(Call,abolish_table_call_hook(_Error)).

flora_abolish_table_call(Call,Hook) :-
	predicate_property(Call,tabled), % if non-tabled then no-op
	get_calls(Call,Handle,_Template),
	table_state(Handle,_PredType,_CallType,AnsSetStatus),
	(   AnsSetStatus == undefined
	->  throw(table_error(abolishing_undefined_call,Call))
	;   AnsSetStatus == incomplete
	->  arg(1,Hook,table_error(abolishing_incomplete_call,Call)),
	    call(Hook)
	/*
	;   _PredType = subsumptive
	->  arg(1,Hook,table_error(abolishing_subsumptive_call,Call)),
	    call(Hook)
	*/
	; nonincremental_predicate(Call)
	->
	    internal_abolish_table_call(Handle)
	/*
	; incremental_predicate(Call) -> 
	    incr_invalidate_call(Call)
	*/
	),
	fail.
flora_abolish_table_call(_Call,_Hook).

abolish_table_call_hook(table_error(Type,Call)) :-
	(Type == abolishing_incomplete_call
	->  Comment = 'incomplete'
	/*
	; Type == abolishing_subsumptive_call
	->  Comment = 'subsumptive'
	*/
	),
	%% sometimes Call is not decodable - don't decode
	%%flora_decode_goal_as_atom(Call,CallStr),
	(true, !  % for debugging - replace with fail
	; flora_warning_line('Attempt to abolish ~w table for ~w', [Comment,Call])
	).

nonincremental_predicate(Call) :-
	predicate_property(Call,opaque),
	!.
nonincremental_predicate(Call) :-
	\+predicate_property(Call,incremental).

/*
incremental_predicate(Call) :-
	predicate_property(Call,incremental).
*/

%% Change the default behavior of abolishing tables
?- set_prolog_flag(table_gc_action,abolish_tables_singly).

internal_abolish_table_call(Handle) :-
	abolish_table_call_bi(Handle,ABOLISH_TABLES_DEFAULT).
abolish_table_call_bi(_Handle,_Action) :-
	'_$builtin'(ABOLISH_TABLE_CALL).
