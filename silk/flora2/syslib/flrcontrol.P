/* File:      flrcontrol.P
**
** Author(s): Michael Kifer
**            Guizhen Yang
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2010.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"
#include "flora_porting.flh"

:- import flora_commit_storage/0 from flrutils.
:- import flora_apply_negation_wrapper/3 from flrnegation.


/***************************************************************************
  if-then-else statement
***************************************************************************/
FLLIBIFTHENELSE(_Mod,Cond,Then,_Else,_Line,_File) :-
	call(Cond),
	call(Then).

FLLIBIFTHENELSE(Mod,Cond,_Then,Else,Line,File) :-
	flora_apply_negation_wrapper(Cond,Mod,CondWrapped),
	FLORA_NAF_PREDICATE(CondWrapped,[],Line,File),
	call(Else).


/***************************************************************************
  if-then statement

  The semantics is such that the entire statement succeeds when the
  condition part fails.
***************************************************************************/
FLLIBIFTHEN(_Mod,Cond,Then,_Line,_File) :-
	call(Cond),
	call(Then).

FLLIBIFTHEN(Mod,Cond,_Then,Line,File) :-
	flora_apply_negation_wrapper(Cond,Mod,CondWrapped),
	FLORA_NAF_PREDICATE(CondWrapped,[],Line,File).


%% UNLESS ... DO ... is like IF...THEN true ELSE ...
FLLIBUNLESSDO(_Mod,Cond,_Action,_Line,_File) :-
	call(Cond).
FLLIBUNLESSDO(Mod,Cond,Action,Line,File) :-
	flora_apply_negation_wrapper(Cond,Mod,CondWrapped),
	FLORA_NAF_PREDICATE(CondWrapped,[],Line,File),
	call(Action).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%   while-do and do-until loops commit storage after each iteration
%%%%   so they are not backtrackable (backtracking over updates can occur
%%%%   only within the condition or action parts, but not after an iteration
%%%%   is finished)
%%%%   These loops fail only if Action fails.
%%%%   Variables that were unbound at the time of the call stay unbound
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% This should fail ONLY if Cond is true, but Action fails.
%% We use catch/throw to achieve this
FLLIBWHILEDO(_Mod,Cond,Action,_Line,_File) :- 
	FLORA_SYMBOL('catch')((call(Cond),
			       (call(Action)
			       -> flrutils:flora_commit_storage, fail
			       ; throw(quitLoop)
			       )
			      ; true
			      ),
			      quitLoop,	% catcher
			      fail). % fail, if condition was thrown

%% Fails only if Action becomes false before Cond becomes true
FLLIBDOUNTIL(_Mod,Action,Cond,_Line,_File) :-
	call(Action),
	flora_commit_storage,
	call(Cond).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% while-loop and loop-until
%%%% These loops are fully backtrackable, but they are more expensive, 
%%%% since they are recursive.
%%%% These loops fail only if Action fails.
%%%% Variables that were unbound at the time of the call stay unbound
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

FLLIBWHILELOOP(_Mod,Cond,Action,Line,File) :- 
	%% Must copy_term Action&Cond together so the variables
	%% will be preserved
	copy_term((Action,Cond),(Action1,Cond1)),
	(call(Cond1) ->
	    (call(Action1), FLLIBWHILELOOP(_Mod,Cond,Action,Line,File)
	    ; fail
	    )
	; true
	).

%% Cond shouldn't be tabled!!! Otherwise "naf" barks!!!
%% We can't use FLORA_NAF_PREDICATE instead of "naf" because
%% FLORA_NAF_PREDICATE would table Cond and cause more iterations
%% than necessary. We could call abolish_all_tables from within
%% FLORA_NAF_PREDICATE, but this is dangerous:
%%    If there is a recursive dependency on Cond then abolishing tables
%%    while computing them can crash XSB
FLLIBLOOPUNTIL(_Mod,Action,Cond,Line,File) :-
	%% Must copy_term Action&Cond together so the variables
	%% will be preserved
	copy_term((Action,Cond),(Action1,Cond1)),
	call(Action1),
	(call(Cond1) -> true
	; FLLIBLOOPUNTIL(_Mod,Action,Cond,Line,File)
	).


%% These exist in order to be able to hide the calls 
%% to catch/throw in the debugger
FLORA_SYMBOL('catch')(X,Y,Z) :- catch(X,Y,Z).
