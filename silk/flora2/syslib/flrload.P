/* File:        flrload.P
**
** Author(s): Guizhen Yang
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2010.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/


:- compiler_options([xpp_on]).

#include "flora_terms.flh"
#include "flora_extensions.flh"
#include "flora_exceptions.flh"


:- import
	flora_stderr_nl/0,
	flora_stderr_string/1,
	flora_error_line/1,
	flora_error_line/2,
	flora_error_heading/0
   from flrprint.

:- import
	flora_load_module_internal/1,
	flora_load_module_internal/2,
	flora_add_module_dyn/1,
	flora_add_module_dyn/2,
	flora_locate_file/3
   from flrutils.

:- import flora_display_error/1 from flrdisplay.

:- import
	flora_get_counter/2,
	flora_file_op/3
   from flrporting.

:- import flora_abort/0 from flrutils.



/********************************************************************/
fllibload([],_HostFile,_HostMod,_Rulenum) :- !.

fllibload([T|L],HostFile,HostMod,Location) :-
	!,
	flora_load_file(T,HostFile,HostMod,Location),
	fllibload(L,HostFile,HostMod,Location).


/*********************************************************************
  flora_load_file(+FileName,+HostFile,+HostMod,+Location)
  flora_load_file(FL_RIGHTTO(+FileName,+Workspace),+HostFile,+HostMod,+Location)

  Filename: file being loaded
  Workspace: module into which it is loaded
  HostFile: program file from which this call was made
  HostMod: module into which host program was loaded
  Location: of the form [Line,Char] indicates the line and char
            where the loading literal occurs in the program

  Note: Runtime checking of file and workspace names is needed, since
        the load list can be constructed at runtime.
*********************************************************************/
%% adding files to modules
flora_load_file(FL_PLUS(T),_,_,_) :-
	var(T),
	!,
	flora_stderr_nl,
	flora_error_line('unbound file name in _add(...)'),
	fail.

%% adding files to modules
flora_load_file(FL_RIGHTTO(FL_PLUS(FileName),Workspace),_HostFile,_HostMod,_Location) :-
	!,
	%% Don't check module overriding - we are adding rules
	%%flora_check_module_overriding(FileName,Workspace,_HostFile,_HostMod,_Location),
	( atom(Workspace) ->
	    flora_add_module_dyn(FileName,Workspace)
	;
	    flora_stderr_nl,
	    ( var(Workspace) ->
		flora_error_line('uninstantiated module name in _add(...)')
	    ;
	        flora_error_heading,
		flora_stderr_string('invalid module name: '),
		flora_display_error(Workspace),
		flora_stderr_nl
	    ),
	    !,
	    fail
        ).

flora_load_file(FL_PLUS(T),_HostFile,_HostMod,_Location) :-
	%% Don't check module overriding - we are adding rules
	%%flora_check_module_overriding(T,FLORA_DEFAULT_WORKSPACE,_HostFile,_HostMod,_Location),
	flora_add_module_dyn(T),
	!.

%% Replacing contents of modules
flora_load_file(T,_,_,_) :-
	var(T),
	!,
	flora_stderr_nl,
	flora_error_line('unbound file name in _load(...)'),
	fail.

flora_load_file(FL_RIGHTTO(FileName,Workspace),HostFile,HostMod,Location) :-
	!,
	flora_check_module_overriding(FileName,Workspace,HostFile,HostMod,Location),
	( atom(Workspace) ->
	    flora_load_module_internal(FileName,Workspace)
	;
	    flora_stderr_nl,
	    ( var(Workspace) ->
		flora_error_line('uninstantiated module name in _load(...)')
	    ;
	        flora_error_heading,
		flora_stderr_string('invalid module name: '),
		flora_display_error(Workspace),
		flora_stderr_nl
	    ),
	    !,
	    fail
        ).

flora_load_file(T,HostFile,HostMod,Location) :-
	flora_check_module_overriding(T,FLORA_DEFAULT_WORKSPACE,HostFile,HostMod,Location),
	flora_load_module_internal(T),
	!.

flora_load_file(X,_,_,_) :-
	flora_stderr_nl,
	flora_error_heading,
	flora_stderr_string('invalid file name: '),
	flora_display_error(X),
	flora_stderr_nl,
	!,
	fail.


/***************************************************************************
  Don't allow a module to load into itself
***************************************************************************/
flora_check_module_overriding(_LoadFile,_Workspace,userin,main,_Location) :-
	!.

%% Don't do the check if we are loading a prolog module
%% (i.e., it doesn't have the .flr file and no workspace was given in [...])
flora_check_module_overriding(LoadFile,main,_HostFile,_HostMod,_Location) :-
	not flora_locate_file(LoadFile,FLORA_FILE_EXT,_FlrFile),
	!.


flora_check_module_overriding(LoadFile,Workspace,HostFile,HostMod,[Line,Char]) :-
	HostMod == Workspace,
	!,
	flora_stderr_nl,
	flora_file_op(basename,HostFile,HostFileBasename),
	flora_error_line('~w.flr: Literal [~w >> ~w] near line(~w)/char(~w) overrides the program in which it occurs',
			 [HostFileBasename,LoadFile,HostMod,Line,Char]),
	flora_abort.

flora_check_module_overriding(_LoadFile,_Workspace,_HostFile,_HostMod,_Location).
