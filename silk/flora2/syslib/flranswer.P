/* File:        flranswer.P
**
** Author(s): Guizhen Yang
**            Michael Kifer 
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2009.
**      and Vulcan, Inc., 2008-2009.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/


:- compiler_options([xpp_on]).

#include "char_defs.h"
#include "standard.h"
#include "flora_terms.flh"
#include "flora_status_codes.flh"

%% Request number for obtaining the delay register
#define DELAY_REG  2

%% Names of answer tries
#define FLRANSWER_TRUE_TRIE   '_$_$flora_true_answer_storage'
#define FLRANSWER_UNDEF_TRIE  '_$_$flora_undef_answer_storage'
#define FLRANSWER_FUNCTOR     answer


:- import cputime/1 from standard.

:- import windows_os/0 from xsb_configuration.

:- import length/2 from basics.

:- import
	close_open_tables/0,
	xwam_state/2
   from machine.

:- import
	storage_insert_fact/3,
	storage_find_fact/2,
	storage_delete_all/1
   from storage.

:- import flora_builtin_datatype/1 from flrdatatype.

%%:- import flora_abolish_table_predicate/1 from flrtables.

:- import
	flora_stdfdbk_string/2,
	flora_stdfdbk_string/1,
	flora_stdfdbk_nl/0,
	flora_stdfdbk_line/1
   from flrprint.

:- import flora_call_hooks/5 from flrhooks.

:- import flora_commit_storage/0, flora_reclaim_storage_space/0 from flrutils.

:- import flora_display_feedback/1 from flrdisplay.

:- import
	flora_handle_trace/0,
	flora_handle_notrace/0,
	flora_switch/1
   from flrdebugger.



/********************************************************************/
fllibshellans(Gs,NVs) :-
	flora_switch(all),
	!,
	flora_print_all(Gs,NVs).

fllibshellans(Gs,NVs) :-
	flora_print_one(Gs,NVs).


/********************************************************************/
fllibprogramans(Gs,NVs) :-
	flora_print_all(Gs,NVs).
/* The business of getting just one answer from a program query 
 * needs to be rethought. */
/*
	flora_switch(all),
	!,
	flora_print_all(Gs,NVs).

fllibprogramans(Gs,NVs) :-
	flora_print_one(Gs,NVs).
*/


/********************************************************************
  NVs is a list of output variables
  Gs is a list of goals to evaluate
********************************************************************/
flora_print_all(Gs,NVs) :-
	NVs == [],
	!,
	cputime(T0),
	( flora_call(Gs,NVs,XWamState),
	    close_open_tables
	->
	    (
	      cputime(T1),
	      T is T1-T0,
	      ( flora_switch(chatter) ->
		  flora_stdfdbk_string('~nElapsed time ~w seconds~n', [T])
	      ; true
	      ),
	      flora_write_Yes_or_Unknown(XWamState)
	    ),
	    fail
	;
	    flora_write_No
	).

flora_print_all(Gs,NVs) :-
	cputime(T0),
	%% Construct a temporary trie-indexed predicate, FL_QUERY_PREDICATE
	%% All answers are asserted into that predicate.
	%% Since it is trie-indexed, duplicates are deleted.
	%% Reason: some answer lists might have thousands and
	%% millions of items, which takes a long time to sort. Sometimes
	%% sort runs out of memory and crashes XSB. 
	%% Having a trie-asserted query predicate adds a very small
	%% penalty to each query, but overall speeds up 
	%% returning the answers, and sometimes avoids crashes.
	QueryTemplate =.. [FL_QUERY_PREDICATE|NVs],
	length(NVs,QueryArity),
	dynamic(FL_QUERY_PREDICATE/QueryArity),
	index(FL_QUERY_PREDICATE/QueryArity,trie),
	
	flora_call_hooks(_Mod,QUERYHOOK,QueryTemplate,before,AroundHookLink),
	catch(
	      flora_findall((NVs,XWamState),
			    (flora_call(Gs,NVs,XWamState),
				(\+ QueryTemplate -> assert(QueryTemplate))
			    ),
			    TempL
			   ),
	      Exception,
	      flranswer_all_answers_query_handler(Exception,QueryTemplate,AroundHookLink)
	     ),
	cputime(T1),
	T is T1-T0,
	flora_call_hooks(_Mod,QUERYHOOK,QueryTemplate,after,AroundHookLink),
	flora_reclaim_storage_space,
	abolish(FL_QUERY_PREDICATE/QueryArity),
	sort(TempL,L),
	( L = [] -> flora_write_No, fail
	;
	    flora_write_matches(L),
	    ( flora_switch(chatter) ->
		length(L,N),
		flora_stdfdbk_string('~n~w solution(s) in ~w seconds~n', [N,T])
	    ;
		true
	    ),
	    flora_write_Yes,
	    !,
	    fail
	).


/********************************************************************/
flora_print_one(Gs,NVs) :-
	NVs == [],
	!,
	(flora_call(Gs,NVs,XWamState)
	->
	    flora_write_Yes_or_Unknown(XWamState)
	;
	    flora_write_No
	).
flora_print_one(Gs,NVs) :-
	    ( flora_call(Gs,NVs,XWamState),
		flora_write_pairs(NVs,XWamState),
		flora_fail_unless_return
	    ;
		flora_write_No
	    ),
	    flora_reclaim_storage_space.


/********************************************************************/
/*
flora_if_then_else(Condition,Then,_Else) :-
	call(Condition),
	call(Then).

flora_if_then_else(_Condition,_Then,Else) :-
	call(Else).
*/


/********************************************************************/
%% If the user types RETURN, then succeed. Otherwise, assume the user wants
%% more answers, so fail in order to provide another answer.
flora_fail_unless_return :- 
	get0(C),
	(C =:= CH_NEWLINE; C =:= CH_EOF_P), !,
	flora_write_Yes.
flora_fail_unless_return :- flora_fail_unless_return, fail.


/********************************************************************/
flora_write_Yes :- flora_stdfdbk_line('~nYes~n').
flora_write_No  :- flora_stdfdbk_line('~nNo~n').
flora_write_Yes_or_Unknown(XWamState) :-
	(XWamState =:= 0 -> flora_stdfdbk_line('~nYes~n')
	; flora_stdfdbk_line('~nYes  - unknown~n')
	).

/********************************************************************/
%% Hookup to the Flora debugger
%% flora_call is a wrapper around XSB call
%% Used only in top-level queries
%% If XWamState = 0, the answer is true. Otherwise: undefined
flora_call(Goal,NVs,XWamState) :- 
    	flora_handle_trace,
    	call(Goal),
	xwam_state(DELAY_REG,XWamState),
	FLDELAYSUPPORTMOD:FLORA_DELAY_CHECKER(NVs,[]),
	flora_commit_storage,
	flora_handle_end_of_call.

flora_call(_Goal,_NVs,_XWamState) :-
	flora_handle_notrace,
	fail.


/********************************************************************/
flora_write_matches([]).

flora_write_matches([(M,XWamState)|Ms]) :-
	flora_write_pairs(M,XWamState),
	flora_stdfdbk_nl,
	flora_write_matches(Ms).


flora_write_pairs([],_).

flora_write_pairs([N=V|NVs],XWamState) :-
	flora_stdfdbk_nl,
	flora_stdfdbk_string('~w = ',[N]),
	flora_display_feedback(V),
	flora_write_if_undefined(XWamState),
	flora_write_pairs(NVs,XWamState).

flora_write_if_undefined(XWamState) :-
	(XWamState =:= 0 -> true
	; flora_stdfdbk_string('  - unknown')
	).


/********************************************************************/
%% This turns off trace, so that flora internal stuff done after a
%% subgoal call won''t be traced. However, on backtracking, this turns
%% trace on and fails, thereby allowing to backtrack over the previous
%% subgoal.
flora_handle_end_of_call :- flora_handle_notrace.
flora_handle_end_of_call :- flora_handle_trace, fail.

/********************************************************************/

/********************************************************************
    filters to get rid of some classes
********************************************************************/

flora_noncomposite_class(C) :-
	C \= (_;C1), var(C1), C \= (C2;_), var(C2),
	C \= (_,C3), var(C3), C \= (C4,_), var(C4),
	C \= (_ - C5), var(C5), C \= (C6 - _), var(C6).

flora_nonbuiltin_class(C) :- \+flora_builtin_datatype(C).


%% clean up after query, if error
flranswer_all_answers_query_handler(Exception,QueryTemplate,AroundHookLink) :-
	flora_call_hooks(_Mod,QUERYHOOK,QueryTemplate,after,AroundHookLink),
	flora_reclaim_storage_space,
	retractall(QueryTemplate),
	%%abolish(QueryTemplate),
	throw(Exception).

flranswer_all_answers_query_handler_new(Exception,QueryTemplate,AroundHookLink) :-
	flora_call_hooks(_Mod,QUERYHOOK,QueryTemplate,after,AroundHookLink),
	flora_reclaim_storage_space,
	storage_delete_all(FLRANSWER_TRUE_TRIE),
	storage_delete_all(FLRANSWER_UNDEF_TRIE),
	throw(Exception).

flranswer_one_answer_query_handler_new(Exception,QueryTemplate,AroundHookLink) :-
	flora_call_hooks(_Mod,QUERYHOOK,QueryTemplate,after,AroundHookLink),
	flora_reclaim_storage_space,
	throw(Exception).


%% to silence the tracer
flora_findall(X,Y,Z) :- findall(X,Y,Z).


/****************************************************************************
TODO: rewrite flora_print_all using this more efficient predicate

      flora_collect_all(+Goal,+NameVarPairList,?TrueAnswers,?UndefinedAnswers,?Exception)

      Goal:            a reified goal
      NameVarPairList: a list of the form
                       [VarName1=val1, VarName2=val2,...]
      TrueAnswers/UndefinedAnswers:
                       lists of Prolog terms of the form
                       answer(Var1=val1,Var2=val2,...),
		       one for true answers and one for the undefined ones.

      If either TrueAnswers or UndefinedAnswers is a nonvar, then the
      corresponding argument is not touched. This is provided in order to
      minimize communication over slow links, like HTTP or sockets, in case
      either true or undefined answers are not required.

      This predicate always succeeds. If the query has no answers,
      both TrueAnswers and UndefinedAnswers are bound to [] 
      (unless they were bound at the call time; in this case,
      they retain their original bindings).

      This is used for other applications that wish to call
      FLORA-2 and get all results
*****************************************************************************/
flora_collect_all(Gs,NVs,TrueAns,UndefAns,Exception) :-
	NVs == [],
	!,
	flora_call_hooks(_Mod,QUERYHOOK,Gs,before,AroundHookLink),
	(catch(flora_call(Gs,NVs,XWamState),
	       Exception,
	       flranswer_one_answer_query_handler_new(Exception,
						      Gs,
						      AroundHookLink)
	      ),
	    close_open_tables,
	    (XWamState=:=0
	    -> storage_insert_fact(FLRANSWER_TRUE_TRIE,FLRANSWER_FUNCTOR,_)
	    ; storage_insert_fact(FLRANSWER_UNDEF_TRIE,FLRANSWER_FUNCTOR,_)
	    ),
	    fail
	; true
	),
	(var(TrueAns)
	-> flora_findall(X,storage_find_fact(FLRANSWER_TRUE_TRIE,X),TrueAns)
	; true
	),
	(var(UndefAns)
	-> flora_findall(X,storage_find_fact(FLRANSWER_UNDEF_TRIE,X),UndefAns)
	; true
	),
	flora_call_hooks(_Mod,QUERYHOOK,Gs,after,AroundHookLink),
	flora_reclaim_storage_space,
	storage_delete_all(FLRANSWER_TRUE_TRIE),
	storage_delete_all(FLRANSWER_UNDEF_TRIE).


flora_collect_all(Gs,NVs,TrueAns,UndefAns,Exception) :-
	%% All answers are asserted into temp tries for true/undefined answers.
	%% Since these are tries, duplicates are deleted.
	%% Rationale: some answer lists might have hundreds of thousands
	%% items, which takes a long time to collect and sort.
	%% Sometimes sorting runs out of memory and crashes XSB. 
	%% Dealing with tries adds a very small overhead to each query, but
	%% overall speeds up returning the answers and often avoids crashes.
	QueryTemplate =.. [FLRANSWER_FUNCTOR|NVs],
	
	flora_call_hooks(_Mod,QUERYHOOK,QueryTemplate,before,AroundHookLink),
	catch(
	      (flora_call(Gs,NVs,XWamState),
		  (XWamState=:=0
		  -> storage_insert_fact(FLRANSWER_TRUE_TRIE,QueryTemplate,_)
		  ; storage_insert_fact(FLRANSWER_UNDEF_TRIE,QueryTemplate,_)
		  ),
		  fail
	      ; true
	      ),
	      Exception,
	      flranswer_all_answers_query_handler_new(Exception,
	                                              QueryTemplate,
						      AroundHookLink)
	     ),
	(var(Exception) ->  Exception = FLORA_NORMAL
	; true
	),
	close_open_tables,
	(var(TrueAns)
	-> flora_findall(X,storage_find_fact(FLRANSWER_TRUE_TRIE,X),TrueAns1),
	    sort(TrueAns1,TrueAns)
	; true
	),
	(var(UndefAns)
	-> flora_findall(X,storage_find_fact(FLRANSWER_UNDEF_TRIE,X),UndefAns1),
	    sort(UndefAns1,UndefAns)
	; true
	),
	flora_call_hooks(_Mod,QUERYHOOK,QueryTemplate,after,AroundHookLink),
	flora_reclaim_storage_space,
	storage_delete_all(FLRANSWER_TRUE_TRIE),
	storage_delete_all(FLRANSWER_UNDEF_TRIE).



/*
%% less efficient version
flora_collect_all(Gs,NVs,TrueAns,UndefAns) :-
	%% Construct a temporary trie-indexed predicate, FL_QUERY_PREDICATE
	%% All answers are asserted into that predicate.
	%% Since it is trie-indexed, duplicates are deleted.
	%% Reason: some answer lists might have thousands or
	%% millions of items, which takes a long time to sort. Sometimes
	%% sort runs out of memory and crashes XSB. 
	%% Having a trie-asserted query predicate adds a very small
	%% penalty to each query, but overall speeds up 
	%% returning the answers, and sometimes avoids crashes.
	QueryTemplate =.. [FL_QUERY_PREDICATE,_|NVs], %% 1st arg = truth value
	length([_|NVs],QueryArity),
	dynamic(FL_QUERY_PREDICATE/QueryArity),
	index(FL_QUERY_PREDICATE/QueryArity,trie),
	
	flora_call_hooks(_Mod,QUERYHOOK,QueryTemplate,before,AroundHookLink),
	catch(
	      (flora_call(Gs,NVs,XWamState),
		  (XWamState=:=0 -> TVal=0 ; TVal=1),
		  arg(1,QueryTemplate,TVal), %% bind arg 1 to truth value
		  assert(QueryTemplate),
		  fail
	      ; true
	      ),
	      Exception,
	      flranswer_all_answers_query_handler(Exception,QueryTemplate,AroundHookLink)
	     ),
	(var(TrueAns)
	->
	    functor(TrueTemplate,FL_QUERY_PREDICATE,QueryArity),
	    arg(1,TrueTemplate,0), %% select only true answers
	    flora_findall(TrueTemplate, TrueTemplate, TrueAns1),
	    sort(TrueAns1,TrueAns)
	; true
	),
	(var(UndefAns)
	->
	    functor(UndefTemplate,FL_QUERY_PREDICATE,QueryArity),
	    arg(1,UndefTemplate,1), %% select only undef answers
	    flora_findall(UndefTemplate, UndefTemplate, UndefAns1),
	    sort(UndefAns1,UndefAns)
	; true
	),
	flora_call_hooks(_Mod,QUERYHOOK,QueryTemplate,after,AroundHookLink),
	flora_reclaim_storage_space,
	abolish(FL_QUERY_PREDICATE/QueryArity),
	( TrueAns == [], UndefAns == [] -> fail
	;
	    true
	).

*/

