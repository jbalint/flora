/* File:      flrshell.P  -- The Flora interactive shell
**
** Author(s): Guizhen Yang
**            Michael Kifer
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2010.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/



:- compiler_options([xpp_on]).
#include "extensions_xsb.h"

#include "flora_exceptions.flh"
#include "flora_terms.flh"
#include "flora_porting.flh"

/*********************************************************************/
flora_shell_loop :-
	flora_init_shell,
	repeat,
	catch(flora_shell_loop_body,
	      Exception,
	      flora_shell_loop_handler(Exception)).

flora_shell_loop_body :-
	(flora_banner_control(noprompt) ; flora_shell_prompt),
	flora_shell_command_line(Code,Options,Status),
	( flora_good_command(Status) ->
	    findall(SysLibOp,member(FLSYSLIB(SysLibOp),Options),SysLibList),
	    flora_load_library(SysLibList),
	    findall(SysModOp,member(FLSYSMOD(SysModOp),Options),SysModList),
	    flora_load_system_module(SysModList),
	    call(Code)
	;
	  true
        ),
	flora_loop_guard(Status).


flora_shell_loop_handler(Error) :-
	var(Error),
	!,
	flora_error_line('Unbound variable thrown as exception - caught'), 
	flora_stderr_nl,
	fail.
%% If end_of_flora_shell was thrown then true (exit)
%% Othewrwise - fail (continue the loop)
flora_shell_loop_handler(END_OF_FLORA_SHELL) :-
	!.
flora_shell_loop_handler(FLORA_CMD_LINE_ARGUMENT_DONE) :-
	!,
	fail.
flora_shell_loop_handler(FLORA_TOP_LEVEL) :-
	!,
	fail.

flora_shell_loop_handler(error(undefined_predicate(PredName,Arity,Module),_Msg,Trace)) :-
	close_open_tables,
	print_backtrace(Trace),
	flora_undefined_predicate_hook(PredName,Arity,Module),
	!,
	fail.
flora_shell_loop_handler(error(existence_error(module,Module),_Msg,Trace)) :-
	close_open_tables,
	print_backtrace(Trace),
	flora_error_line('attempt to call a Prolog predicate in a not found module `~w''',
			 [Module]),
	!,
	fail.
flora_shell_loop_handler(error(existence_error(procedure,Module:PredName/Arity),_Msg,Trace)) :-
	close_open_tables,
	print_backtrace(Trace),
	flora_undefined_predicate_hook(PredName,Arity,Module),
	!,
	fail.

flora_shell_loop_handler(FLORA_ABORT(Trace)) :-
	!,
	flora_stderr_string('++Abort[FLORA]'),
	flora_stderr_nl,
	print_backtrace(Trace),
	fail.

%% When user abort - don't print the trace
flora_shell_loop_handler(FLORA_USER_ABORT(Msg,_Trace)) :-
	!,
	(Msg == ''
	-> flora_stderr_string('++Abort[USER]')
	;  flora_stderr_string('++Abort[USER]> ~w', [Msg])
	),
	flora_stderr_nl,
	fail.

%% Silent abort: print nothing
flora_shell_loop_handler(FLORA_SILENT_ABORT(_Msg,_Trace)) :-
	!,
	fail.

flora_shell_loop_handler(FLORA_ABORT(Msg,_Trace)) :-
	!,
	(Msg = FLORA_NOT_EXPORTED_EXCEPTION(_,ErrorMsg), !
	; Msg = FLORA_UNDEFINED_EXCEPTION(_,ErrorMsg), !
	; Msg = FLORA_DB_EXCEPTION(ErrorMsg), !
	; Msg = ErrorMsg
	),
	flora_stderr_string('++Abort[FLORA]> ~w', [ErrorMsg]),
	flora_stderr_nl,
	print_backtrace(_Trace),
	fail.
flora_shell_loop_handler(Exception) :-
	default_sys_error_handler(Exception),
	!,
	fail.



/*********************************************************************/
flora_init_shell :-
	consult(flrundefhook),
	consult(flrutils),
	flora_load_library(FLLIBSHELLANS),
	flora_load_library(FLLIBLOAD),
	flora_load_library(FLLIBDISPLAY),
	flora_load_library(FLLIBIMPORTEDCALLS),
	flloadtrailer([FL_EQUALITY(NONE)],FLORA_DEFAULT_WORKSPACE),
	(flora_banner_control(nobanner) ; flora_welcome_msg),
	'_all',
	'_chatter',
	flora_set_counter(flora_shell_loaded,1),
	flora_clear_runtime_uriprefixes,  %% just a precaution
	!.


/*********************************************************************/
flora_welcome_msg :-
	flora_configuration(version,V),
	flora_stdmsg_string('~nFLORA-2 Version ~w~n~n',[V]),
	flora_stdmsg_line('Type `_help.'' to display help.'),
	flora_stdmsg_line('Type `_demo(demoName).'' to run a demo.'),
	flora_stdmsg_nl,
	!.


/*********************************************************************/
flora_shell_prompt :- flora_stdfdbk_string('flora2 ?- ').


/*********************************************************************/
%% Check for end of input
flora_loop_guard(Status) :-
	( flora_end_of_input(Status) ->
	    ( pop_stdin(cmd_line_argument) ->
		%% end of input from -e option string to XSB
		flora_stdfdbk_string('~n'),
		throw(FLORA_CMD_LINE_ARGUMENT_DONE)
	    ;
	      '_end'
	    )
	;
	    %% We have to throw -- can't fail -- because we don't want
	    %% backtracking over the executed goal. Instead, we want
	    %% to return to FLORA's top level
	    throw(FLORA_TOP_LEVEL)
	).


/*********************************************************************/
#mode save
#mode nostring "\!#'"
'_help' :-
	flora_stdmsg_line('~nFLORA shell commands:~n'),
	flora_stdmsg_line('o _help'),
	flora_stdmsg_line('    show this info'),
	flora_stdmsg_line('o _compile(FILE)'),
	flora_stdmsg_line('    compile FILE.flr for module `main'''),
	flora_stdmsg_line('o _compile(FILE>>Module)'),
	flora_stdmsg_line('    compile FILE.flr for Module'),
	flora_stdmsg_line('o _compileadd(FILE)'),
	flora_stdmsg_line('    compile FILE.flr for adding to module `main'''),
	flora_stdmsg_line('o _compileadd(FILE>>Module)'),
	flora_stdmsg_line('    compile FILE.flr for adding to Module'),
	flora_stdmsg_line('o _load(FILE>>Module)  OR  [FILE >> Module,...]'),
	flora_stdmsg_line('    load FILE.flr into Module'),
	flora_stdmsg_string('    specifying FILE.~w or FILE.~w loads these files;',
			    [PROLOG_PFILE_EXT,PROLOG_OFILE_EXT]),
	flora_stdmsg_nl,
	flora_stdmsg_line('    the [...] version can load a list of files'),
	flora_stdmsg_line('o _load(FILE)  OR  [FILE,...]'),
	flora_stdmsg_line('    load FILE.flr into module `main'''),	
	flora_stdmsg_line('o _save(Module>>FILE)'),
	flora_stdmsg_line('    save Module into FILE.flr'),
	flora_stdmsg_line('    if FILE exsits it will be replaced otherwise new FILE will be created;'),
	flora_stdmsg_line('o _save(FILE)'),
	flora_stdmsg_line('    save `main'' into FILE.flr'),	
	flora_stdmsg_line('o _add(FILE>>Module)  OR  [+FILE >> Module,...]'),
	flora_stdmsg_line('    add FILE.flr to Module'),
	flora_stdmsg_line('    the [...] version can add a list of files'),
	flora_stdmsg_line('o _add(FILE)  OR  [+FILE,...]'),
	flora_stdmsg_line('    add FILE.flr to module `main'''),
	flora_stdmsg_line('    one can mix adding and loading: [+FILE1>>Module1, FILE2]'),
	flora_stdmsg_line('o _demo(FILE)'),
	flora_stdmsg_line('    run a demo from FLORA demos directory'),
	flora_stdmsg_line('o _op(Precedence,Associativity,Operator)'),
	flora_stdmsg_line('    define an operator in shell mode'),
	flora_stdmsg_line('o abolish_all_tables'),
	flora_stdmsg_line('    flush all tabled data'),
	flora_stdmsg_line('    in the FLORA shell'),
	flora_stdmsg_line('o _all'),
	flora_stdmsg_line('    show all solutions (default)'),
	flora_stdmsg_line('o _one'),
	flora_stdmsg_line('    show solutions one by one'),
	flora_stdmsg_line('o _trace/_notrace'),
	flora_stdmsg_line('    turn on/off FLORA trace'),
	flora_stdmsg_line('o _chatter/_nochatter'),
	flora_stdmsg_line('    Turn on/off the display of the number of solutions at the end of query evaluation'),
	flora_stdmsg_line('o _warnings(TYPE)'),
	flora_stdmsg_line('    control warnings: all - all warnings, off - no warnings'),
	flora_stdmsg_line('                      compiler: compiler warnings only'),
	flora_stdmsg_line('                      dependency: dependency warnings only'),
	flora_stdmsg_line('o _end'),
	flora_stdmsg_line('    say Ciao to FLORA, stay in Prolog'),
	flora_stdmsg_line('o _halt'),
	flora_stdmsg_line('    quit both FLORA and Prolog').
#mode restore


/*********************************************************************/
flora_reset(X) :-
	var(X),
	!,
	flora_error_line('invalid argument to flora_reset'),
	fail.

flora_reset(FL_OP) :- !, flora_shreset_operator.

flora_reset(_) :-
	flora_error_line('invalid argument to flora_reset'),
	!,
	fail.


/*********************************************************************/
'_all' :-
	( flora_switch(all) -> true
	;
	  assert(flora_switch(all))
	).

'_one' :-
	retractall(flora_switch(all)).


/*********************************************************************/
'_end' :-
	unstrap_flora,
	flora_call_hooks(_Module,EXITFLORA,_Param,before,_AroundHookLink),
	flora_stdmsg_line('~n~nCiao!'),
	throw(END_OF_FLORA_SHELL).

'_halt' :- halt.


/*********************************************************************/
%% This is needed so we could designate this predicate as unprintable 
%% by the debugger and avoid traicing inside 
%% assert(flora_switch(low_level_trace))
flora_set_switch(Switch) :-
	assert(flora_switch(Switch)).
/*********************************************************************/
%% Enable Flora high-level debugging
'_trace' :- flora_trace.
'_notrace' :- 
	make_trace_interactive,
	flora_notrace.

%% Dumps profile into File
'_trace'(File) :-
	dump_trace_to_file(File),
	'_trace'.

%% Enables low-level Prolog debugging
'_tracelow' :-
	'_trace',
	flora_set_switch(low_level_trace).
'_tracelow'(File) :-
	'_trace'(File),
	flora_set_switch(low_level_trace).
'_notracelow' :-
	'_notrace',
	retractall(flora_switch(low_level_trace)).


dump_trace_to_file(File) :-
	debug_ctl(prompt,off),
	debug_ctl(profile,on),
	debug_ctl(redirect,File).
make_trace_interactive :-
	debug_ctl(prompt,on),
	debug_ctl(profile,off),
	debug_ctl(redirect,tty).



/*********************************************************************/
'_chatter' :- flora_set_switch(chatter).
'_nochatter' :- retractall(flora_switch(chatter)).


/*********************************************************************/
'_demo'(File) :-
	flora_check_filename(File),
	flora_configuration(installdir,FloraDir),
	flora_slash(Slash),
	%% Add the demo directory to the module search path
	flora_concat_atoms([FloraDir,Slash,'demos'],DemoDir),
	( flora_module_path_get(DemoDir) ->
	    true
	; flora_module_path_add(DemoDir)
	),
	cwd(CurrWorkingDir),
	cd(DemoDir),
	flora_load_module_internal(File),
	cd(CurrWorkingDir),
	flora_module_path_remove(DemoDir).
/*********************************************************************/

%% Control warnings level

'_warnings'(X) :- 
        var(X),
	!,
	flora_warnings_level(X).
'_warnings'(off) :- 
	retractall(flora_warnings(_)),
	assert(flora_warnings_level(nocompiler)),
	assert(flora_warnings_level(nodependency)).
'_warnings'(all) :-
	retractall(flora_warnings_level(_)).
'_warnings'(compiler) :-
	'_warnings'(off),
        retract(flora_warnings_level(nocompiler)).
'_warnings'(dependency) :-
	'_warnings'(off),
        retract(flora_warnings_level(nodependency)).
'_warnings'(X) :- 
	flora_error_line('invalid warnings control option: ~w', [X]),
	throw(FLORA_TOP_LEVEL).


%% Control tabling method
'_tabling'(X) :-
        %% this case is for debugging.
        var(X),
	!,
	flora_stdmsg_line('Tabling regimes in various loaded modules:'),
	(flora_tabling_method(Mod,Meth),
	    flora_stdmsg_line('    Module ~w: ~w',[Mod,Meth]),
	    flrwrapper:flora_module_predicate(WRAP_SUB,[_,_,_],Mod,SubPred),
	    flrwrapper:flora_module_predicate(WRAP_IMVD,[_,_,_,_],Mod,MvdPred),
	    flrwrapper:flora_module_predicate(WRAP_TABLED_HILOG,[_,_],Mod,Hilog2Pred),
	    flrwrapper:flora_module_predicate(WRAP_TABLED_HILOG,[_,_,_],Mod,Hilog3Pred),
	    (SubPred, ! ; true),
	    (MvdPred, ! ; true),
	    (Hilog2Pred, ! ; true),
	    (Hilog3Pred, ! ; true),
	    tables:get_calls(SubPred,SubHandle,_),
	    tables:table_state(SubHandle,TablingSub,_,_),
	    tables:get_calls(MvdPred,MvdHandle,_),
	    tables:table_state(MvdHandle,TablingMvd,_,_),
	    tables:get_calls(Hilog2Pred,Handle2,_),
	    tables:table_state(Handle2,Tabling2,_,_),
	    tables:get_calls(Hilog3Pred,Handle3,_),
	    tables:table_state(Handle3,Tabling3,_,_),
	    flora_stdmsg_line('    ~w: ~w',[SubPred,TablingSub]),
	    flora_stdmsg_line('    ~w: ~w',[MvdPred,TablingMvd]),
	    flora_stdmsg_line('    ~w: ~w',[Hilog2Pred,Tabling2]),
	    flora_stdmsg_line('    ~w: ~w',[Hilog3Pred,Tabling3]),
	    fail
	;
	    abolish_all_tables
	).
	
'_tabling'(Method) :-
	flora_module_registry(Module),
	'_tabling'(Module,Method),
	fail.
'_tabling'(_Method).

%% Method=subsumptive/variant
'_tabling'(Module,Method) :-
        (Method == variant ; Method = subsumptive),
	!,
        retractall(flora_tabling_method(Module,_)),
	assert(flora_tabling_method(Module,Method)),
	reload_module_trailer_for_tabling(Module,Method).
'_tabling'(Module,Method) :-
	flora_error_line('invalid tabling method ~w requested for module ~w',
			 [Method,Module]),
	throw(FLORA_TOP_LEVEL).

reload_module_trailer_for_tabling(Module,Method) :-
	fltrailersemantics(Options,Module),
	flrporting:flora_delete_from_list(FL_TABLING(_),Options,NewOpt),
	flloadtrailer([FL_TABLING(Method)|NewOpt],Module).
