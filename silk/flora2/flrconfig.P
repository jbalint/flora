
/* File:      flrconfig.P  -- Capture Prolog and Flora installation directories
**
** Author(s): Michael Kifer
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2010.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/


:- compiler_options([xpp_on]).


#define CH_BACKSLASH   	     92	      /*  \     */

%% Records Prolog and Flora installation directories

:- import path_sysop/3 from file_io.
:- import xsb_configuration/2 from xsb_configuration.

:- import
	flora_slash/1,
	flora_concat_atoms/2,
	flora_running_under/1,
	flora_user_floradir/1,
	flora_file_op/3,
	flora_double_backslash/2,
	flora_convert_backslash_to_forward/2,
	flora_convert_win_path_to_cygwin/2
   from flrporting.


:- import shell/1 from shell.
:- import get_date/6 from standard.

?- path_sysop(expand,'.',FloraDirPrelim),
   PrologOptions = '-m 2000000 -c 50000',  % to experiment with performance
   xsb_configuration(install_dir,InstallDirPrelim),
   xsb_configuration(config_bindir,ConfigBinDirPrelim),
   xsb_configuration(user_home,UserHome),
   (flora_running_under(windows)
   ->  PrologPath = '.prolog_path_wind',
       ConfigBinDir = ConfigBinDirPrelim,
       InstallDir = InstallDirPrelim,
       FloraDir = FloraDirPrelim
   ; flora_running_under(cygwin)
   ->  PrologPath = '.prolog_path_cygwin',
       flora_convert_win_path_to_cygwin(ConfigBinDirPrelim,ConfigBinDir),
       flora_convert_win_path_to_cygwin(InstallDirPrelim,InstallDir),
       flora_convert_win_path_to_cygwin(FloraDirPrelim,FloraDir)
   ;
       PrologPath = '.prolog_path',
       ConfigBinDir = ConfigBinDirPrelim,
       InstallDir = InstallDirPrelim,
       FloraDir = FloraDirPrelim
   ),
   asserta(library_directory(FloraDir)),
   telling(F),
   tell(PrologPath),
   (flora_running_under(windows)
   -> write('PROLOG='), write(ConfigBinDir), writeln('\\xsb'),
       write('PROLOGDIR='), writeln(InstallDir),
       flora_user_floradir(FloraTmpDir),
       %% does not seem that the shell understands wildcards in this context
       shell(['if exist "', FloraTmpDir, '\\*.P"    erase "', FloraTmpDir, '\\*.P"']),
       shell(['if exist "', FloraTmpDir, '\\*.xwam" erase "', FloraTmpDir, '\\*.xwam"'])
   ;
       %% Important not to use writeln here - only write('...\n')!!!
       %% Otherwise, it will have ^M at the end and unix shell will get confused
       write(InstallDir), write('/bin\n')
   ),
   told,
   (flora_running_under(windows)
   -> tell('runflora.bat'),
       writeln('@echo OFF'),
       write('@set FLORADIR="'), writeq(FloraDir), writeln('"'),
       write('@set PROLOG='), write(ConfigBinDir), writeln('\\xsb'),
       write('REM @set PROLOGOPTIONS="'), write(PrologOptions), writeln('"'),
       write('REM @set PROLOGOPTIONS="-p '), write(PrologOptions), writeln('"'),
       writeln('REM @set PROLOGOPTIONS="-p"'),
       writeln('REM @set PROFILING="xsb_profiling:profile_unindexed_calls(on)."'),
       writeln('@%PROLOG% %PROLOGOPTIONS% -e "%PROFILING% asserta(library_directory(%FLORADIR%)). [flora2]. flora_shell." %1 %2 %3 %4 %5 %6 %7')
   ;
       tell('runflora'),
       %% Use write with \n instead of writeln to avoid the extra ^M in Cygwin
       write('#! /bin/sh\n\n'),
       write('if test ! "$*" = ""; then\n'),
       write('    extra_args="$*"\n'),
       write('fi\n\n'),
       write('FLORADIR="'),
       (flora_running_under(cygwin)
       ->
           flora_double_backslash(FloraDir,CygwinFloraDir),
           writeq(CygwinFloraDir)
       ;
           writeq(FloraDir)
       ),
       write('"\n'),
       write('PROLOG='), write(InstallDir), write('/bin/xsb\n'),
       write('#PROLOGOPTIONS="'), write(PrologOptions), write('"\n'),
       write('#PROLOGOPTIONS="-p '), write(PrologOptions), write('"\n'),
       write('#PROLOGOPTIONS="-p"\n'),
       write('#PROFILING="xsb_profiling:profile_unindexed_calls(on)."\n'),
       write('$PROLOG $PROLOGOPTIONS -e "$PROFILING asserta(library_directory($FLORADIR)). [flora2]. flora_shell." $extra_args\n')
   ),
   told,
   %% If we are in the packages/flora2 directory and ../../emu exists, then
   %% we are installing as a package; otherwise - standalone
   flora_slash(Slash),
   (flora_running_under(windows)
   -> flora_concat_atoms([FloraDir,Slash,platforms,Slash,
			  windows,Slash,'floraInstallMode.P'],
			 FloraInstallModeFile)
   ; flora_running_under(cygwin)
   -> flora_concat_atoms([FloraDir,Slash,platforms,Slash,
			  cygwin,Slash,'floraInstallMode.P'],
			 FloraInstallModeFile)
   ;  flora_concat_atoms([FloraDir,Slash,platforms,Slash,
			  unix,Slash,'floraInstallMode.P'],
			 FloraInstallModeFile)
   ),
   tell(FloraInstallModeFile),
   writeln(':- import flora_configuration/2 from flrregistry.'),
   flora_concat_atoms([InstallDir,Slash,packages,Slash,flora2],FloraPkgDir),
   flora_file_op(expand,FloraPkgDir,FloraPkgDirExpanded),
   flora_file_op(expand,FloraDir,FloraDirExpanded),
   (FloraDirExpanded = FloraPkgDirExpanded
   %% We now load floraInstallMode.P dynamically
   %% so as to not compile the installation dir into binary code.
   ->  %% installing as a package
       writeln('flora_configuration(standalone,no).')
   ;
       writeln('flora_configuration(standalone,yes).')
   ),
   write('flora_configuration(installdir,'),
   writeq(FloraDirExpanded),
   writeln(').'),
   get_date(Yr,Mon,Day,_,_,_),
   write('flora_configuration(builddate,'''),
   write(Yr), write('-'), write(Mon), write('-'), write(Day),
   writeln(''').'),
   told,
   %% set up the variables for Java
   (flora_running_under(windows)
   -> tell('java\\flora_settings.bat'),
       flora_convert_backslash_to_forward(FloraDir,FloraDirForwShash),
       flora_convert_backslash_to_forward(ConfigBinDir,ConfigBinDirForwSlash),
       writeln('@echo OFF'),
       write('@set FLORADIR='), writeln(FloraDirForwShash),
       write('@set PROLOGDIR='), writeln(ConfigBinDirForwSlash)
   ; tell('java/flora_settings.sh'),
       write('FLORADIR='),
       (flora_running_under(cygwin)
       ->
           writeln(CygwinFloraDir)
       ;
           writeln(FloraDir)
       ),
       write('PROLOGDIR='), writeln(ConfigBinDir)
   ),
   tell(F).
