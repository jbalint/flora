:- use_argumentation_theory{ogcle} .
?- [ogclpe>>ogcle] .
:- iriprefix silkb = "http://vulcan.com/2008/silk-builtins#" .
:- iriprefix dc = "http://purl.org/dc/elements/1.1/" .

//SWRLB
%"http://www.w3.org/2003/11/swrlb#add"^^_iri(?output, ?input1, ?input2) :- addBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#abs"^^_iri(?output, ?input1) :- absBP1(?output, ?input1)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#ceiling"^^_iri(?output, ?input1) :- ceilingBP1(?output, ?input1)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#cos"^^_iri(?output, ?input1) :- cosBP1(?output, ?input1)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#divide"^^_iri(?output, ?input1, ?input2) :- divideBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#floor"^^_iri(?output, ?input1) :- floorBP1(?output, ?input1)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#integerDivide"^^_iri(?output, ?input1, ?input2) :- integerDivideBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#mod"^^_iri(?output, ?input1, ?input2) :- modBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#multiply"^^_iri(?output, ?input1, ?input2) :- multiplyBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#pow"^^_iri(?output, ?input1, ?input2) :- powBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#round"^^_iri(?output, ?input1) :- roundBP1(?output, ?input1)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#roundHalfToEven"^^_iri(?output, ?input1) :- roundHalfToEvenBP1(?output, ?input1)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#sin"^^_iri(?output, ?input1) :- sinBP1(?output, ?input1)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtract"^^_iri(?output, ?input1, ?input2) :- subtractBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#tan"^^_iri(?output, ?input1) :- tanBP1(?output, ?input1)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#unaryMinus"^^_iri(?output, ?input1) :- unaryMinusBP1(?output, ?input1)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#unaryPlus"^^_iri(?output, ?input1) :- unaryPlusBP1(?output, ?input1)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#addDayTimeDurations"^^_iri(?output, ?input1, ?input2) :- addDayTimeDurationsBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#addDayTimeDurationToDate"^^_iri(?output, ?input1, ?input2) :- addDayTimeDurationToDateBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#addDayTimeDurationToDateTime"^^_iri(?output, ?input1, ?input2) :- addDayTimeDurationToDateTimeBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#addDayTimeDurationToTime"^^_iri(?output, ?input1, ?input2) :- addDayTimeDurationToTimeBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#addYearMonthDurations"^^_iri(?output, ?input1, ?input2) :- addYearMonthDurationsBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#addYearMonthDurationToDate"^^_iri(?output, ?input1, ?input2) :- addYearMonthDurationToDateBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#addYearMonthDurationToDateTime"^^_iri(?output, ?input1, ?input2) :- addYearMonthDurationToDateTimeBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#date"^^_iri(?output, ?year, ?month, ?day, ?timeZone) :- dateBP1(?output, ?year, ?month, ?day, ?timeZone)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#dateTime"^^_iri(?output, ?year, ?month, ?day, ?hours, ?minutes, ?seconds, ?timeZone) :- dateTimeBP1(?output, ?year, ?month, ?day, ?hours, ?minutes, ?seconds, ?timeZone)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#dayTimeDuration"^^_iri(?output, ?days, ?hours, ?minutes, ?seconds) :- dayTimeDurationBP1(?output, ?days, ?hours, ?minutes, ?seconds)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#divideDayTimeDuration"^^_iri(?output, ?input1, ?input2) :- divideDayTimeDurationBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#divideYearMonthDuration"^^_iri(?output, ?input1, ?input2) :- divideYearMonthDurationBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#multiplyDayTimeDuration"^^_iri(?output, ?input1, ?input2) :- multiplyDayTimeDurationBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#multiplyYearMonthDuration"^^_iri(?output, ?input1, ?input2) :- multiplyYearMonthDurationBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractDates"^^_iri(?output, ?input1, ?input2) :- subtractDatesBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractDateTimesYieldingDayTimeDuration"^^_iri(?output, ?input1, ?input2) :- subtractDateTimesYieldingDayTimeDurationBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractDateTimesYieldingYearMonthDuration"^^_iri(?output, ?input1, ?input2) :- subtractDateTimesYieldingYearMonthDurationBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractDayTimeDurationFromDate"^^_iri(?output, ?input1, ?input2) :- subtractDayTimeDurationFromDateBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractDayTimeDurationFromDateTime"^^_iri(?output, ?input1, ?input2) :- subtractDayTimeDurationFromDateTimeBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractDayTimeDurationFromTime"^^_iri(?output, ?input1, ?input2) :- subtractDayTimeDurationFromTimeBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractDayTimeDurations"^^_iri(?output, ?input1, ?input2) :- subtractDayTimeDurationsBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractTimes"^^_iri(?output, ?input1, ?input2) :- subtractTimesBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractYearMonthDurationFromDate"^^_iri(?output, ?input1, ?input2) :- subtractYearMonthDurationFromDateBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractYearMonthDurationFromDateTime"^^_iri(?output, ?input1, ?input2) :- subtractYearMonthDurationFromDateTimeBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#subtractYearMonthDurations"^^_iri(?output, ?input1, ?input2) :- subtractYearMonthDurationsBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#time"^^_iri(?output, ?hours, ?minutes, ?seconds, ?timeZone) :- timeBP1(?output, ?hours, ?minutes, ?seconds, ?timeZone)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#yearMonthDuration"^^_iri(?output, ?years, ?months) :- yearMonthDurationBP1(?output, ?years, ?months)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#equal"^^_iri(?input1, ?input2) :- equalBP1(?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#greaterThan"^^_iri(?input1, ?input2) :- greaterThanBP1(?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#greaterThanOrEqual"^^_iri(?input1, ?input2) :- greaterThanOrEqualBP1(?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#lessThan"^^_iri(?input1, ?input2) :- lessThanBP1(?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#lessThanOrEqual"^^_iri(?input1, ?input2) :- lessThanOrEqualBP1(?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#notEqual"^^_iri(?input1, ?input2) :- notEqualBP1(?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#anyURI"^^_iri(?uri, ?protocol, ?domain, ?port, ?part1, ?part2, ?fragment) :- anyURIBP1(?uri, ?protocol, ?domain, ?port, ?part1, ?part2, ?fragment)@_prologall .
%"http://www.w3.org/2003/11/swrlb#anyURI"^^_iri(?uri, ?protocol, ?domain, ?port, ?part1, ?part2, ?fragment) :- anyURIBP2(?uri, ?protocol, ?domain, ?port, ?part1, ?part2, ?fragment)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#resolveURI"^^_iri(?output, ?input1, ?input2) :- resolveURIBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#contains"^^_iri(?input1, ?input2) :- containsBP1(?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#containsIgnoreCase"^^_iri(?input1, ?input2) :- containsIgnoreCaseBP1(?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#endsWith"^^_iri(?input1, ?input2) :- endsWithBP1(?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#lowerCase"^^_iri(?output, ?input) :- lowerCaseBP1(?output, ?input)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#matches"^^_iri(?input1, ?input2) :- matchesBP1(?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#normalizeSpace"^^_iri(?output, ?input) :- normalizeSpaceBP1(?output, ?input)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#replace"^^_iri(?output, ?input, ?regex, ?replacement) :- replaceBP1(?output, ?input, ?regex, ?replacement)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#startsWith"^^_iri(?input1, ?input2) :- startsWithBP1(?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#stringConcat"^^_iri(?output, ?input1, ?input2) :- stringConcatBP1(?output, ?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#stringEqualIgnoreCase"^^_iri(?input1, ?input2) :- stringEqualIgnoreCaseBP1(?input1, ?input2)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#stringLength"^^_iri(?output, ?input) :- stringLengthBP1(?output, ?input)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#substring"^^_iri(?output, ?input, ?start, ?length) :- substringBP1(?output, ?input, ?start, ?length)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#substringAfter"^^_iri(?output, ?input, ?start) :- substringAfterBP1(?output, ?input, ?start)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#substringBefore"^^_iri(?output, ?input, ?end) :- substringBeforeBP1(?output, ?input, ?end)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#translate"^^_iri(?output, ?input, ?replace, ?replacement) :- translateBP1(?output, ?input, ?replace, ?replacement)@_prologall .
 
%"http://www.w3.org/2003/11/swrlb#upperCase"^^_iri(?output, ?input) :- upperCaseBP1(?output, ?input)@_prologall .


//SILKB
%"http://vulcan.com/2008/silk-builtins#sendEmail"^^_iri(?smtpServer, ?from, ?to, ?subject, ?text) :- sendEmailBP1(?smtpServer, ?from, ?to, ?subject, ?text)@_prologall .
 
%"http://vulcan.com/2008/silk-builtins#writeLn"^^_iri(?input) :- writeLnBP1(?input)@_prologall .
 
%"http://vulcan.com/2008/silk-builtins#querySilkInstance"^^_iri(?outputs, ?outputsBindingOrder, ?inputs, ?url, ?template) :- querySilkInstanceBP1(?outputs, ?outputsBindingOrder, ?inputs, ?url, ?template)@_prologall .
 
%"http://vulcan.com/2008/silk-builtins#fatal"^^_iri(?loggerName, ?message) :- fatalBP1(?loggerName, ?message)@_prologall .
 
%"http://vulcan.com/2008/silk-builtins#error"^^_iri(?loggerName, ?message) :- errorBP1(?loggerName, ?message)@_prologall .
 
%"http://vulcan.com/2008/silk-builtins#warn"^^_iri(?loggerName, ?message) :- warnBP1(?loggerName, ?message)@_prologall .
 
%"http://vulcan.com/2008/silk-builtins#info"^^_iri(?loggerName, ?message) :- infoBP1(?loggerName, ?message)@_prologall .
 
%"http://vulcan.com/2008/silk-builtins#debug"^^_iri(?loggerName, ?message) :- debugBP1(?loggerName, ?message)@_prologall .
 
%"http://vulcan.com/2008/silk-builtins#trace"^^_iri(?loggerName, ?message) :- traceBP1(?loggerName, ?message)@_prologall .
 
%"http://vulcan.com/2008/silk-builtins#cycEvaluate"^^_iri(?output, ?predicate, ?arg1, ?arg2) :- cycEvaluateBP1(?output, ?predicate, ?arg1, ?arg2)@_prologall .
 
%"http://vulcan.com/2008/silk-builtins#cycQuery"^^_iri(?OutputBindings, ?query) :- cycQueryBP1(?OutputBindings, ?query)@_prologall .
 
%"http://vulcan.com/2008/silk-builtins#currentTime"^^_iri(?currentTime) :- currentTimeBP1(?currentTime)@_prologall .
 
%"http://vulcan.com/2008/silk-builtins#returnNResults"^^_iri(?OutputBindings, ?n) :- returnNResultsBP1(?OutputBindings, ?n)@_prologall .



%silkb#isDecimal(?X) :- _double[_isTypeOf(?X)]@_baseType.
   %silkb#isFloat(?X) :- float(?X)@_prolog.
   %silkb#isGround(?X) :- flora_ground(?X)@_prolog(flrtrim).
   %silkb#isInteger(?X) :- integer(?X)@_prolog.
   %silkb#isList(?X) :- is_list(?X)@_prolog.
   %silkb#isSkolem(?X) :- _isskolem(?X).
   %silkb#isString(?X) :- _string[_isTypeOf(?X)]@_baseType.
   %silkb#isSymbol(?X) :- atom(?X)@_prolog.
   %silkb#isURI(?X) :- _iri[_isTypeOf(?X)]@_baseType.
   %silkb#isVariable(?X) :- var(?X)@_prolog.
   %silkb#walltime(?X) :- walltime(?X)@_prolog .
   %silkb#writeLnFlora(?Obj) :- %writeln(?Obj)@_io .
   %silkb#isNumber(?X)  :- number(?X)@_prolog.
   %silkb#isAtom(?X)  :- atom(?X)@_prolog.

%silkb#currentPrologFlag(?Flag, ?Value) :- current_prolog_flag(?Flag, ?Value)@_prolog.
%silkb#sleep(?seconds) :- sleep(?seconds)@_prologall.
%silkb#listMember(?list, ?member) :- %silkb#isList(?list)@builtin and ?list[_member(?member)]@_basetype.
   %silkb#listLength(?list, ?length) :- %silkb#isList(?list)@builtin and ?list[_length->?length]@_basetype.