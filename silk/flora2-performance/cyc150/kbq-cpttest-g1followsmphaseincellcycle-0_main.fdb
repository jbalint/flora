/************************************************************************
  file: includes/flrheader.flh

  Author(s): Guizhen Yang
	     Michael Kifer

  Copyright (C) by
       The Research Foundation of the State University of New York, 1999-2010.

  All rights reserved.

  For information about licensing terms, please see
  http://silk.projects.semwebcentral.org/flora2-license.html

  This file is automatically included by the FLORA-2 compiler.
************************************************************************/


/************************************************************************
  Note: This file should contain Macros only!

  If FLORA_DUMP is defined: preprocessing for user-friendly output.

  If any of these macros are changed, the corresponding wrappers in
  flrwrapper.P must also be changed
************************************************************************/




/* File:      flora_prefix.flh -- FLORA-2 prefixes
**
** Author(s): Michael Kifer
**	      Guizhen Yang
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2010;
**      and Vulcan, Inc., 2008-2010.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/


/******************************************************************************
  Flora prefix

  All Flora symbols begin with this prefix.
******************************************************************************/
/* for F-logic and HiLog predicates */



/******************************************************************************
  Attaching FLORA_PREFIX

  The argument to this Macro should be quoted.
******************************************************************************/



/******************************************************************************
  Strings following FLORA_PREFIX

  These strings should be quoted.
******************************************************************************/
/* Keep "mod" in the name of a formula wrapper right after FLORA_PREFIX
   We rely on this to identify meta wrappers */



/*  Trie for keeping skeletons of defined facts -- debugging */




/******************************************************************************
  Module and trie prefixes
******************************************************************************/
/* prefix to construct Flora module predicates. */


/*  prefix to name Flora storage trie for a module. */



/* prefix to name Flora fld storage trie for a module. */



/****************************************************************************
  F-logic atom prefixes for predicates that are used to distinguish F-logic
  wrappers in the trailers, the user program, base facts, etc.
****************************************************************************/
















/******************************************************************************
  Lengths of prefixes of F-logic wrappers
******************************************************************************/



/****************************************************************************
  Prefixes that are used for F-logic wrappers in rule bodies of user programs.
  They are called "debuggin prefixes" because they were introduced to help
  implement the debugging feature that catches undefined methods.
****************************************************************************/



/* Prefixes used for checking undefinedness */



/* Corresponding 1-arg macros */

















/******************************************************************************
  Lengths of prefixes that are used in the wrappers to the left of module name

  Note: We need to remember that these prefixes are enclosed in quotes.
        But we need the actual atom length that Prolog uses. So, we deduct 2.
******************************************************************************/



/* length of FLORA_PREFIX'FLORA_MODULE_TAG */













%% support for undefinedness checks


%% used for generating new oids statically












'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('isa','genlPreds','TransitiveBinaryPredicate'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('isa','genlMt','TransitiveBinaryPredicate'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('genlMt','MicrobiologicalChemistryMt','MicrobiologyMt'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('genlMt','MicrobiologyMt','MicrobiologyVocabularyMt'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('genlMt','MolecularBiologyMt','MolecularBiologyVocabularyMt'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('commutativeInArgs','startTogetherInSituationType',2,3),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('isa','predicateIntersection','PartiallyCommutativePredicate'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('isa','startTogetherInSituationType','PartiallyCommutativePredicate'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('genlMt','CycAgencyTheoryMt','UniversalVocabularyMt'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('genlMt','BaseKB','CycAgencyTheoryMt'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('genlPreds','properSubEventTypes','properSubSituationTypes'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('genlMt','MolecularBiologyVocabularyMt','MicrobiologicalChemistryMt'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('genlMt','MicrobiologyVocabularyMt','BiologyVocabularyMt'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('genlMt','flapply'('ProprietaryMtFn','BiologyMt'),'BiologyMt'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('genlMt','BiologyVocabularyMt','flapply'('ProprietaryMtFn','BiologyMt')),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','BiologyMt','flapply'('properSubEventTypes','InterphaseOfEukaryoticCellCycle','G1Phase'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','BiologyMt','flapply'('uniqueFirstProperSubEventTypes','InterphaseOfEukaryoticCellCycle','G1Phase'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('predicateIntersection','uniqueProperSubEventTypes','uniqueProperSubSituationTypes','properSubEventTypes'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('predicateIntersection','uniqueFirstProperSubEventTypes','firstProperSubEventTypes','uniqueProperSubEventTypes'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','BiologyMt','flapply'('phasesAlternateInCycleType','TheEukaryoticCellCycle','InterphaseOfEukaryoticCellCycle','MitoticPhaseOfCellCycle'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('genlPreds','phasesAlternateInCycleType','stepFollowsStepInCycleType'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','BiologyMt','flapply'('startTogetherInSituationType','EukaryoticCellCycle','InterphaseOfEukaryoticCellCycle','G1Phase'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('genlPreds','coveringOfEventType-Nonoverlapping','coveringOfEventType'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','BiologyMt','flapply'('coveringOfEventType-Nonoverlapping','InterphaseOfEukaryoticCellCycle',['G1Phase','SPhase','G2Phase']),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','BaseKB','flapply'('iteratedSubsituationTypeOfSerialCycleType','TheEukaryoticCellCycle','EukaryoticCellCycle'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('genlMt','ReasoningToCausesFromObservationsMt','BaseKB'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('genlMt','CytologicalProcessesQueryMt','MolecularBiologyMt'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('genlMt','CytologicalProcessesQueryMt','ReasoningToCausesFromObservationsMt'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('queryMt','flapply'('MtSpace','CytologicalProcessesQueryMt','flapply'('MtTimeDimFn','Now')),[_CallerModuleVar,_CallerModuleArgsVar]).
