/************************************************************************
  file: includes/flrheader.flh

  Author(s): Guizhen Yang
	     Michael Kifer

  Copyright (C) by
       The Research Foundation of the State University of New York, 1999-2010.

  All rights reserved.

  For information about licensing terms, please see
  http://silk.projects.semwebcentral.org/flora2-license.html

  This file is automatically included by the FLORA-2 compiler.
************************************************************************/


/************************************************************************
  Note: This file should contain Macros only!

  If FLORA_DUMP is defined: preprocessing for user-friendly output.

  If any of these macros are changed, the corresponding wrappers in
  flrwrapper.P must also be changed
************************************************************************/




/* File:      flora_prefix.flh -- FLORA-2 prefixes
**
** Author(s): Michael Kifer
**	      Guizhen Yang
**
** Contact:   kifer@cs.stonybrook.edu
**
** Copyright (C) by
**      The Research Foundation of the State University of New York, 1999-2010;
**      and Vulcan, Inc., 2008-2010.
**
** All rights reserved.
**
** For information about licensing terms, please see
** http://silk.projects.semwebcentral.org/flora2-license.html
**
**
*/


/******************************************************************************
  Flora prefix

  All Flora symbols begin with this prefix.
******************************************************************************/
/* for F-logic and HiLog predicates */



/******************************************************************************
  Attaching FLORA_PREFIX

  The argument to this Macro should be quoted.
******************************************************************************/



/******************************************************************************
  Strings following FLORA_PREFIX

  These strings should be quoted.
******************************************************************************/
/* Keep "mod" in the name of a formula wrapper right after FLORA_PREFIX
   We rely on this to identify meta wrappers */



/*  Trie for keeping skeletons of defined facts -- debugging */




/******************************************************************************
  Module and trie prefixes
******************************************************************************/
/* prefix to construct Flora module predicates. */


/*  prefix to name Flora storage trie for a module. */



/* prefix to name Flora fld storage trie for a module. */



/****************************************************************************
  F-logic atom prefixes for predicates that are used to distinguish F-logic
  wrappers in the trailers, the user program, base facts, etc.
****************************************************************************/
















/******************************************************************************
  Lengths of prefixes of F-logic wrappers
******************************************************************************/



/****************************************************************************
  Prefixes that are used for F-logic wrappers in rule bodies of user programs.
  They are called "debuggin prefixes" because they were introduced to help
  implement the debugging feature that catches undefined methods.
****************************************************************************/



/* Prefixes used for checking undefinedness */



/* Corresponding 1-arg macros */

















/******************************************************************************
  Lengths of prefixes that are used in the wrappers to the left of module name

  Note: We need to remember that these prefixes are enclosed in quotes.
        But we need the actual atom length that Prolog uses. So, we deduct 2.
******************************************************************************/



/* length of FLORA_PREFIX'FLORA_MODULE_TAG */













%% support for undefinedness checks


%% used for generating new oids statically












'_$_$_flora''mod''main''meth'('urn:uuid:46ebbb94-592a-47b1-909b-897bc4d86794','http://vulcan.com/2008/silk#strict',[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('isa','Hypothesis-HypotheticalContext-260762','HypotheticalContext'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''meth'('urn:uuid:f2cb6fce-4f71-4bdf-8cd7-fab973a9f669','http://vulcan.com/2008/silk#strict',[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('genlMt','Hypothesis-HypotheticalContext-260762','BaseKB'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''meth'('urn:uuid:23540939-1715-477a-ac33-a298b8529c06','http://vulcan.com/2008/silk#strict',[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('isa','HYP-Thing-260763','Thing'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''meth'('urn:uuid:9af5c7b7-c500-49a4-b3a3-91b5fd2689f1','http://vulcan.com/2008/silk#strict',[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('isa','HYP-Thing-260764','Thing'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''meth'('urn:uuid:ad10d06d-d94c-41ea-b8e3-05df0921f7e8','http://vulcan.com/2008/silk#strict',[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','UniversalVocabularyMt','flapply'('isa','HYP-BinaryPredicate-260765','BinaryPredicate'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('istAsserted','Hypothesis-HypotheticalContext-260762','flapply'('HYP-BinaryPredicate-260765','HYP-Thing-260763','HYP-Thing-260764'),[_CallerModuleVar,_CallerModuleArgsVar]).
'_$_$_flora''mod''main''tblflapply'('queryMt','EverythingPSC',[_CallerModuleVar,_CallerModuleArgsVar]).
